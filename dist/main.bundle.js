!function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.l=!0,module.exports}__webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,name,{enumerable:!0,get:getter})},__webpack_require__.r=function(exports){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})},__webpack_require__.t=function(value,mode){if(1&mode&&(value=__webpack_require__(value)),8&mode)return value;if(4&mode&&"object"==typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);if(__webpack_require__.r(ns),Object.defineProperty(ns,"default",{enumerable:!0,value:value}),2&mode&&"string"!=typeof value)for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns},__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __webpack_require__.d(getter,"a",getter),getter},__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=21)}([function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.PF2ModifierType=Object.freeze({ABILITY:"ability",PROFICIENCY:"proficiency",CIRCUMSTANCE:"circumstance",ITEM:"item",STATUS:"status",UNTYPED:"untyped"});class PF2Modifier{constructor(name,modifier,type,enabled=!0,source,notes){this.name=name,this.modifier=modifier,this.type=type,this.enabled=enabled,this.ignored=!1,this.custom=!1,source&&(this.source=source),notes&&(this.notes=notes)}}exports.PF2Modifier=PF2Modifier,exports.STRENGTH=Object.freeze({withScore:score=>new PF2Modifier("PF2E.AbilityStr",Math.floor((score-10)/2),exports.PF2ModifierType.ABILITY)}),exports.DEXTERITY=Object.freeze({withScore:score=>new PF2Modifier("PF2E.AbilityDex",Math.floor((score-10)/2),exports.PF2ModifierType.ABILITY)}),exports.CONSTITUTION=Object.freeze({withScore:score=>new PF2Modifier("PF2E.AbilityCon",Math.floor((score-10)/2),exports.PF2ModifierType.ABILITY)}),exports.INTELLIGENCE=Object.freeze({withScore:score=>new PF2Modifier("PF2E.AbilityInt",Math.floor((score-10)/2),exports.PF2ModifierType.ABILITY)}),exports.WISDOM=Object.freeze({withScore:score=>new PF2Modifier("PF2E.AbilityWis",Math.floor((score-10)/2),exports.PF2ModifierType.ABILITY)}),exports.CHARISMA=Object.freeze({withScore:score=>new PF2Modifier("PF2E.AbilityCha",Math.floor((score-10)/2),exports.PF2ModifierType.ABILITY)}),exports.AbilityModifier=Object.freeze({fromAbilityScore:(ability,score)=>{switch(ability){case"str":return exports.STRENGTH.withScore(score);case"dex":return exports.DEXTERITY.withScore(score);case"con":return exports.CONSTITUTION.withScore(score);case"int":return exports.INTELLIGENCE.withScore(score);case"wis":return exports.WISDOM.withScore(score);case"cha":return exports.CHARISMA.withScore(score);default:return console.error("invalid ability abbreviation: "+ability),new PF2Modifier("PF2E.AbilityUnknown",0,exports.PF2ModifierType.ABILITY)}}}),exports.UNTRAINED=Object.freeze({atLevel:level=>{var _a;const modifier=null!==(_a=game.settings.get("pf2e","proficiencyUntrainedModifier"))&&void 0!==_a?_a:0;return new PF2Modifier("PF2E.ProficiencyLevel0",modifier,exports.PF2ModifierType.PROFICIENCY)}}),exports.TRAINED=Object.freeze({atLevel:level=>{var _a,_b;const rule=null!==(_a=game.settings.get("pf2e","proficiencyVariant"))&&void 0!==_a?_a:"ProficiencyWithLevel";let modifier=null!==(_b=game.settings.get("pf2e","proficiencyTrainedModifier"))&&void 0!==_b?_b:2;return"ProficiencyWithLevel"===rule&&(modifier+=level),new PF2Modifier("PF2E.ProficiencyLevel1",modifier,exports.PF2ModifierType.PROFICIENCY)}}),exports.EXPERT=Object.freeze({atLevel:level=>{var _a,_b;const rule=null!==(_a=game.settings.get("pf2e","proficiencyVariant"))&&void 0!==_a?_a:"ProficiencyWithLevel";let modifier=null!==(_b=game.settings.get("pf2e","proficiencyExpertModifier"))&&void 0!==_b?_b:4;return"ProficiencyWithLevel"===rule&&(modifier+=level),new PF2Modifier("PF2E.ProficiencyLevel2",modifier,exports.PF2ModifierType.PROFICIENCY)}}),exports.MASTER=Object.freeze({atLevel:level=>{var _a,_b;const rule=null!==(_a=game.settings.get("pf2e","proficiencyVariant"))&&void 0!==_a?_a:"ProficiencyWithLevel";let modifier=null!==(_b=game.settings.get("pf2e","proficiencyMasterModifier"))&&void 0!==_b?_b:6;return"ProficiencyWithLevel"===rule&&(modifier+=level),new PF2Modifier("PF2E.ProficiencyLevel3",modifier,exports.PF2ModifierType.PROFICIENCY)}}),exports.LEGENDARY=Object.freeze({atLevel:level=>{var _a,_b;const rule=null!==(_a=game.settings.get("pf2e","proficiencyVariant"))&&void 0!==_a?_a:"ProficiencyWithLevel";let modifier=null!==(_b=game.settings.get("pf2e","proficiencyLegendaryModifier"))&&void 0!==_b?_b:8;return"ProficiencyWithLevel"===rule&&(modifier+=level),new PF2Modifier("PF2E.ProficiencyLevel4",modifier,exports.PF2ModifierType.PROFICIENCY)}}),exports.ProficiencyModifier=Object.freeze({fromLevelAndRank:(level,rank)=>{switch(rank||0){case 0:return exports.UNTRAINED.atLevel(level);case 1:return exports.TRAINED.atLevel(level);case 2:return exports.EXPERT.atLevel(level);case 3:return exports.MASTER.atLevel(level);case 4:return exports.LEGENDARY.atLevel(level);default:throw new RangeError("invalid proficiency rank: "+rank)}}});const HIGHER_BONUS=(a,b)=>a.modifier>=b.modifier,LOWER_PENALTY=(a,b)=>a.modifier<=b.modifier;function applyStacking(best,modifier,isBetter){const existing=best[modifier.type];return void 0===existing?(modifier.enabled=!0,best[modifier.type]=modifier,modifier.modifier):isBetter(modifier,existing)?(existing.enabled=!1,modifier.enabled=!0,best[modifier.type]=modifier,modifier.modifier-existing.modifier):(modifier.enabled=!1,0)}class PF2StatisticModifier{constructor(name,modifiers){this.name=name,this._modifiers=modifiers||[];{const seen=[];this._modifiers.filter(m=>{const found=void 0!==seen.find(o=>o.name===m.name);return found||seen.push(m),found}),this._modifiers=seen}this.applyStackingRules()}get modifiers(){return Object.freeze([].concat(this._modifiers))}push(modifier){void 0===this._modifiers.find(o=>o.name===modifier.name)&&(this._modifiers.push(modifier),this.applyStackingRules())}delete(modifierName){this._modifiers=this._modifiers.filter(m=>m.name!==modifierName),this.applyStackingRules()}applyStackingRules(){this.totalModifier=function(modifiers){let total=0;const highestBonus={},lowestPenalty={};for(const modifier of modifiers)modifier.ignored?modifier.enabled=!1:modifier.type!==exports.PF2ModifierType.UNTYPED?modifier.modifier<0?total+=applyStacking(lowestPenalty,modifier,LOWER_PENALTY):total+=applyStacking(highestBonus,modifier,HIGHER_BONUS):(modifier.enabled=!0,total+=modifier.modifier);return total}(this._modifiers)}}exports.PF2StatisticModifier=PF2StatisticModifier;exports.PF2CheckModifier=class extends PF2StatisticModifier{constructor(name,statistic,modifiers=[]){super(name,JSON.parse(JSON.stringify(statistic._modifiers)).concat(modifiers))}};class PF2ModifierPredicate{constructor(param){var _a,_b,_c;this.all=null!==(_a=null==param?void 0:param.all)&&void 0!==_a?_a:[],this.any=null!==(_b=null==param?void 0:param.any)&&void 0!==_b?_b:[],this.not=null!==(_c=null==param?void 0:param.not)&&void 0!==_c?_c:[]}static test(predicate,options){const{all:all,any:any,not:not}=null!=predicate?predicate:{};let active=!0;return all&&all.length>0&&(active=active&&all.every(i=>options.includes(i))),any&&any.length>0&&(active=active&&any.some(i=>options.includes(i))),not&&not.length>0&&(active=active&&!not.some(i=>options.includes(i))),active}test(options){return PF2ModifierPredicate.test(this,options)}}exports.PF2ModifierPredicate=PF2ModifierPredicate;exports.PF2DamageDice=class{constructor(param){var _a,_b,_c,_d,_e;if(!param.selector)throw new Error("selector is mandatory");if(this.selector=param.selector,!param.name)throw new Error("name is mandatory");this.name=param.name,this.diceNumber=null!==(_a=null==param?void 0:param.diceNumber)&&void 0!==_a?_a:0,this.dieSize=null==param?void 0:param.dieSize,this.critical=null!==(_b=null==param?void 0:param.critical)&&void 0!==_b&&_b,this.category=null==param?void 0:param.category,this.damageType=null==param?void 0:param.damageType,this.traits=null!==(_c=null==param?void 0:param.traits)&&void 0!==_c?_c:[],this.override=null==param?void 0:param.override,this.predicate=new PF2ModifierPredicate(null!==(_e=null!==(_d=null==param?void 0:param.predicate)&&void 0!==_d?_d:null==param?void 0:param.options)&&void 0!==_e?_e:{}),this.ignored=PF2ModifierPredicate.test(this.predicate,[]),this.enabled=this.ignored,this.custom=null==param?void 0:param.custom}}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.PF2RuleElement=class{onCreate(actorData,item,updates){}onDelete(actorData,item,updates){}onBeforePrepareData(actorData,statisticsModifiers,damageDice){}onAfterPrepareData(actorData,statisticsModifiers,damageDice){}getDefaultLabel(ruleData,item){var _a;return game.i18n.localize(null!==(_a=ruleData.label)&&void 0!==_a?_a:null==item?void 0:item.name)}resolveValue(valueData,ruleData,item,actorData,defaultValue=0){var _a,_b,_c;let value=valueData;if("object"==typeof valueData){let bracket=getProperty(actorData,"data.details.level.value");if(valueData.field){const field=String(valueData.field),separator=field.indexOf("|");switch(field.substring(0,separator)){case"actor":bracket=getProperty(actorData,field.substring(separator+1));break;case"item":bracket=getProperty(item,field.substring(separator+1));break;case"rule":bracket=getProperty(ruleData,field.substring(separator+1));break;default:bracket=getProperty(actorData,field.substring(0))}}value=null!==(_c=null===(_b=(null!==(_a=valueData.brackets)&&void 0!==_a?_a:[]).find(b=>{var _a;return(null!==(_a=b.start)&&void 0!==_a?_a:0)<=bracket&&(!b.end||b.end>=bracket)}))||void 0===_b?void 0:_b.value)&&void 0!==_c?_c:defaultValue}if("string"==typeof value){const roll=new Roll(value,Object.assign(Object.assign({},actorData.data),{item:item.data}));roll.roll(),value=roll.total}return Number.isInteger(Number(value))&&(value=Number(value)),value}}},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const modifiers_1=__webpack_require__(0),conditions_1=__webpack_require__(5),weapon_1=__webpack_require__(32),rolls_1=__webpack_require__(16),container_1=__webpack_require__(9),runes_1=__webpack_require__(7),trait_selector_1=__webpack_require__(10),dice_1=__webpack_require__(4),item_1=__importDefault(__webpack_require__(13)),dataDefinitions_1=__webpack_require__(17),rules_1=__webpack_require__(35);exports.SKILL_DICTIONARY=Object.freeze({acr:"acrobatics",arc:"arcana",ath:"athletics",cra:"crafting",dec:"deception",dip:"diplomacy",itm:"intimidation",med:"medicine",nat:"nature",occ:"occultism",prf:"performance",rel:"religion",soc:"society",ste:"stealth",sur:"survival",thi:"thievery"}),exports.SKILL_EXPANDED=Object.freeze({acrobatics:{ability:"dex",shortform:"acr"},arcana:{ability:"int",shortform:"arc"},athletics:{ability:"str",shortform:"ath"},crafting:{ability:"int",shortform:"cra"},deception:{ability:"cha",shortform:"dec"},diplomacy:{ability:"cha",shortform:"dip"},intimidation:{ability:"cha",shortform:"itm"},medicine:{ability:"wis",shortform:"med"},nature:{ability:"wis",shortform:"nat"},occultism:{ability:"int",shortform:"occ"},performance:{ability:"cha",shortform:"pfr"},religion:{ability:"wis",shortform:"rel"},society:{ability:"int",shortform:"soc"},stealth:{ability:"dex",shortform:"ste"},survival:{ability:"wis",shortform:"sur"},thievery:{ability:"dex",shortform:"thi"}});const SUPPORTED_ROLL_OPTIONS=Object.freeze(["all","attack-roll","damage-roll","saving-throw","fortitude","reflex","will","perception","initiative","skill-check"]);class PF2EActor extends Actor{prepareData(){super.prepareData(),this._prepareTokenImg();const actorData=this.data,rules=actorData.items.reduce((accumulated,current)=>accumulated.concat(rules_1.PF2RuleElements.fromOwnedItem(current)),[]);if("character"===actorData.type?this._prepareCharacterData(actorData,rules):"npc"===actorData.type?this._prepareNPCData(actorData,rules):"familiar"===actorData.type&&this._prepareFamiliarData(actorData,rules),"traits"in actorData.data){const map={dr:CONFIG.PF2E.damageTypes,di:CONFIG.PF2E.damageTypes,dv:CONFIG.PF2E.damageTypes,ci:CONFIG.PF2E.conditionTypes,languages:CONFIG.PF2E.languages};for(const[t,choices]of Object.entries(map)){const trait=actorData.data.traits[t];void 0!==trait&&(trait.value instanceof Array||(trait.value=trait_selector_1.TraitSelector5e._backCompat(trait.value,choices)))}}return actorData}_prepareTokenImg(){game.settings.get("pf2e","defaultTokenSettings")&&"icons/svg/mystery-man.svg"===this.data.token.img&&this.data.token.img!==this.img&&(this.data.token.img=this.img)}_prepareCharacterData(actorData,rules){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x,_y,_z,_0,_1,_2,_3;const{data:data}=actorData;for(const abl of Object.values(actorData.data.abilities))abl.mod=Math.floor((abl.value-10)/2);data.toggles={actions:[{label:"PF2E.TargetFlatFootedLabel",inputName:`flags.${game.system.id}.rollOptions.all.target:flatFooted`,checked:this.getFlag(game.system.id,"rollOptions.all.target:flatFooted")}]};const{statisticsModifiers:statisticsModifiers,damageDice:damageDice}=this._prepareCustomModifiers(actorData,rules);data.details.xp.pct=Math.min(Math.round(100*data.details.xp.value/data.details.xp.max),99.5),(null===(_a=data.pfs)||void 0===_a?void 0:_a.levelBump)&&(statisticsModifiers.all=(statisticsModifiers.all||[]).concat(new modifiers_1.PF2Modifier("PF2E.PFS.LevelBump",1,modifiers_1.PF2ModifierType.UNTYPED)));{const modifiers=[new modifiers_1.PF2Modifier("PF2E.AncestryHP",data.attributes.ancestryhp,modifiers_1.PF2ModifierType.UNTYPED)];if(game.settings.get("pf2e","staminaVariant")){const bonusSpPerLevel=data.attributes.levelbonussp*data.details.level.value,halfClassHp=Math.floor(data.attributes.classhp/2);data.attributes.sp.max=(halfClassHp+data.abilities.con.mod)*data.details.level.value+bonusSpPerLevel+data.attributes.flatbonussp,modifiers.push(new modifiers_1.PF2Modifier("PF2E.ClassHP",halfClassHp*data.details.level.value,modifiers_1.PF2ModifierType.UNTYPED))}else modifiers.push(new modifiers_1.PF2Modifier("PF2E.ClassHP",data.attributes.classhp*data.details.level.value,modifiers_1.PF2ModifierType.UNTYPED)),modifiers.push(new modifiers_1.PF2Modifier("PF2E.AbilityCon",data.abilities.con.mod*data.details.level.value,modifiers_1.PF2ModifierType.UNTYPED));data.attributes.flatbonushp&&modifiers.push(new modifiers_1.PF2Modifier("PF2E.FlatBonusHP",data.attributes.flatbonushp,modifiers_1.PF2ModifierType.UNTYPED)),data.attributes.levelbonushp&&modifiers.push(new modifiers_1.PF2Modifier("PF2E.BonusHPperLevel",data.attributes.levelbonushp*data.details.level.value,modifiers_1.PF2ModifierType.UNTYPED)),(statisticsModifiers.hp||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m)),(statisticsModifiers["hp-per-level"]||[]).map(m=>duplicate(m)).forEach(m=>{m.modifier*=data.details.level.value,modifiers.push(m)});const stat=mergeObject(new modifiers_1.PF2StatisticModifier("hp",modifiers),data.attributes.hp,{overwrite:!1});if(null===(_b=data.pfs)||void 0===_b?void 0:_b.levelBump){const hitPointsBump=Math.max(10,.1*stat.totalModifier);stat.push(new modifiers_1.PF2Modifier("PF2E.PFS.LevelBump",hitPointsBump,modifiers_1.PF2ModifierType.UNTYPED))}stat.max=stat.totalModifier,stat.value=Math.min(stat.value,stat.max),stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),data.attributes.hp=stat}const worn=this.getFirstWornArmor();for(const[saveName,save]of Object.entries(data.saves)){const modifiers=[modifiers_1.AbilityModifier.fromAbilityScore(save.ability,data.abilities[save.ability].value),modifiers_1.ProficiencyModifier.fromLevelAndRank(data.details.level.value,save.rank)];if(worn){const resiliencyBonus=runes_1.getResiliencyBonus(worn.data);resiliencyBonus>0&&modifiers.push(new modifiers_1.PF2Modifier(worn.name,resiliencyBonus,modifiers_1.PF2ModifierType.ITEM))}save.item&&modifiers.push(new modifiers_1.PF2Modifier("PF2E.ItemBonusLabel",Number(save.item),modifiers_1.PF2ModifierType.ITEM)),[saveName,save.ability+"-based","saving-throw","all"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier(saveName,modifiers),data.saves[saveName],{overwrite:!1});stat.value=stat.totalModifier,stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),stat.roll=(event,options=[],callback)=>{const label=game.i18n.format("PF2E.SavingThrowWithName",{saveName:game.i18n.localize(CONFIG.saves[saveName])});rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier(label,stat),{actor:this,type:"saving-throw",options:options},event,callback)},data.saves[saveName]=stat}for(const skl of Object.values(data.martial)){const proficiency=modifiers_1.ProficiencyModifier.fromLevelAndRank(data.details.level.value,skl.rank||0);skl.value=proficiency.modifier,skl.breakdown=`${game.i18n.localize(proficiency.name)} ${proficiency.modifier<0?"":"+"}${proficiency.modifier}`}{const modifiers=[modifiers_1.WISDOM.withScore(data.abilities.wis.value),modifiers_1.ProficiencyModifier.fromLevelAndRank(data.details.level.value,data.attributes.perception.rank||0)];data.attributes.perception.item&&modifiers.push(new modifiers_1.PF2Modifier("PF2E.ItemBonusLabel",Number(data.attributes.perception.item),modifiers_1.PF2ModifierType.ITEM)),["perception","wis-based","all"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier("perception",modifiers),data.attributes.perception,{overwrite:!1});stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),stat.value=stat.totalModifier,stat.roll=(event,options=[],callback)=>{const label=game.i18n.localize("PF2E.PerceptionCheck");rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier(label,stat),{actor:this,type:"perception-check",options:options},event,callback)},data.attributes.perception=stat}{const modifiers=[modifiers_1.AbilityModifier.fromAbilityScore(data.details.keyability.value,data.abilities[data.details.keyability.value].value),modifiers_1.ProficiencyModifier.fromLevelAndRank(data.details.level.value,null!==(_c=data.attributes.classDC.rank)&&void 0!==_c?_c:0)];["class",data.details.keyability.value+"-based","all"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier("PF2E.ClassDCLabel",modifiers),data.attributes.classDC,{overwrite:!1});stat.value=10+stat.totalModifier,stat.ability=data.details.keyability.value,stat.breakdown=[game.i18n.localize("PF2E.ClassDCBase")].concat(stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`)).join(", "),data.attributes.classDC=stat}{const modifiers=[],dexCap=duplicate(null!==(_d=data.attributes.dexCap)&&void 0!==_d?_d:[]);let armorCheckPenalty=0,proficiency="unarmored";worn&&(dexCap.push({value:Number(null!==(_e=worn.data.dex.value)&&void 0!==_e?_e:0),source:worn.name}),proficiency=null===(_f=worn.data.armorType)||void 0===_f?void 0:_f.value,data.abilities.str.value<Number(null!==(_g=worn.data.strength.value)&&void 0!==_g?_g:0)&&(armorCheckPenalty=Number(null!==(_h=worn.data.check.value)&&void 0!==_h?_h:0)),modifiers.push(new modifiers_1.PF2Modifier(worn.name,runes_1.getArmorBonus(worn.data),modifiers_1.PF2ModifierType.ITEM))),modifiers.unshift(modifiers_1.ProficiencyModifier.fromLevelAndRank(data.details.level.value,null!==(_k=null===(_j=data.martial[proficiency])||void 0===_j?void 0:_j.rank)&&void 0!==_k?_k:0));const dexterity=modifiers_1.DEXTERITY.withScore(data.abilities.dex.value);dexterity.modifier=Math.min(dexterity.modifier,...dexCap.map(cap=>cap.value)),modifiers.unshift(dexterity),["ac","dex-based","all"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier("ac",modifiers),data.attributes.ac,{overwrite:!1});stat.value=10+stat.totalModifier,stat.check=armorCheckPenalty,stat.dexCap=dexCap.reduce((result,current)=>result?result.value>current.value?current:result:current,null),stat.breakdown=[game.i18n.localize("PF2E.ArmorClassBase")].concat(stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`)).join(", "),data.attributes.ac=stat}const shield=this.getFirstEquippedShield();shield&&(data.attributes.shield.value=shield.data.hp.value,data.attributes.shield.max=shield.data.maxHp.value);const hasUntrainedImprovisation=new Set(actorData.items.filter(item=>"feat"===item.type).map(item=>item.name)).has("Untrained Improvisation"),skills={};for(const[skillName,skill]of Object.entries(data.skills).filter(([shortform,_])=>Object.keys(exports.SKILL_DICTIONARY).includes(shortform))){const modifiers=[modifiers_1.AbilityModifier.fromAbilityScore(skill.ability,data.abilities[skill.ability].value),modifiers_1.ProficiencyModifier.fromLevelAndRank(data.details.level.value,skill.rank)];if(0===skill.rank&&hasUntrainedImprovisation){let bonus=0;const rule=null!==(_l=game.settings.get("pf2e","proficiencyVariant"))&&void 0!==_l?_l:"ProficiencyWithLevel";"ProficiencyWithLevel"===rule&&(bonus=data.details.level.value<7?Math.floor(data.details.level.value/2):data.details.level.value),modifiers.push(new modifiers_1.PF2Modifier("PF2E.ProficiencyLevelUntrainedImprovisation",bonus,modifiers_1.PF2ModifierType.PROFICIENCY))}skill.item&&modifiers.push(new modifiers_1.PF2Modifier("PF2E.ItemBonusLabel",skill.item,modifiers_1.PF2ModifierType.ITEM)),skill.armor&&data.attributes.ac.check&&data.attributes.ac.check<0&&modifiers.push(new modifiers_1.PF2Modifier("PF2E.ArmorCheckPenalty",data.attributes.ac.check,modifiers_1.PF2ModifierType.UNTYPED));const expandedName=exports.SKILL_DICTIONARY[skillName];[expandedName,skill.ability+"-based","skill-check","all"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier(expandedName,modifiers),skill,{overwrite:!1});stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),stat.value=stat.totalModifier,stat.roll=(event,options=[],callback)=>{const label=game.i18n.format("PF2E.SkillCheckWithName",{skillName:game.i18n.localize(CONFIG.skills[skillName])});rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier(label,stat),{actor:this,type:"skill-check",options:options},event,callback)},skills[skillName]=stat}actorData.items.filter(i=>"lore"===i.type).forEach(skill=>{var _a;const shortform=skill.name.toLowerCase().replace(/\s+/g,"-"),rank=skill.data.proficient.value,modifiers=[modifiers_1.AbilityModifier.fromAbilityScore("int",data.abilities.int.value),modifiers_1.ProficiencyModifier.fromLevelAndRank(data.details.level.value,rank)];if(0===rank&&hasUntrainedImprovisation){let bonus=0;const rule=null!==(_a=game.settings.get("pf2e","proficiencyVariant"))&&void 0!==_a?_a:"ProficiencyWithLevel";"ProficiencyWithLevel"===rule&&(bonus=data.details.level.value<7?Math.floor(data.details.level.value/2):data.details.level.value),modifiers.push(new modifiers_1.PF2Modifier("PF2E.ProficiencyLevelUntrainedImprovisation",bonus,modifiers_1.PF2ModifierType.PROFICIENCY))}[shortform,"int-based","skill-check","all"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier(skill.name,modifiers),data.skills[shortform],{overwrite:!1});stat.itemID=skill._id,stat.rank=null!=rank?rank:0,stat.shortform=shortform,stat.expanded=skill,stat.value=stat.totalModifier,stat.lore=!0,stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),stat.roll=(event,options=[],callback)=>{const label=game.i18n.format("PF2E.SkillCheckWithName",{skillName:skill.name});rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier(label,stat),{actor:this,type:"skill-check",options:options},event,callback)},skills[shortform]=stat}),data.skills=skills;{const label=game.i18n.localize("PF2E.SpeedTypesLand"),base=Number(null!==(_m=data.attributes.speed.value)&&void 0!==_m?_m:0),modifiers=[];["land-speed","speed"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier(game.i18n.format("PF2E.SpeedLabel",{type:label}),modifiers),data.attributes.speed,{overwrite:!1});stat.total=base+stat.totalModifier,stat.type="land",stat.breakdown=[`${game.i18n.format("PF2E.SpeedBaseLabel",{type:label})} ${base}`].concat(stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`)).join(", "),data.attributes.speed=stat}for(let idx=0;idx<data.attributes.speed.otherSpeeds.length;idx++){const speed=data.attributes.speed.otherSpeeds[idx],base=Number(null!==(_o=speed.value)&&void 0!==_o?_o:0),modifiers=[];[speed.type+"-speed","speed"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier(game.i18n.format("PF2E.SpeedLabel",{type:speed.label}),modifiers),speed,{overwrite:!1});stat.total=base+stat.totalModifier,stat.breakdown=[`${game.i18n.format("PF2E.SpeedBaseLabel",{type:speed.label})} ${base}`].concat(stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`)).join(", "),data.attributes.speed.otherSpeeds[idx]=stat}data.actions=[];{const proficiencies={simple:{name:"Simple",rank:null!==(_r=null===(_q=null===(_p=null==data?void 0:data.martial)||void 0===_p?void 0:_p.simple)||void 0===_q?void 0:_q.rank)&&void 0!==_r?_r:0},martial:{name:"Martial",rank:null!==(_u=null===(_t=null===(_s=null==data?void 0:data.martial)||void 0===_s?void 0:_s.martial)||void 0===_t?void 0:_t.rank)&&void 0!==_u?_u:0},advanced:{name:"Advanced",rank:null!==(_x=null===(_w=null===(_v=null==data?void 0:data.martial)||void 0===_v?void 0:_v.advanced)||void 0===_w?void 0:_w.rank)&&void 0!==_x?_x:0},unarmed:{name:"Unarmed",rank:null!==(_0=null===(_z=null===(_y=null==data?void 0:data.martial)||void 0===_y?void 0:_y.unarmed)||void 0===_z?void 0:_z.rank)&&void 0!==_0?_0:0}};(null!==(_1=actorData.items)&&void 0!==_1?_1:[]).filter(item=>"martial"===item.type).forEach(item=>{var _a,_b,_c;proficiencies[item._id]={name:item.name,rank:Number(null!==(_c=null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.proficient)||void 0===_b?void 0:_b.value)&&void 0!==_c?_c:0)}});const unarmed={_id:"fist",name:game.i18n.localize("PF2E.Strike.Fist.Label"),type:"weapon",img:"systems/pf2e/icons/features/classes/powerful-fist.jpg",data:{ability:{value:"str"},weaponType:{value:"unarmed"},bonus:{value:0},damage:{dice:1,die:"d4",damageType:"bludgeoning"},range:{value:"melee"},traits:{value:["agile","finesse","nonlethal","unarmed"]}}};(null!==(_2=actorData.items)&&void 0!==_2?_2:[]).some(i=>"feat"===i.type&&"Powerful Fist"===i.name)&&(unarmed.name="Powerful Fist",unarmed.data.damage.die="d6"),(null!==(_3=actorData.items)&&void 0!==_3?_3:[]).filter(item=>"weapon"===item.type).concat([unarmed]).forEach(item=>{var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l;const modifiers=[];{let ability=null!==(_b=null===(_a=item.data.ability)||void 0===_a?void 0:_a.value)&&void 0!==_b?_b:"str",score=null!==(_d=null===(_c=data.abilities[item.data.ability.value])||void 0===_c?void 0:_c.value)&&void 0!==_d?_d:0;((null===(_e=item.data.traits)||void 0===_e?void 0:_e.value)||[]).includes("finesse")&&data.abilities.dex.mod>data.abilities[ability].mod&&(ability="dex",score=data.abilities.dex.value),modifiers.push(modifiers_1.AbilityModifier.fromAbilityScore(ability,score))}modifiers.push(modifiers_1.ProficiencyModifier.fromLevelAndRank(data.details.level.value,null!==(_g=null===(_f=proficiencies[item.data.weaponType.value])||void 0===_f?void 0:_f.rank)&&void 0!==_g?_g:0));const attackBonus=runes_1.getAttackBonus(item.data);0!==attackBonus&&modifiers.push(new modifiers_1.PF2Modifier("PF2E.ItemBonusLabel",attackBonus,modifiers_1.PF2ModifierType.ITEM));{const stats=[];(null===(_j=null===(_h=item.data)||void 0===_h?void 0:_h.group)||void 0===_j?void 0:_j.value)&&stats.push(item.data.group.value.toLowerCase()+"-weapon-group-attack"),stats.push(item.name.replace(/\s+/g,"-").toLowerCase()+"-attack"),stats.concat(["attack",item.data.ability.value+"-attack",item.data.ability.value+"-based",item._id+"-attack","attack-roll","all"]).forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))})}const action=new modifiers_1.PF2StatisticModifier(item.name,modifiers);action.imageUrl=item.img,action.glyph="A",action.type="strike";const flavor=this.getStrikeDescription(item);action.description=flavor.description,action.criticalSuccess=flavor.criticalSuccess,action.success=flavor.success,action.traits=[{name:"attack",label:game.i18n.localize("PF2E.TraitAttack"),toggle:!1}].concat(PF2EActor.traits(null===(_l=null===(_k=null==item?void 0:item.data)||void 0===_k?void 0:_k.traits)||void 0===_l?void 0:_l.value).map(trait=>{var _a;const key=null!==(_a=CONFIG.weaponTraits[trait])&&void 0!==_a?_a:trait,option={name:trait,label:game.i18n.localize(key),toggle:!1};return trait.startsWith("two-hand-")?(option.rollName="damage-roll",option.rollOption="two-handed"):trait.startsWith("versatile-")&&(option.rollName="damage-roll",option.rollOption=trait),option.rollName&&option.rollOption&&(option.toggle=!0,option.cssClass=this.getRollOptions([option.rollName]).includes(option.rollOption)?"toggled-on":"toggled-off"),option})),action.breakdown=action.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),action.attack=(event,options=[])=>{var _a,_b;options=options.concat(PF2EActor.traits(null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.traits)||void 0===_b?void 0:_b.value)),rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier("Strike: "+action.name,action),{actor:this,type:"attack-roll",options:options},event)},action.roll=action.attack;const map=item_1.default.calculateMap(item);action.variants=[{label:`Strike ${action.totalModifier<0?"":"+"}${action.totalModifier}`,roll:(event,options=[])=>{var _a,_b;options=options.concat(PF2EActor.traits(null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.traits)||void 0===_b?void 0:_b.value)),rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier("Strike: "+action.name,action),{actor:this,type:"attack-roll",options:options},event)}},{label:"MAP "+map.map2,roll:(event,options=[])=>{var _a,_b;options=options.concat(PF2EActor.traits(null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.traits)||void 0===_b?void 0:_b.value)),rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier("Strike: "+action.name,action,[new modifiers_1.PF2Modifier("PF2E.MultipleAttackPenalty",map.map2,modifiers_1.PF2ModifierType.UNTYPED)]),{actor:this,type:"attack-roll",options:options},event)}},{label:"MAP "+map.map3,roll:(event,options=[])=>{var _a,_b;options=options.concat(PF2EActor.traits(null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.traits)||void 0===_b?void 0:_b.value)),rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier("Strike: "+action.name,action,[new modifiers_1.PF2Modifier("PF2E.MultipleAttackPenalty",map.map3,modifiers_1.PF2ModifierType.UNTYPED)]),{actor:this,type:"attack-roll",options:options},event)}}],action.damage=(event,options=[])=>{var _a,_b;const damage=weapon_1.PF2WeaponDamage.calculate(item,actorData,action.traits,statisticsModifiers,damageDice,null!==(_b=null===(_a=proficiencies[item.data.weaponType.value])||void 0===_a?void 0:_a.rank)&&void 0!==_b?_b:0,options);rolls_1.PF2DamageRoll.roll(damage,{type:"damage-roll",outcome:"success",options:options},event)},action.critical=(event,options=[])=>{var _a,_b;const damage=weapon_1.PF2WeaponDamage.calculate(item,actorData,action.traits,statisticsModifiers,damageDice,null!==(_b=null===(_a=proficiencies[item.data.weaponType.value])||void 0===_a?void 0:_a.rank)&&void 0!==_b?_b:0,options);rolls_1.PF2DamageRoll.roll(damage,{type:"damage-roll",outcome:"criticalSuccess",options:options},event)},data.actions.push(action)})}this.prepareInitiative(actorData,statisticsModifiers),rules.forEach(rule=>{try{rule.onAfterPrepareData(actorData,statisticsModifiers,damageDice)}catch(error){console.error(`PF2e | Failed to execute onAfterPrepareData on rule element ${rule}.`,error)}})}prepareInitiative(actorData,statisticsModifiers){var _a,_b;const{data:data}=actorData,initSkill=(null===(_b=null===(_a=data.attributes)||void 0===_a?void 0:_a.initiative)||void 0===_b?void 0:_b.ability)||"perception",modifiers=[],feats=new Set(actorData.items.filter(item=>"feat"===item.type).map(item=>item.name));feats.has("Incredible Initiative")&&modifiers.push(new modifiers_1.PF2Modifier("Incredible Initiative",2,modifiers_1.PF2ModifierType.CIRCUMSTANCE)),feats.has("Battlefield Surveyor")&&"perception"===initSkill&&modifiers.push(new modifiers_1.PF2Modifier("Battlefield Surveyor",2,modifiers_1.PF2ModifierType.CIRCUMSTANCE)),feats.has("Elven Instincts")&&"perception"===initSkill&&modifiers.push(new modifiers_1.PF2Modifier("Elven Instincts",2,modifiers_1.PF2ModifierType.CIRCUMSTANCE)),feats.has("Eye of Ozem")&&"perception"===initSkill&&modifiers.push(new modifiers_1.PF2Modifier("Eye of Ozem",2,modifiers_1.PF2ModifierType.CIRCUMSTANCE)),feats.has("Harmlessly Cute")&&"dec"===initSkill&&modifiers.push(new modifiers_1.PF2Modifier("Harmlessly Cute",1,modifiers_1.PF2ModifierType.CIRCUMSTANCE)),["initiative"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const initValues="perception"===initSkill?data.attributes.perception:data.skills[initSkill],skillName=game.i18n.localize("perception"===initSkill?"PF2E.PerceptionLabel":CONFIG.skills[initSkill]),stat=new modifiers_1.PF2CheckModifier("initiative",initValues,modifiers);stat.ability=initSkill,stat.label=game.i18n.format("PF2E.InitiativeWithSkill",{skillName:skillName}),stat.roll=(event,options=[])=>{rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier(data.attributes.initiative.label,data.attributes.initiative),{actor:this,type:"initiative",options:options},event,roll=>{this._applyInitiativeRollToCombatTracker(roll)})},data.attributes.initiative=stat}_applyInitiativeRollToCombatTracker(roll){if(roll){if(!game.combat)return void ui.notifications.error("No active encounters in the Combat Tracker.");const combatant=game.combat.turns.find(c=>c.actor.id===this._id);if(void 0===combatant)return void ui.notifications.error(`No combatant found for ${this.name} in the Combat Tracker.`);game.combat.setInitiative(combatant._id,roll.total)}else console.log("PF2e System | _applyInitiativeRollToCombatTracker | invalid roll object or roll.value mising: ",roll)}getFirstWornArmor(){return this.data.items.filter(item=>"armor"===item.type).filter(armor=>"shield"!==armor.data.armorType.value).find(armor=>armor.data.equipped.value)}getFirstEquippedShield(){return this.data.items.filter(item=>"armor"===item.type).filter(armor=>"shield"===armor.data.armorType.value).find(shield=>shield.data.equipped.value)}static traits(source){return Array.isArray(source)?source:"string"==typeof source?source.split(",").map(trait=>trait.trim()):[]}onCreateOwnedItem(child,options,userId){var _a,_b;if(!["character","npc"].includes(this.data.type))return;if(!this.can(game.user,"update"))return;const rules=rules_1.PF2RuleElements.fromRuleElementData(null!==(_b=null===(_a=child.data)||void 0===_a?void 0:_a.rules)&&void 0!==_b?_b:[],child),updates={};for(const rule of rules)rule.onCreate(this.data,child,updates);this.update(updates);const tokenUpdates=getProperty(updates,"token");tokenUpdates&&!isObjectEmpty(tokenUpdates)&&this._updateAllTokens(tokenUpdates)}onDeleteOwnedItem(child,options,userId){var _a,_b;if(!["character","npc"].includes(this.data.type))return;if(!this.can(game.user,"update"))return;const rules=rules_1.PF2RuleElements.fromRuleElementData(null!==(_b=null===(_a=child.data)||void 0===_a?void 0:_a.rules)&&void 0!==_b?_b:[],child),updates={};for(const rule of rules)rule.onDelete(this.data,child,updates);this.update(updates);const tokenUpdates=getProperty(updates,"token");tokenUpdates&&!isObjectEmpty(tokenUpdates)&&this._updateAllTokens(tokenUpdates)}async _updateAllTokens(updates){const promises=[];for(const scene of game.scenes.values())for(const token of scene.getEmbeddedCollection("Token"))token.actorId===this.id&&promises.push(scene.updateEmbeddedEntity("Token",mergeObject(updates,{_id:token._id},{inplace:!1})));return Promise.all(promises)}_prepareNPCData(actorData,rules){var _a,_b,_c,_d,_e,_f;const{data:data}=actorData,{statisticsModifiers:statisticsModifiers}=this._prepareCustomModifiers(actorData,rules);for(const abl of Object.values(actorData.data.abilities))abl.mod||(abl.mod=0),abl.value=2*abl.mod+10;{const base=null!==(_a=data.attributes.ac.base)&&void 0!==_a?_a:Number(data.attributes.ac.value),dexterity=Math.min(data.abilities.dex.mod,...(null!==(_b=data.attributes.dexCap)&&void 0!==_b?_b:[]).map(cap=>cap.value)),modifiers=[new modifiers_1.PF2Modifier("PF2E.BaseModifier",base-10-dexterity,modifiers_1.PF2ModifierType.UNTYPED),new modifiers_1.PF2Modifier(CONFIG.abilities.dex,dexterity,modifiers_1.PF2ModifierType.ABILITY)];["ac","dex-based","all"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier("ac",modifiers),data.attributes.ac,{overwrite:!1});stat.base=base,stat.value=10+stat.totalModifier,stat.breakdown=[game.i18n.localize("PF2E.ArmorClassBase")].concat(stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`)).join(", "),data.attributes.ac=stat}for(const[saveName,save]of Object.entries(data.saves)){const base=null!==(_c=save.base)&&void 0!==_c?_c:Number(save.value),modifiers=[new modifiers_1.PF2Modifier("PF2E.BaseModifier",base-data.abilities[save.ability].mod,modifiers_1.PF2ModifierType.UNTYPED),new modifiers_1.PF2Modifier(CONFIG.abilities[save.ability],data.abilities[save.ability].mod,modifiers_1.PF2ModifierType.ABILITY)];[saveName,save.ability+"-based","saving-throw","all"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier(saveName,modifiers),data.saves[saveName],{overwrite:!1});stat.base=base,stat.value=stat.totalModifier,stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),stat.roll=(event,options=[],callback)=>{const label=game.i18n.format("PF2E.SavingThrowWithName",{saveName:game.i18n.localize(CONFIG.saves[saveName])});rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier(label,stat),{actor:this,type:"saving-throw",options:options},event,callback)},data.saves[saveName]=stat}{const base=null!==(_d=data.attributes.perception.base)&&void 0!==_d?_d:Number(data.attributes.perception.value),modifiers=[new modifiers_1.PF2Modifier("PF2E.BaseModifier",base-data.abilities.wis.mod,modifiers_1.PF2ModifierType.UNTYPED),new modifiers_1.PF2Modifier(CONFIG.abilities.wis,data.abilities.wis.mod,modifiers_1.PF2ModifierType.ABILITY)];["perception","wis-based","all"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier("perception",modifiers),data.attributes.perception,{overwrite:!1});stat.base=base,stat.value=stat.totalModifier,stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),stat.roll=(event,options=[],callback)=>{const label=game.i18n.localize("PF2E.PerceptionCheck");rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier(label,stat),{actor:this,type:"perception-check",options:options},event,callback)},data.attributes.perception=stat}for(const item of actorData.items)if("lore"===item.type){const skill=item.name.toLowerCase().replace(/\s+/g,"-"),{ability:ability,shortform:shortform}=null!==(_e=exports.SKILL_EXPANDED[skill])&&void 0!==_e?_e:{ability:"int",shortform:skill},base=null!==(_f=item.data.mod.base)&&void 0!==_f?_f:Number(item.data.mod.value),modifiers=[new modifiers_1.PF2Modifier("PF2E.BaseModifier",base-data.abilities[ability].mod,modifiers_1.PF2ModifierType.UNTYPED),new modifiers_1.PF2Modifier(CONFIG.abilities[ability],data.abilities[ability].mod,modifiers_1.PF2ModifierType.ABILITY)];[skill,ability+"-based","skill-check","all"].forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier(item.name,modifiers),data.skills[shortform],{overwrite:!1});stat.base=base,stat.expanded=skill,stat.label=item.name,stat.value=stat.totalModifier,stat.visible=!0,stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),stat.roll=(event,options=[],callback)=>{const label=game.i18n.format("PF2E.SkillCheckWithName",{skillName:item.name});rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier(label,stat),{actor:this,type:"skill-check",options:options},event,callback)},data.skills[shortform]=stat}}_prepareFamiliarData(actorData,rules){var _a,_b,_c,_d;const{data:data}=actorData;let master;if(data.traits.traits.value=["minion"],data.traits.traits.value=[CONFIG.monsterTraits.minion],(null===(_a=null==data?void 0:data.master)||void 0===_a?void 0:_a.id)&&game.actors&&(master=game.actors.get(data.master.id)),master){data.master.name=null==master?void 0:master.name,data.master.level=null!==(_b=master.data.data.details.level.value)&&void 0!==_b?_b:0,data.master.ability=null!==(_c=data.master.ability)&&void 0!==_c?_c:"cha",data.details.level.value=data.master.level;const spellcastingAbilityModifier=master.data.data.abilities[data.master.ability].mod;data.traits.size.value="tiny",data.traits.size.label=CONFIG.PF2E.actorSizes[data.traits.size.value],data.traits.senses=[{type:"lowLightVision",label:"PF2E.SensesLowLightVision"}];const{statisticsModifiers:statisticsModifiers}=this._prepareCustomModifiers(actorData,rules),FILTER_MODIFIER=modifier=>![modifiers_1.PF2ModifierType.ABILITY,modifiers_1.PF2ModifierType.PROFICIENCY,modifiers_1.PF2ModifierType.ITEM].includes(modifier.type);0===Object.keys(data.attributes.speed.otherSpeeds).length&&data.attributes.speed.otherSpeeds.push({label:"Land",type:"land",value:25});for(let idx=0;idx<data.attributes.speed.otherSpeeds.length;idx++){const speed=data.attributes.speed.otherSpeeds[idx],base=Number(null!==(_d=speed.value)&&void 0!==_d?_d:0),modifiers=[];[speed.type+"-speed","speed"].forEach(key=>{(statisticsModifiers[key]||[]).filter(FILTER_MODIFIER).map(m=>duplicate(m)).forEach(m=>modifiers.push(m))});const stat=mergeObject(new modifiers_1.PF2StatisticModifier(game.i18n.format("PF2E.SpeedLabel",{type:speed.label}),modifiers),speed,{overwrite:!1});stat.total=base+stat.totalModifier,stat.breakdown=[`${game.i18n.format("PF2E.SpeedBaseLabel",{type:speed.label})} ${base}`].concat(stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`)).join(", "),data.attributes.speed.otherSpeeds[idx]=stat}data.traits.traits.value.unshift("PF2E.ActorSize"+data.traits.size.label);{const modifiers=[new modifiers_1.PF2Modifier("PF2E.MasterLevelHP",5*data.master.level,modifiers_1.PF2ModifierType.UNTYPED)];(statisticsModifiers.hp||[]).filter(FILTER_MODIFIER).map(m=>duplicate(m)).forEach(m=>modifiers.push(m)),(statisticsModifiers["hp-per-level"]||[]).filter(FILTER_MODIFIER).map(m=>duplicate(m)).forEach(m=>{m.modifier*=data.details.level.value,modifiers.push(m)});const stat=mergeObject(new modifiers_1.PF2StatisticModifier("hp",modifiers),data.attributes.hp,{overwrite:!1});stat.max=stat.totalModifier,stat.value=Math.min(stat.value,stat.max),stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),data.attributes.hp=stat}{const source=master.data.data.attributes.ac.modifiers.filter(modifier=>!["status","circumstance"].includes(modifier.type)),base=10+new modifiers_1.PF2StatisticModifier("base",source).totalModifier,modifiers=[];["ac","dex-based","all"].forEach(key=>(statisticsModifiers[key]||[]).filter(FILTER_MODIFIER).map(m=>duplicate(m)).forEach(m=>modifiers.push(m)));const stat=new modifiers_1.PF2StatisticModifier("ac",modifiers);stat.value=base+stat.totalModifier,stat.breakdown=[game.i18n.format("PF2E.MasterArmorClass",{base:base})].concat(stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`)).join(", "),data.attributes.ac=stat}for(const[saveName,save]of Object.entries(master.data.data.saves)){const source=save.modifiers.filter(modifier=>!["status","circumstance"].includes(modifier.type)),modifiers=[new modifiers_1.PF2Modifier("PF2E.MasterSavingThrow."+saveName,new modifiers_1.PF2StatisticModifier("base",source).totalModifier,modifiers_1.PF2ModifierType.UNTYPED)];[save.name,save.ability+"-based","saving-throw","all"].forEach(key=>(statisticsModifiers[key]||[]).filter(FILTER_MODIFIER).map(m=>duplicate(m)).forEach(m=>modifiers.push(m)));const stat=new modifiers_1.PF2StatisticModifier(CONFIG.saves[saveName],modifiers);stat.value=stat.totalModifier,stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),stat.roll=(event,options=[],callback)=>{const label=game.i18n.format("PF2E.SavingThrowWithName",{saveName:game.i18n.localize(CONFIG.saves[save.name])});rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier(label,stat),{actor:this,type:"saving-throw",options:options},event,callback)},data.saves[saveName]=stat}{const modifiers=[new modifiers_1.PF2Modifier("PF2E.MasterLevel",data.details.level.value,modifiers_1.PF2ModifierType.UNTYPED)];["attack","all"].forEach(key=>(statisticsModifiers[key]||[]).filter(FILTER_MODIFIER).map(m=>duplicate(m)).forEach(m=>modifiers.push(m)));const stat=new modifiers_1.PF2StatisticModifier("attack",modifiers);stat.value=stat.totalModifier,stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),stat.roll=(event,options=[],callback)=>{rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier("Attack Roll",stat),{actor:this,type:"attack-roll",options:options},event,callback)},data.attack=stat}{const modifiers=[new modifiers_1.PF2Modifier("PF2E.MasterLevel",data.details.level.value,modifiers_1.PF2ModifierType.UNTYPED),new modifiers_1.PF2Modifier("PF2E.MasterAbility."+data.master.ability,spellcastingAbilityModifier,modifiers_1.PF2ModifierType.UNTYPED)];["perception","wis-based","all"].forEach(key=>(statisticsModifiers[key]||[]).filter(FILTER_MODIFIER).map(m=>duplicate(m)).forEach(m=>modifiers.push(m)));const stat=new modifiers_1.PF2StatisticModifier("perception",modifiers);stat.value=stat.totalModifier,stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),stat.roll=(event,options=[],callback)=>{const label=game.i18n.localize("PF2E.PerceptionCheck");rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier(label,stat),{actor:this,type:"perception-check",options:options},event,callback)},data.attributes.perception=stat}for(const[shortform,skillName]of Object.entries(CONFIG.PF2E.skills)){const modifiers=[new modifiers_1.PF2Modifier("PF2E.MasterLevel",data.details.level.value,modifiers_1.PF2ModifierType.UNTYPED)];["acr","ste"].includes(shortform)&&modifiers.push(new modifiers_1.PF2Modifier("PF2E.MasterAbility."+data.master.ability,spellcastingAbilityModifier,modifiers_1.PF2ModifierType.UNTYPED));const expanded=exports.SKILL_DICTIONARY[shortform],ability=exports.SKILL_EXPANDED[expanded].ability;[expanded,ability+"-based","skill-check","all"].forEach(key=>(statisticsModifiers[key]||[]).filter(FILTER_MODIFIER).map(m=>duplicate(m)).forEach(m=>modifiers.push(m)));const stat=new modifiers_1.PF2StatisticModifier(game.i18n.localize("PF2E.Skill"+skillName),modifiers);stat.value=stat.totalModifier,stat.ability=ability,stat.breakdown=stat.modifiers.filter(m=>m.enabled).map(m=>`${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}`).join(", "),stat.roll=(event,options=[],callback)=>{const label=game.i18n.format("PF2E.SkillCheckWithName",{skillName:game.i18n.localize(CONFIG.skills[shortform])});rolls_1.PF2Check.roll(new modifiers_1.PF2CheckModifier(label,stat),{actor:this,type:"skill-check",options:options},event,callback)},data.skills[shortform]=stat}}else data.master.name=void 0,data.master.level=0,data.details.level.value=0,data.attributes.hp={value:data.attributes.hp.value,max:data.attributes.hp.value},data.attributes.ac={value:10,breakdown:game.i18n.localize("PF2E.ArmorClassBase")},data.saves={fortitude:{value:0},reflex:{value:0},will:{value:0}},data.attributes.perception={value:0}}async createEmbeddedEntity(embeddedName,data,options){return"familiar"!==this.data.type||["condition","effect"].includes(data.type)?"vehicle"!==this.data.type||["weapon","armor","equipment","consumable","treasure","backpack","kit","action"].includes(data.type)?super.createEmbeddedEntity(embeddedName,data,options):(ui.notifications.error(game.i18n.localize("PF2E.vehicle.ItemTypeError")),null):(ui.notifications.error(game.i18n.localize("PF2E.FamiliarItemTypeError")),null)}_prepareCustomModifiers(actorData,rules){var _a,_b;const statisticsModifiers={},damageDice={};rules.forEach(rule=>{try{rule.onBeforePrepareData(actorData,statisticsModifiers,damageDice)}catch(error){console.error(`PF2e | Failed to execute onBeforePrepareData on rule element ${rule}.`,error)}});const conditions=actorData.items.filter(i=>{var _a;return(null===(_a=i.flags.pf2e)||void 0===_a?void 0:_a.condition)&&"condition"===i.type&&i.data.active});for(const[key,value]of conditions_1.PF2eConditionManager.getModifiersFromConditions(conditions.values()))statisticsModifiers[key]=(statisticsModifiers[key]||[]).concat(value);if(["character","familiar","npc"].includes(actorData.type)){const{data:data}=actorData;data.customModifiers=null!==(_a=data.customModifiers)&&void 0!==_a?_a:{};for(const[statistic,modifiers]of Object.entries(data.customModifiers))statisticsModifiers[statistic]=(statisticsModifiers[statistic]||[]).concat(modifiers);data.damageDice=null!==(_b=data.damageDice)&&void 0!==_b?_b:{};for(const[attack,dice]of Object.entries(data.damageDice))damageDice[attack]=(damageDice[attack]||[]).concat(dice)}return{statisticsModifiers:statisticsModifiers,damageDice:damageDice}}getStrikeDescription(item){var _a,_b,_c,_d,_e,_f,_g,_h,_j;const flavor={description:"PF2E.Strike.Default.Description",criticalSuccess:"PF2E.Strike.Default.CriticalSuccess",success:"PF2E.Strike.Default.Success"};return PF2EActor.traits(null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.traits)||void 0===_b?void 0:_b.value).includes("unarmed")?(flavor.description="PF2E.Strike.Unarmed.Description",flavor.success="PF2E.Strike.Unarmed.Success"):PF2EActor.traits(null===(_d=null===(_c=null==item?void 0:item.data)||void 0===_c?void 0:_c.traits)||void 0===_d?void 0:_d.value).find(trait=>trait.startsWith("thrown"))?(flavor.description="PF2E.Strike.Combined.Description",flavor.success="PF2E.Strike.Combined.Success"):"melee"===(null===(_f=null===(_e=null==item?void 0:item.data)||void 0===_e?void 0:_e.range)||void 0===_f?void 0:_f.value)?(flavor.description="PF2E.Strike.Melee.Description",flavor.success="PF2E.Strike.Melee.Success"):(null!==(_j=null===(_h=null===(_g=null==item?void 0:item.data)||void 0===_g?void 0:_g.range)||void 0===_h?void 0:_h.value)&&void 0!==_j?_j:0)>0&&(flavor.description="PF2E.Strike.Ranged.Description",flavor.success="PF2E.Strike.Ranged.Success"),flavor}rollSkill(event,skillName){const skl=this.data.data.skills[skillName],flavor=`${CONFIG.PF2E.proficiencyLevels[skl.rank]} ${CONFIG.PF2E.skills[skillName]} Skill Check`;dice_1.DicePF2e.d20Roll({event:event,parts:["@mod","@itemBonus"],data:{mod:skl.value-skl.item,itemBonus:skl.item},title:flavor,speaker:ChatMessage.getSpeaker({actor:this})})}rollRecovery(event){if("character"!==this.data.type)throw Error("Recovery rolls are only applicable to characters");const dying=this.data.data.attributes.dying.value,recoveryDc=10+(getProperty(this.data.data.attributes,"dying.recoveryMod")||0),flatCheck=new Roll("1d20").roll(),dc=recoveryDc+dying;let result="";result=20===flatCheck.total||flatCheck.total>=dc+10?`${game.i18n.localize("PF2E.CritSuccess")} ${game.i18n.localize("PF2E.Recovery.critSuccess")}`:1===flatCheck.total||flatCheck.total<=dc-10?`${game.i18n.localize("PF2E.CritFailure")} ${game.i18n.localize("PF2E.Recovery.critFailure")}`:flatCheck.result>=dc?`${game.i18n.localize("PF2E.Success")} ${game.i18n.localize("PF2E.Recovery.success")}`:`${game.i18n.localize("PF2E.Failure")} ${game.i18n.localize("PF2E.Recovery.failure")}`;const message=`\n      ${game.i18n.format("PF2E.Recovery.rollingDescription",{dc:dc,dying:dying})}.\n      <div class="dice-roll">\n        <div class="dice-formula" style="padding: 0 10px; word-break: normal;">\n          <span style="font-size: 12px; font-weight: 400;">\n            ${result}\n          </span>\n        </div>\n      </div>\n      `;flatCheck.toMessage({speaker:ChatMessage.getSpeaker({actor:this}),flavor:message},{rollMode:game.settings.get("core","rollMode")})}rollLoreSkill(event,item){var _a;const{data:data}=item;if("lore"!==data.type)throw Error("Can only roll lore skills using lore items");const flavor=item.name+" Skill Check";let rollMod=0,itemBonus=0;if(item.actor&&item.actor.data&&"character"===item.actor.data.type){const rank=(null===(_a=data.data.proficient)||void 0===_a?void 0:_a.value)||0,proficiency=modifiers_1.ProficiencyModifier.fromLevelAndRank(this.data.data.details.level.value,rank).modifier,modifier=this.data.data.abilities.int.mod;itemBonus=Number((data.data.item||{}).value||0),rollMod=modifier+proficiency}else item.actor&&item.actor.data&&"npc"===item.actor.data.type&&(rollMod=data.data.mod.value);dice_1.DicePF2e.d20Roll({event:event,parts:["@mod","@itemBonus"],data:{mod:rollMod,itemBonus:itemBonus},title:flavor,speaker:ChatMessage.getSpeaker({actor:this})})}rollSave(event,saveName){var _a,_b;const save=this.data.data.saves[saveName],flavor=CONFIG.PF2E.saves[saveName]+" Save Check";dice_1.DicePF2e.d20Roll({event:event,parts:["@mod","@itemBonus"],data:{mod:save.value-(null!==(_a=save.item)&&void 0!==_a?_a:0),itemBonus:null!==(_b=save.item)&&void 0!==_b?_b:0},title:flavor,speaker:ChatMessage.getSpeaker({actor:this})})}rollAbility(event,abilityName){const skl=this.data.data.abilities[abilityName],flavor=CONFIG.PF2E.abilities[abilityName]+" Check";dice_1.DicePF2e.d20Roll({event:event,parts:["@mod"],data:{mod:skl.mod},title:flavor,speaker:ChatMessage.getSpeaker({actor:this})})}rollAttribute(event,attributeName){var _a;const skl=this.data.data.attributes[attributeName],flavor=CONFIG.PF2E.attributes[attributeName]+" Check";dice_1.DicePF2e.d20Roll({event:event,parts:["@mod","@itemBonus"],data:{mod:skl.value-(null!==(_a=skl.item)&&void 0!==_a?_a:0),itemBonus:skl.item},title:flavor,speaker:ChatMessage.getSpeaker({actor:this})})}static async applyDamage(roll,multiplier,attribute="attributes.hp",modifier=0){if(!(canvas.tokens.controlled.length>0))return ui.notifications.error(game.i18n.localize("PF2E.UI.errorTargetToken")),!1;{const value=Math.floor(parseFloat(roll.find(".dice-total").text())*multiplier)+modifier,messageSender=roll.find(".message-sender").text(),flavorText=roll.find(".flavor-text").text(),shieldFlavor="attributes.shield"===attribute?game.i18n.localize("PF2E.UI.applyDamage.shieldActive"):game.i18n.localize("PF2E.UI.applyDamage.shieldInActive");for(const t of canvas.tokens.controlled){const appliedResult=value>0?game.i18n.localize("PF2E.UI.applyDamage.damaged")+value:game.i18n.localize("PF2E.UI.applyDamage.healed")+-1*value,modifiedByGM=0!==modifier?`Modified by GM: ${modifier<0?"-":"+"}${modifier}`:"",by=game.i18n.localize("PF2E.UI.applyDamage.by"),hitpoints=game.i18n.localize("PF2E.HitPointsHeader").toLowerCase(),message=`\n          <div class="dice-roll">\n          <div class="dice-result">\n            <div class="dice-tooltip dmg-tooltip" style="display: none;">\n              <div class="dice-formula" style="background: 0;">\n                <span>${flavorText}, ${by} ${messageSender}</span>\n                <span>${modifiedByGM}</span>\n              </div>\n            </div>\n            <div class="dice-total" style="padding: 0 10px; word-break: normal;">\n              <span style="font-size: 12px; font-style:oblique; font-weight: 400; line-height: 15px;">\n                ${t.name} ${shieldFlavor} ${appliedResult} ${hitpoints}.\n              </span>\n            </div>\n          </div>\n          </div>\n          `;t.actor.modifyTokenAttribute(attribute,-1*value,!0,!0).then(()=>{ChatMessage.create({user:game.user._id,speaker:{alias:t.name},content:message,type:CONST.CHAT_MESSAGE_TYPES.OTHER})})}}return!0}static async rollSave(ev,item){var _a,_b,_c,_d;if(!(canvas.tokens.controlled.length>0))return ui.notifications.error(game.i18n.localize("PF2E.UI.errorTargetToken")),!1;for(const t of canvas.tokens.controlled){const actor=t.actor,save=$(ev.currentTarget).attr("data-save"),itemTraits=null===(_c=null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.data)||void 0===_b?void 0:_b.traits)||void 0===_c?void 0:_c.value;if(null===(_d=actor.data.data.saves[save])||void 0===_d?void 0:_d.roll){let opts=actor.getRollOptions(["all","saving-throw",save]);itemTraits&&(opts=opts.concat(itemTraits)),actor.data.data.saves[save].roll(ev,opts)}else actor.rollSave(ev,save)}return!0}static async setCombatantInitiative(roll){const skillRolled=roll.find(".flavor-text").text(),valueRolled=parseFloat(roll.find(".dice-total").text()),promises=[];for(const t of canvas.tokens.controlled){if(!game.combat)return void ui.notifications.error("No active encounters in the Combat Tracker.");const combatant=game.combat.getCombatantByToken(t.id);if(void 0===combatant)return void ui.notifications.error("You haven't added this token to the Combat Tracker.");let value=valueRolled;combatant.actor.isPC||(value+=.5);const message=`\n      <div class="dice-roll">\n      <div class="dice-result">\n        <div class="dice-tooltip" style="display: none;">\n            <div class="dice-formula" style="background: 0;">\n              <span style="font-size: 10px;">${skillRolled} <span style="font-weight: bold;">${valueRolled}</span></span>\n            </div>\n        </div>\n        <div class="dice-total" style="padding: 0 10px; word-break: normal;">\n          <span style="font-size: 12px; font-style:oblique; font-weight: 400;">${combatant.name}'s Initiative is now ${value}!</span>\n        </div>\n      </div>\n      </div>\n      `;ChatMessage.create({user:game.user._id,speaker:{alias:t.name},content:message,whisper:ChatMessage.getWhisperRecipients("GM"),type:CONST.CHAT_MESSAGE_TYPES.OTHER}),promises.push(game.combat.setInitiative(combatant._id,value))}await Promise.all(promises)}async importItemFromCollectionWithLocation(collection,entryId,location){if(null==location)return console.log(`PF2e System | importItemFromCollectionWithLocation | Location not defined for ${entryId} - using super imprt method instead`),void super.importItemFromCollection(collection,entryId);const pack=game.packs.find(p=>p.collection===collection);"Item"===pack.metadata.entity&&await pack.getEntity(entryId).then(async ent=>{var _a,_b,_c;return console.log(`PF2e System | importItemFromCollectionWithLocation | Importing using createOwnedItem for ${ent.name} from ${collection}`),"spell"===ent.type&&(this._setShowUnpreparedSpells(location,null===(_c=null===(_b=null===(_a=null==ent?void 0:ent.data)||void 0===_a?void 0:_a.data)||void 0===_b?void 0:_b.level)||void 0===_c?void 0:_c.value),ent.data.data.location={value:location}),delete ent.data._id,this.createOwnedItem(ent.data)})}async _setShowUnpreparedSpells(entryId,spellLevel){var _a,_b,_c,_d;if(!entryId||!spellLevel)return;const spellcastingEntry=this.getOwnedItem(entryId);if(null!==spellcastingEntry&&"spellcastingEntry"===spellcastingEntry.data.type&&"prepared"===(null===(_b=null===(_a=spellcastingEntry.data.data)||void 0===_a?void 0:_a.prepared)||void 0===_b?void 0:_b.value)&&!1===(null===(_d=null===(_c=spellcastingEntry.data.data)||void 0===_c?void 0:_c.showUnpreparedSpells)||void 0===_d?void 0:_d.value)){!0===CONFIG.debug.hooks&&console.log(`PF2e DEBUG | Updating spellcasting entry ${entryId} set showUnpreparedSpells to true.`);const currentLvlToDisplay={};currentLvlToDisplay[spellLevel]=!0,await this.updateEmbeddedEntity("OwnedItem",{_id:entryId,"data.showUnpreparedSpells.value":!0,"data.displayLevels":currentLvlToDisplay})}}async modifyTokenAttribute(attribute,value,isDelta=!1,isBar=!0){if(null==value||Number.isNaN(value))return Promise.reject();if(["attributes.shield","attributes.hp"].includes(attribute)){const updateActorData={};let updateShieldData;if("attributes.shield"===attribute){const shield=this.getFirstEquippedShield();if(shield){let shieldHitPoints=shield.data.hp.value;isDelta&&value<0?(value=Math.min(shield.data.hardness.value+value,0))<0&&(attribute="attributes.hp",shieldHitPoints=Math.clamped(shield.data.hp.value+value,0,shield.data.maxHp.value)):shieldHitPoints=Math.clamped(value,0,shield.data.maxHp.value),shield.data.hp.value=shieldHitPoints,updateActorData["data.attributes.shield.value"]=shieldHitPoints,updateShieldData={_id:shield._id,data:{hp:{value:shieldHitPoints}}}}else isDelta&&(attribute="attributes.hp")}if("attributes.hp"===attribute){const{hp:hp,sp:sp}=this.data.data.attributes;if(isDelta){if(value<0){const{update:update,delta:delta}=this._calculateHealthDelta({hp:hp,sp:sp,delta:value});value=delta;for(const[k,v]of Object.entries(update))updateActorData[k]=v}value=Math.clamped(Number(hp.value)+value,0,hp.max)}value=Math.clamped(value,0,hp.max),updateActorData["data.attributes.hp.value"]=value}return this.update(updateActorData).then(()=>(updateShieldData&&this.updateOwnedItem(updateShieldData,{diff:!1}),this))}return super.modifyTokenAttribute(attribute,value,isDelta,isBar)}static async transferItemToActor(sourceActor,targetActor,item,quantity,containerId){if(!dataDefinitions_1.isPhysicalItem(item.data))throw Error("Only physical items (with quantities) can be transfered between actors");if(!sourceActor.can(game.user,"update"))return ui.notifications.error(game.i18n.localize("PF2E.ErrorMessage.CantMoveItemSource")),null;if(!targetActor.can(game.user,"update"))return ui.notifications.error(game.i18n.localize("PF2E.ErrorMessage.CantMoveItemDestination")),null;const sourceItemQuantity=Number(item.data.data.quantity.value),newItemQuantity=sourceItemQuantity-(quantity=Math.min(quantity,sourceItemQuantity));if(newItemQuantity<1)await sourceActor.deleteEmbeddedEntity("OwnedItem",item._id);else{const update={_id:item._id,"data.quantity.value":newItemQuantity};await sourceActor.updateEmbeddedEntity("OwnedItem",update)}let itemInTargetActor=targetActor.items.find(i=>i.name===item.name);if(null!==itemInTargetActor){if(!dataDefinitions_1.isPhysicalItem(itemInTargetActor.data))throw Error("Only physical items (with quantities) can be transfered between actors - the target item is not physical");const targetItemNewQuantity=Number(itemInTargetActor.data.data.quantity.value)+quantity,update={_id:itemInTargetActor._id,"data.quantity.value":targetItemNewQuantity};await targetActor.updateEmbeddedEntity("OwnedItem",update)}else{const newItemData=duplicate(item);if(!dataDefinitions_1.isPhysicalItem(newItemData))throw console.error(newItemData),Error("this should never happen - item should be physical, but is not");newItemData.data.quantity.value=quantity;const result=await targetActor.createOwnedItem(newItemData);itemInTargetActor=targetActor.items.get(result._id)}return PF2EActor.stashOrUnstash(targetActor,async()=>itemInTargetActor,containerId)}static async stashOrUnstash(actor,getItem,containerId){const item=await getItem();return item?containerId?"spell"===item.type||container_1.isCycle(item._id,containerId,actor.data.items.filter(dataDefinitions_1.isPhysicalItem))?item:item.update({"data.containerId.value":containerId,"data.equipped.value":!1}):item.update({"data.containerId.value":""}):null}_calculateHealthDelta(args){const update={},{hp:hp,sp:sp}=args;let{delta:delta}=args;return hp.temp+delta>=0?(update["data.attributes.hp.temp"]=hp.temp+delta,delta=0):(update["data.attributes.hp.temp"]=0,delta=hp.temp+delta),game.settings.get("pf2e","staminaVariant")>0&&delta<0&&(sp.value+delta>=0?(update["data.attributes.sp.value"]=sp.value+delta,delta=0):(update["data.attributes.sp.value"]=0,delta=sp.value+delta)),{update:update,delta:delta}}async addCustomModifier(stat,name,value,type,predicate,damageType){var _a,_b,_c;if(!["character","npc","familiar"].includes(this.data.type))throw Error("Custom modifiers only work for characters, NPCs, and familiars");const customModifiers=duplicate(null!==(_a=this.data.data.customModifiers)&&void 0!==_a?_a:{});if(!(null!==(_b=customModifiers[stat])&&void 0!==_b?_b:[]).find(m=>m.name===name)){const modifier=new modifiers_1.PF2Modifier(name,value,type);damageType&&(modifier.damageType=damageType),modifier.custom=!0,modifier.predicate=null!=predicate?predicate:{},modifier.predicate instanceof modifiers_1.PF2ModifierPredicate||(modifier.predicate=new modifiers_1.PF2ModifierPredicate(modifier.predicate)),modifier.ignored=!modifier.predicate.test([]),customModifiers[stat]=(null!==(_c=customModifiers[stat])&&void 0!==_c?_c:[]).concat([modifier]),await this.update({"data.customModifiers":customModifiers})}}async removeCustomModifier(stat,modifier){var _a;if(!["character","npc","familiar"].includes(this.data.type))throw Error("Custom modifiers only work for characters, NPCs, and familiars");const customModifiers=duplicate(null!==(_a=this.data.data.customModifiers)&&void 0!==_a?_a:{});if("number"==typeof modifier&&customModifiers[stat]&&customModifiers[stat].length>modifier)customModifiers[stat].splice(modifier,1),await this.update({"data.customModifiers":customModifiers});else{if("string"!=typeof modifier||!customModifiers[stat])throw Error("Custom modifiers can only be removed by name (string) or index (number)");customModifiers[stat]=customModifiers[stat].filter(m=>m.name!==modifier),await this.update({"data.customModifiers":customModifiers})}}async addDexterityModifierCap(dexCap){var _a;if(!["character","npc","familiar"].includes(this.data.type))throw Error("Custom dexterity caps only work for characters, NPCs, and familiars");if(void 0===dexCap.value||"number"!=typeof dexCap.value)throw new Error("numeric value is mandatory");if(void 0===dexCap.source||"string"!=typeof dexCap.source)throw new Error("source of cap is mandatory");await this.update({"data.attributes.dexCap":(null!==(_a=this.data.data.attributes.dexCap)&&void 0!==_a?_a:[]).concat(dexCap)})}async removeDexterityModifierCap(source){if(!["character","npc","familiar"].includes(this.data.type))throw Error("Custom dexterity caps only work for characters, NPCs, and familiars");if(!source)throw new Error("source of cap is mandatory");if(this.data.data.attributes.dexCap){const updated=this.data.data.attributes.dexCap.filter(cap=>cap.source!==source);await this.update({"data.attributes.dexCap":updated})}}async addDamageDice(param){var _a,_b,_c,_d;if(!["character","npc","familiar"].includes(this.data.type))throw Error("Custom damage dice only work for characters, NPCs, and familiars");const damageDice=duplicate(null!==(_a=this.data.data.damageDice)&&void 0!==_a?_a:{});if(!(null!==(_b=damageDice[param.selector])&&void 0!==_b?_b:[]).find(d=>d.name===param.name)){param.selector=null!==(_c=null==param?void 0:param.selector)&&void 0!==_c?_c:"damage",param.custom=!0;const dice=new modifiers_1.PF2DamageDice(param);damageDice[param.selector]=(null!==(_d=damageDice[param.selector])&&void 0!==_d?_d:[]).concat([dice]),await this.update({"data.damageDice":damageDice})}}async removeDamageDice(selector,dice){var _a;if(!["character","npc","familiar"].includes(this.data.type))throw Error("Custom damage dice only work for characters, NPCs, and familiars");const damageDice=duplicate(null!==(_a=this.data.data.damageDice)&&void 0!==_a?_a:{});if("number"==typeof dice&&damageDice[selector]&&damageDice[selector].length>dice)damageDice[selector].splice(dice,1),await this.update({"data.damageDice":damageDice});else{if("string"!=typeof dice||!damageDice[selector])throw Error("Dice can only be removed by name (string) or index (number)");damageDice[selector]=damageDice[selector].filter(d=>d.name!==dice),await this.update({"data.damageDice":damageDice})}}async toggleRollOption(rollName,optionName){if(!SUPPORTED_ROLL_OPTIONS.includes(rollName)&&!this.data.data.skills[rollName])throw new Error(rollName+" is not a supported roll");const flag=`rollOptions.${rollName}.${optionName}`;return this.setFlag(game.system.id,flag,!this.getFlag(game.system.id,flag))}async setRollOption(rollName,optionName,enabled){if(!SUPPORTED_ROLL_OPTIONS.includes(rollName)&&!this.data.data.skills[rollName])throw new Error(rollName+" is not a supported roll");const flag=`rollOptions.${rollName}.${optionName}`;return this.setFlag(game.system.id,flag,!!enabled)}async unsetRollOption(rollName,optionName){const flag=`rollOptions.${rollName}.${optionName}`;return this.unsetFlag(game.system.id,flag)}async enableRollOption(rollName,optionName){return this.setRollOption(rollName,optionName,!0)}async disableRollOption(rollName,optionName){return this.setRollOption(rollName,optionName,!1)}getRollOptions(rollNames){return PF2EActor.getRollOptions(this.data.flags,rollNames)}static getRollOptions(flags,rollNames){var _a,_b;const flag=null!==(_b=null===(_a=flags[game.system.id])||void 0===_a?void 0:_a.rollOptions)&&void 0!==_b?_b:{};return rollNames.flatMap(rollName=>{var _a;return Object.entries(null!==(_a=flag[rollName])&&void 0!==_a?_a:{}).reduce((opts,[key,value])=>opts.concat(value?key:[]),[])}).reduce((unique,option)=>unique.includes(option)?unique:unique.concat(option),[])}}exports.default=PF2EActor},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.groupBy=function(array,criterion){const result=new Map;for(const elem of array){const key=criterion(elem);void 0===result.get(key)?result.set(key,[elem]):result.get(key).push(elem)}return result},exports.combineObjects=function(first,second,mergeFunction){const combinedKeys=new Set([...Object.keys(first),...Object.keys(second)]),combinedObject={};for(const name of combinedKeys)name in first&&name in second?combinedObject[name]=mergeFunction(first[name],second[name]):name in first?combinedObject[name]=first[name]:name in second&&(combinedObject[name]=second[name]);return combinedObject},exports.isBlank=function(string){return null==string||""===string.trim()},exports.toNumber=function(value){if(null==value||"number"==typeof value)return value;const result=parseInt(value,10);return Number.isNaN(result)?void 0:result},exports.add=function(x,y){return x+y},exports.addSign=function(number){return number<0?""+number:number>0?"+"+number:"0"}},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const actor_1=__importDefault(__webpack_require__(2));class FormulaPreservingRoll extends Roll{toJSON(){const jsonData=super.toJSON();return this._replaceData&&(jsonData.formula=Roll.cleanFormula(this._replaceData(this._formula))),jsonData.class="Roll",jsonData}}exports.FormulaPreservingRoll=FormulaPreservingRoll;exports.DicePF2e=class{static async d20Roll({event:event,parts:parts,data:data,template:template,title:title,speaker:speaker,flavor:flavor,advantage:advantage=!0,situational:situational=!0,fastForward:fastForward=!0,onClose:onClose,dialogOptions:dialogOptions,rollMode:rollMode,rollType:rollType=""}){rollMode=rollMode||game.settings.get("core","rollMode");const userSettingQuickD20Roll=((game.user.data.flags.PF2e||{}).settings||{}).quickD20roll,_roll=(rollParts,adv,form)=>{let flav=flavor instanceof Function?flavor(rollParts,data):title;1===adv?(rollParts[0]=["2d20kh"],flav=title+" (Fortune)"):-1===adv&&(rollParts[0]=["2d20kl"],flav=title+" (Misfortune)"),form&&(data.itemBonus=form.find('[name="itemBonus"]').val()),data.itemBonus&&0!==data.itemBonus||-1===rollParts.indexOf("@itemBonus")||rollParts.splice(rollParts.indexOf("@itemBonus"),1),form&&(data.statusBonus=form.find('[name="statusBonus"]').val()),data.statusBonus&&0!==data.statusBonus||-1===rollParts.indexOf("@statusBonus")||rollParts.splice(rollParts.indexOf("@statusBonus"),1),form&&(data.circumstanceBonus=form.find('[name="circumstanceBonus"]').val()),data.circumstanceBonus&&0!==data.circumstanceBonus||-1===rollParts.indexOf("@circumstanceBonus")||rollParts.splice(rollParts.indexOf("@circumstanceBonus"),1);const roll=new Roll(rollParts.join("+"),data).roll();return roll.toMessage({speaker:speaker,flavor:flav,flags:{pf2e:{context:{type:rollType}}}},{rollMode:form?form.find('[name="rollMode"]').val():rollMode}),roll};if(parts=["1d20"].concat(parts),userSettingQuickD20Roll&&!event.altKey&&!event.ctrlKey&&!event.metaKey&&!event.shiftKey||!userSettingQuickD20Roll&&event.shiftKey)return _roll(parts,0);if(event.altKey)return _roll(parts,1);if(event.ctrlKey||event.metaKey)return _roll(parts,-1);if(event.shiftKey||!userSettingQuickD20Roll){-1===parts.indexOf("@circumstanceBonus")&&(parts=parts.concat(["@circumstanceBonus"])),-1===parts.indexOf("@itemBonus")&&(parts=parts.concat(["@itemBonus"])),-1===parts.indexOf("@statusBonus")&&(parts=parts.concat(["@statusBonus"])),template=template||"systems/pf2e/templates/chat/roll-dialog.html";const dialogData={data:data,rollMode:rollMode,formula:parts.join(" + "),rollModes:CONFIG.Dice.rollModes},content=await renderTemplate(template,dialogData);let roll;return new Promise(resolve=>{new Dialog({title:title,content:content,buttons:{advantage:{label:"Fortune",callback:html=>{roll=_roll(parts,1,html)}},normal:{label:"Normal",callback:html=>{roll=_roll(parts,0,html)}},disadvantage:{label:"Misfortune",callback:html=>{roll=_roll(parts,-1,html)}}},default:"normal",close:html=>{onClose&&onClose(html,parts,data),resolve(roll)}},dialogOptions).render(!0)})}return _roll(parts,0)}static damageRoll({event:event,partsCritOnly:partsCritOnly=[],parts:parts,actor:actor,data:data,template:template,title:title,speaker:speaker,flavor:flavor,critical:critical=!1,onClose:onClose,dialogOptions:dialogOptions}){const rollMode=game.settings.get("core","rollMode"),userSettingQuickD20Roll=((game.user.data.flags.PF2e||{}).settings||{}).quickD20roll;let rolled=!1;const _roll=(rollParts,crit,form)=>{form&&(data.itemBonus=form.find('[name="itemBonus"]').val(),data.statusBonus=form.find('[name="statusBonus"]').val(),data.circumstanceBonus=form.find('[name="circumstanceBonus"]').val());for(const key of["itemBonus","statusBonus","circumstanceBonus"])if(!data[key]||0===data[key]){let index;const part="@"+key;index=rollParts.indexOf(part),-1!==index&&rollParts.splice(index,1),index=partsCritOnly.indexOf(part),-1!==index&&partsCritOnly.splice(index,1)}const rule=game.settings.get("pf2e","critRule");if(crit){if("doubledamage"===rule)rollParts=[`(${rollParts.join("+")}) * 2`];else{const critRoll=new Roll(rollParts.join("+"),data).alter(0,2);rollParts=[critRoll.formula.replace(/\b\d+\b/g,match=>""+2*parseInt(match,10))]}rollParts=rollParts.concat(partsCritOnly)}const roll=new FormulaPreservingRoll(rollParts.join("+"),data),flav=flavor instanceof Function?flavor(rollParts,data):title;return roll.toMessage({speaker:speaker,flavor:flav},{rollMode:form?form.find('[name="rollMode"]').val():rollMode}),rolled=!0,roll};if(userSettingQuickD20Roll&&!event.shiftKey&&!event.ctrlKey&&!event.metaKey)return _roll(parts,event.altKey||critical);if(!userSettingQuickD20Roll&&(event.shiftKey||event.ctrlKey||event.metaKey))return _roll(parts,event.altKey||critical);parts.includes("@circumstanceBonus")||parts.push("@circumstanceBonus"),parts.includes("@itemBonus")||parts.push("@itemBonus"),parts.includes("@statusBonus")||parts.push("@statusBonus"),template=template||"systems/pf2e/templates/chat/roll-dialog.html";const dialogData={data:data,rollMode:rollMode,formula:parts.join(" + "),rollModes:CONFIG.Dice.rollModes};let roll;return new Promise(resolve=>{renderTemplate(template,dialogData).then(content=>{new Dialog({title:title,content:content,buttons:{critical:{condition:critical,label:"Critical Hit",callback:html=>{roll=_roll(parts,!0,html)}},normal:{label:critical?"Normal":"Roll",callback:html=>{roll=_roll(parts,!1,html)}}},default:"normal",close:html=>{onClose&&onClose(html,parts,data),resolve(!!rolled&&roll)}},dialogOptions).render(!0)})})}alter(add,multiply){const rgx=new RegExp(Roll.rgx.dice,"g");if(this._rolled)throw new Error("You may not alter a Roll which has already been rolled");return this.terms=this.terms.map(t=>t.replace(rgx,(match,nd,d,mods)=>`${nd=nd*(multiply||1)+(add||0)}d${d}${mods=mods||""}`)),this._formula=this.terms.join(" "),this}},Hooks.on("renderChatMessage",(message,html)=>{var _a;if(!message.isRoll)return;const dice=null!==(_a=message.roll.dice[0])&&void 0!==_a?_a:{};if(20===dice.faces&&message.roll.dice.length&&message.isContentVisible){20===dice.total?html.find(".dice-total").addClass("success"):1===dice.total&&html.find(".dice-total").addClass("failure");const context=message.getFlag("pf2e","context");if((message.isAuthor||game.user.isGM)&&("skill-check"===(null==context?void 0:context.type)||"perception-check"===(null==context?void 0:context.type))){const btnStyling="width: 22px; height:22px; font-size:10px;line-height:1px",initiativeButtonTitle=game.i18n.localize("PF2E.ClickToSetInitiative"),setInitiativeButton=$(`<button class="dice-total-setInitiative-btn" style="${btnStyling}"><i class="fas fa-fist-raised" title="${initiativeButtonTitle}"></i></button>`),btnContainer=$('<span class="dmgBtn-container" style="position:absolute; right:0; bottom:1px;"></span>');btnContainer.append(setInitiativeButton),html.find(".dice-total").append(btnContainer),setInitiativeButton.click(ev=>{ev.stopPropagation(),actor_1.default.setCombatantInitiative(html)})}}})},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const modifiers_1=__webpack_require__(0),item_1=__importDefault(__webpack_require__(13)),statusEffects_1=__webpack_require__(14);class PF2eConditionManager{static get conditions(){return PF2eConditionManager.__conditionsCache||(PF2eConditionManager.__conditionsCache=new Map,PF2eConditionManager._compediumConditions.forEach((condition,name)=>PF2eConditionManager.__conditionsCache.set(name,duplicate(condition))),PF2eConditionManager._customConditions.forEach((condition,name)=>PF2eConditionManager.__conditionsCache.set(name,duplicate(condition))),Object.freeze(PF2eConditionManager.__conditionsCache)),PF2eConditionManager.__conditionsCache}static get conditionsNames(){return Array.from(PF2eConditionManager._compediumConditions.keys()).concat(Array.from(PF2eConditionManager._customConditions.keys())).values()}static get statusNames(){return Array.from(PF2eConditionManager._compendiumConditionStatusNames.keys()).concat(Array.from(PF2eConditionManager._customStatusNames.keys())).values()}static async init(){const content=await game.packs.get("pf2e.conditionitems").getContent();for(const condition of content)PF2eConditionManager._compediumConditions.set(condition.name.toLowerCase(),condition),PF2eConditionManager._compendiumConditionStatusNames.set(condition.data.data.hud.statusName,condition);Object.freeze(PF2eConditionManager._compediumConditions),Object.freeze(PF2eConditionManager._compendiumConditionStatusNames)}static getCondition(condition){return condition=condition.toLocaleLowerCase(),PF2eConditionManager._customConditions.has(condition)?duplicate(PF2eConditionManager._customConditions.get(condition)):duplicate(PF2eConditionManager._compediumConditions.get(condition))}static getConditionByStatusName(statusName){return PF2eConditionManager._customStatusNames.has(statusName)?duplicate(PF2eConditionManager._customStatusNames.get(statusName)):duplicate(PF2eConditionManager._compendiumConditionStatusNames.get(statusName))}static createCustomCondition(name,data){return name=name.toLocaleLowerCase(),!PF2eConditionManager._customConditions.has(name)&&(data.flags.pf2e||(data.flags.pf2e={}),data.flags.pef2e.condition=!0,PF2eConditionManager._customConditions.set(name,data),PF2eConditionManager._customStatusNames.set(data.data.hud.statusName,data),!0)}static deleteCustomCondition(name){return name=name.toLocaleLowerCase(),!!PF2eConditionManager._customConditions.has(name)&&(PF2eConditionManager._customConditions.delete(name),!0)}static __processValuedCondition(conditions,updates){let appliedCondition;return conditions.forEach(condition=>{if(void 0===appliedCondition||condition.data.value.value>appliedCondition.data.value.value){if(!condition.data.active){const update=updates.has(condition._id)?updates.get(condition._id):duplicate(condition);update.data.active=!0,updates.set(update._id,update)}if(appliedCondition)if(appliedCondition.data.active){const update=updates.has(appliedCondition._id)?updates.get(appliedCondition._id):duplicate(appliedCondition);update.data.active=!1,updates.set(update._id,update)}else updates.delete(appliedCondition._id);appliedCondition=condition}else if(condition.data.active){const update=updates.has(condition._id)?updates.get(condition._id):duplicate(condition);update.data.active=!1,updates.set(update._id,update)}PF2eConditionManager.__clearOverrides(condition,updates)}),appliedCondition}static __processToggleCondition(conditions,updates){let appliedCondition;return conditions.forEach(condition=>{if(void 0===appliedCondition&&(appliedCondition=condition),condition._id!==appliedCondition._id||condition.data.active){if(condition._id!==appliedCondition._id&&condition.data.active){const update=updates.has(condition._id)?updates.get(condition._id):duplicate(condition);update.data.active=!1,updates.set(update._id,update)}}else{const update=updates.has(condition._id)?updates.get(condition._id):duplicate(condition);update.data.active=!0,updates.set(update._id,update)}PF2eConditionManager.__clearOverrides(condition,updates)}),appliedCondition}static __clearOverrides(condition,updates){if(condition.data.references.overrides.length){const update=updates.has(condition._id)?updates.get(condition._id):duplicate(condition);update.data.references.overrides.splice(0,update.data.references.overriddenBy.length),updates.set(update._id,update)}if(condition.data.references.overriddenBy.length){const update=updates.has(condition._id)?updates.get(condition._id):duplicate(condition);update.data.references.overriddenBy.splice(0,update.data.references.overriddenBy.length),updates.set(update._id,update)}}static __processOverride(overridden,overrider,updates){if(overridden.data.active){const update=updates.has(overridden._id)?updates.get(overridden._id):duplicate(overridden);update.data.active=!1,updates.set(update._id,update)}if(!overridden.data.references.overriddenBy.some(i=>i.id===overrider._id)){const update=updates.has(overridden._id)?updates.get(overridden._id):duplicate(overridden);update.data.references.overriddenBy.push({id:overrider._id,type:"condition"}),updates.set(update._id,update)}if(!overrider.data.references.overrides.some(i=>i.id===overridden._id)){const update=updates.has(overrider._id)?updates.get(overrider._id):duplicate(overrider);update.data.references.overrides.push({id:overridden._id,type:"condition"}),updates.set(update._id,update)}}static async __processTokenEffects(token,appliedConditions){const effectUpdates=duplicate(token.data);effectUpdates.effects=[];const statuses=token.data.effects.filter(item=>Array.from(PF2eConditionManager.statusNames).map(status=>`${CONFIG.PF2eStatusEffects.effectsIconFolder+status}.${CONFIG.PF2eStatusEffects.effectsIconFileType}`).indexOf(item)<0);for(const condition of appliedConditions.values()){const url=condition.data.hud.img.useStatusName?`${CONFIG.PF2eStatusEffects.effectsIconFolder}${condition.data.hud.statusName}.${CONFIG.PF2eStatusEffects.effectsIconFileType}`:condition.data.hud.img.value;effectUpdates.effects.push(url)}const newSet=[...new Set(effectUpdates.effects)].concat(statuses),added=newSet.filter(item=>token.data.effects.indexOf(item)<0),removed=token.data.effects.filter(item=>newSet.indexOf(item)<0);(added.length>0||removed.length>0)&&(effectUpdates.effects=newSet,await token.update(effectUpdates)),token.hasActiveHUD&&statusEffects_1.PF2eStatusEffects._updateHUD(canvas.tokens.hud.element,token)}static async processConditions(token){const conditions=token.actor.data.items.filter(c=>{var _a;return(null===(_a=c.flags.pf2e)||void 0===_a?void 0:_a.condition)&&"condition"===c.type}),updates=new Map,appliedConditions=new Map,baseList=new Set,overriding=[];conditions.forEach(condition=>{if(!baseList.has(condition.data.base)){const base=condition.data.base;baseList.add(base);const list=conditions.filter(c=>c.data.base===base);let appliedCondition;appliedCondition=PF2eConditionManager.getCondition(base).data.value.isValued?PF2eConditionManager.__processValuedCondition(list,updates):PF2eConditionManager.__processToggleCondition(list,updates),appliedConditions.set(base,appliedCondition),appliedCondition.data.overrides.length&&overriding.push(base)}}),overriding.forEach(base=>{const overrider=updates.has(appliedConditions.get(base)._id)?updates.get(appliedConditions.get(base)._id):appliedConditions.get(base);overrider.data.overrides.forEach(overriddenBase=>{appliedConditions.has(overriddenBase)&&(appliedConditions.delete(overriddenBase),conditions.filter(c=>c.data.base===overriddenBase).forEach(c=>{const overridden=updates.has(c._id)?updates.get(c._id):c;PF2eConditionManager.__processOverride(overridden,overrider,updates)}))})}),updates.size&&await token.actor.updateEmbeddedEntity("OwnedItem",Array.from(updates.values())),await PF2eConditionManager.__processTokenEffects(token,appliedConditions)}static getModifiersFromConditions(conditions){const conditionModifiers=new Map;for(const condition of conditions)for(const modifier of condition.data.modifiers)conditionModifiers.has(modifier.group)||conditionModifiers.set(modifier.group,[]),condition.data.value.isValued?conditionModifiers.get(modifier.group).push(new modifiers_1.PF2Modifier(condition.name,-condition.data.value.value,modifier.type)):conditionModifiers.get(modifier.group).push(new modifiers_1.PF2Modifier(condition.name,modifier.value,modifier.type));return conditionModifiers}static async addConditionToToken(name,token){const condition=name instanceof String?PF2eConditionManager.getCondition(name):name,returnValue=await PF2eConditionManager._addConditionEntity(condition,token);return PF2eConditionManager.processConditions(token),returnValue}static async _addConditionEntity(condition,token){let item=await token.actor.createEmbeddedEntity("OwnedItem",new item_1.default(condition));if(!token.data.actorLink)for(let i=token.actor.data.items.length-1;i>=0;i--)if(token.actor.data.items[i].name===condition.name){item=token.actor.data.items[i];break}item=item;let needsItemUpdate=!1;const itemUpdate=duplicate(item);for(const linkedConditionName of condition.data.alsoApplies.linked){const c=PF2eConditionManager.getCondition(linkedConditionName.condition);linkedConditionName.value&&(c.data.value.value=linkedConditionName.value),c.data.references.parent={id:item._id,type:"condition"},c.data.sources.hud=condition.data.sources.hud;const linkedItem=await PF2eConditionManager._addConditionEntity(c,token);itemUpdate.data.references.children.push({id:linkedItem._id,type:"condition"}),needsItemUpdate=!0}for(const unlinkedConditionName of condition.data.alsoApplies.unlinked){const c=PF2eConditionManager.getCondition(unlinkedConditionName.condition);unlinkedConditionName.value&&(c.name=`${c.name} ${c.data.value.value}`,c.data.value.value=unlinkedConditionName.value),c.data.sources.hud=condition.data.sources.hud,await PF2eConditionManager._addConditionEntity(c,token)}return needsItemUpdate&&await token.actor.updateEmbeddedEntity("OwnedItem",itemUpdate),item}static async removeConditionFromToken(id,token){id=id instanceof Array?id:[id],await PF2eConditionManager._deleteConditionEntity(id,token),PF2eConditionManager.processConditions(token)}static async _deleteConditionEntity(ids,token){const list=[],stack=new Array(...ids);for(;stack.length;){const id=stack.pop(),condition=token.actor.data.items.find(i=>i._id===id);condition&&(list.push(id),condition.data.references.children.forEach(child=>stack.push(child.id)))}await token.actor.deleteEmbeddedEntity("OwnedItem",list)}static async updateConditionValue(id,token,value){const condition=token.actor.data.items.find(i=>i._id===id);if(condition)if(0===value)await PF2eConditionManager._deleteConditionEntity([id],token);else{const update=duplicate(condition);update.data.value.value=value,await token.actor.updateEmbeddedEntity("OwnedItem",update),console.log(`PF2e System | Setting condition '${condition.name}' to ${value}.`)}PF2eConditionManager.processConditions(token)}static async renderEffects(token){const conditions=token.actor.data.items.filter(appliedCondtion=>{var _a;return(null===(_a=appliedCondtion.flags.pf2e)||void 0===_a?void 0:_a.condition)&&"condition"===appliedCondtion.type}),updates=duplicate(token.data);let updated=!1;for(const condition of conditions){const url=condition.data.hud.img.useStatusName?`${CONFIG.PF2eStatusEffects.effectsIconFolder}${condition.data.hud.statusName}.${CONFIG.PF2eStatusEffects.effectsIconFileType}`:condition.data.hud.img.value;token.data.effects.includes(url)||(updates.effects.push(url),updated=!0)}updated&&await token.update(updates)}static getFlattenedConditions(items){const conditions=new Map;return items.sort((a,b)=>PF2eConditionManager.__sortCondition(a,b)).forEach(c=>{let condition,name=""+c.data.base;if(c.data.value.isValued&&(name=`${name} ${c.data.value.value}`),conditions.has(name)?condition=conditions.get(name):(condition={id:c._id,active:c.data.active,name:name,value:c.data.value.isValued?c.data.value.value:void 0,description:c.data.description.value,img:c.img,references:!1,parents:[],children:[],overrides:[],overriddenBy:[],immunityFrom:[]},conditions.set(name,condition)),c.data.references.parent){const refCondition=items.find(i=>i._id===c.data.references.parent.id);if(refCondition){const ref={id:c.data.references.parent,name:refCondition.name,base:refCondition.data.base,text:""};refCondition.data.value.isValued&&(ref.name=`${ref.name} ${refCondition.data.value.value}`),ref.text=`@Compendium[pf2e.conditionitems.${refCondition.data.base}]{${ref.name}}`,condition.references=!0,condition.parents.push(ref)}}c.data.references.children.forEach(item=>{const refCondition=items.find(i=>i._id===item.id);if(refCondition){const ref={id:c.data.references.parent,name:refCondition.name,base:refCondition.data.base,text:""};refCondition.data.value.isValued&&(ref.name=`${ref.name} ${refCondition.data.value.value}`),ref.text=`@Compendium[pf2e.conditionitems.${refCondition.data.base}]{${ref.name}}`,condition.references=!0,condition.children.push(ref)}}),c.data.references.overrides.forEach(item=>{const refCondition=items.find(i=>i._id===item.id);if(refCondition){const ref={id:c.data.references.parent,name:refCondition.name,base:refCondition.data.base,text:""};refCondition.data.value.isValued&&(ref.name=`${ref.name} ${refCondition.data.value.value}`),ref.text=`@Compendium[pf2e.conditionitems.${refCondition.data.base}]{${ref.name}}`,condition.references=!0,condition.overrides.push(ref)}}),c.data.references.overriddenBy.forEach(item=>{const refCondition=items.find(i=>i._id===item.id);if(refCondition){const ref={id:c.data.references.parent,name:refCondition.name,base:refCondition.data.base,text:""};refCondition.data.value.isValued&&(ref.name=`${ref.name} ${refCondition.data.value.value}`),ref.text=`@Compendium[pf2e.conditionitems.${refCondition.data.base}]{${ref.name}}`,condition.references=!0,condition.overriddenBy.push(ref)}}),c.data.references.immunityFrom.forEach(item=>{const refCondition=items.find(i=>i._id===item.id);if(refCondition){const ref={id:c.data.references.parent,name:refCondition.name,base:refCondition.data.base,text:""};refCondition.data.value.isValued&&(ref.name=`${ref.name} ${refCondition.data.value.value}`),ref.text=`@Compendium[pf2e.conditionitems.${refCondition.data.base}]{${ref.name}}`,condition.references=!0,condition.immunityFrom.push(ref)}})}),Array.from(conditions.values())}static __sortCondition(a,b){return a.data.active===b.data.active?a.data.base===b.data.base?a.data.value.isValued?b.data.value.value-a.data.value.value:0:a.data.base.localeCompare(b.data.base):a.data.active&&!b.data.active?-1:!a.data.active&&b.data.active?1:0}}exports.PF2eConditionManager=PF2eConditionManager,PF2eConditionManager._compediumConditions=new Map,PF2eConditionManager._customConditions=new Map,PF2eConditionManager._compendiumConditionStatusNames=new Map,PF2eConditionManager._customStatusNames=new Map,PF2eConditionManager.__conditionsCache=void 0,PF2eConditionManager.__statusNameCache=void 0},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const utils_1=__webpack_require__(3),dataDefinitions_1=__webpack_require__(17);exports.stacks={bolts:{size:10,lightBulk:1},arrows:{size:10,lightBulk:1},slingBullets:{size:10,lightBulk:1},blowgunDarts:{size:10,lightBulk:1},rations:{size:7,lightBulk:1},coins:{size:1e3,lightBulk:10},gems:{size:2e3,lightBulk:10}};class Bulk{constructor({normal:normal=0,light:light=0}={}){this.normal=normal+Math.floor(light/10),this.light=light%10}get isNegligible(){return 0===this.normal&&0===this.light}get isLight(){return this.toLightBulk()<10&&!this.isNegligible}toLightBulk(){return 10*this.normal+this.light}plus(bulk){return new Bulk({normal:this.normal+bulk.normal,light:this.light+bulk.light})}minus(bulk){const[thisBulk,otherBulk]=this._toSingleNumber(bulk),result=thisBulk-otherBulk;return result<0?new Bulk:new Bulk({normal:Math.floor(result/10),light:result%10})}_toSingleNumber(bulk){return[10*this.normal+this.light,10*bulk.normal+bulk.light]}times(factor){return new Bulk({normal:this.normal*factor,light:this.light*factor})}isSmallerThan(bulk){const[thisBulk,otherBulk]=this._toSingleNumber(bulk);return thisBulk<otherBulk}isBiggerThan(bulk){const[thisBulk,otherBulk]=this._toSingleNumber(bulk);return thisBulk>otherBulk}isEqualTo(bulk){return this.normal===bulk.normal&&this.light===bulk.light}isPositive(){return this.normal>0||this.light>0}toString(){return`normal: ${this.normal}; light: ${this.light}`}}function bulkDowngradeApplies(normalItemBulk,treatsAsDowngrade){return"-"===treatsAsDowngrade&&normalItemBulk.isNegligible||"L"===treatsAsDowngrade&&normalItemBulk.isLight||null!==treatsAsDowngrade&&normalItemBulk.normal<=parseInt(treatsAsDowngrade,10)}exports.Bulk=Bulk,exports.bulkConversions={tiny:{bulkLimitFactor:.5,treatsAsLight:"-",treatsAsNegligible:null},sm:{bulkLimitFactor:1,treatsAsLight:"L",treatsAsNegligible:"-"},med:{bulkLimitFactor:1,treatsAsLight:"L",treatsAsNegligible:"-"},lg:{bulkLimitFactor:2,treatsAsLight:"1",treatsAsNegligible:"L"},huge:{bulkLimitFactor:4,treatsAsLight:"2",treatsAsNegligible:"1"},grg:{bulkLimitFactor:8,treatsAsLight:"4",treatsAsNegligible:"2"}},exports.convertBulkToSize=function(normalItemBulk,targetSize){const{treatsAsNegligible:treatsAsNegligible,treatsAsLight:treatsAsLight}=exports.bulkConversions[targetSize];return bulkDowngradeApplies(normalItemBulk,treatsAsNegligible)?new Bulk:bulkDowngradeApplies(normalItemBulk,treatsAsLight)?new Bulk({light:1}):normalItemBulk},exports.formatBulk=function(bulk){return 0===bulk.normal&&0===bulk.light?"-":bulk.normal>0&&0===bulk.light?""+bulk.normal:1===bulk.light&&0===bulk.normal?"L":bulk.light>0&&0===bulk.normal?bulk.light+"L":`${bulk.normal}; ${bulk.light}L`};class BulkItem{constructor({id:id="",bulk:bulk=new Bulk,quantity:quantity=1,stackGroup:stackGroup,isEquipped:isEquipped=!1,unequippedBulk:unequippedBulk,equippedBulk:equippedBulk,holdsItems:holdsItems=[],negateBulk:negateBulk=new Bulk,extraDimensionalContainer:extraDimensionalContainer=!1}={}){this.id=id,this.bulk=bulk,this.quantity=quantity,this.stackGroup=stackGroup,this.holdsItems=holdsItems,this.negateBulk=negateBulk,this.unequippedBulk=unequippedBulk,this.equippedBulk=equippedBulk,this.isEquipped=isEquipped,this.extraDimensionalContainer=extraDimensionalContainer}get reducesBulk(){return!this.negateBulk.isNegligible}}function calculateNonStackBulk(item){return void 0===item.unequippedBulk||null===item.unequippedBulk||item.isEquipped?void 0!==item.equippedBulk&&null!==item.equippedBulk&&item.isEquipped?item.equippedBulk:item.bulk:item.unequippedBulk}function combineBulkAndOverflow(first,second){const[firstBulk,firstOverflow]=first,[secondBulk,secondOverflow]=second;return[firstBulk.plus(secondBulk),utils_1.combineObjects(firstOverflow,secondOverflow,utils_1.add)]}function calculateStackBulk(itemStacks,stackDefinitions,bulkConfig=exports.defaultBulkConfig){return Object.entries(itemStacks).filter(([stackType])=>!(bulkConfig.ignoreCoinBulk&&"coins"===stackType)).map(([stackType,quantity])=>{if(!(stackType in stackDefinitions))throw new Error("No stack definition found for stack "+stackType);const{size:size,lightBulk:lightBulk}=stackDefinitions[stackType],bulkRelevantQuantity=Math.floor(quantity/size);return[new Bulk({light:bulkRelevantQuantity*lightBulk}),{[stackType]:quantity%size}]}).reduce(combineBulkAndOverflow,[new Bulk,{}])}function reduceNestedItemBulk(bulk,item,nestedExtraDimensionalContainer){return function(item,nestedExtraDimensionalContainer){return item.extraDimensionalContainer&&!nestedExtraDimensionalContainer||item.reducesBulk&&item.isEquipped}(item,nestedExtraDimensionalContainer)?bulk.minus(item.negateBulk):bulk}function calculateCombinedBulk(item,stackDefinitions,nestedExtraDimensionalContainer=!1,bulkConfig=exports.defaultBulkConfig){const[mainBulk,mainOverflow]=function(item,stackDefinitions,bulkConfig){const stackName=item.stackGroup;return utils_1.isBlank(stackName)?[calculateNonStackBulk(item).times(item.quantity),{}]:calculateStackBulk({[stackName]:item.quantity},stackDefinitions,bulkConfig)}(item,stackDefinitions,bulkConfig),[childBulk,childOverflow]=item.holdsItems.map(child=>calculateCombinedBulk(child,stackDefinitions,item.extraDimensionalContainer,bulkConfig)).reduce(combineBulkAndOverflow,[new Bulk,{}]),combinedOverflow=utils_1.combineObjects(mainOverflow,function(overflow,item,ignoreContainerOverflow){return item.extraDimensionalContainer||ignoreContainerOverflow?{}:overflow}(childOverflow,item,bulkConfig.ignoreContainerOverflow),utils_1.add),[overflowBulk,remainingOverflow]=calculateStackBulk(combinedOverflow,stackDefinitions,bulkConfig);return[mainBulk.plus(reduceNestedItemBulk(childBulk,item,nestedExtraDimensionalContainer)).plus(overflowBulk),remainingOverflow]}exports.BulkItem=BulkItem,exports.defaultBulkConfig={ignoreCoinBulk:!1,ignoreContainerOverflow:!1},exports.calculateBulk=function(items,stackDefinitions,nestedExtraDimensionalContainer=!1,bulkConfig=exports.defaultBulkConfig){return calculateCombinedBulk(new BulkItem({holdsItems:items}),stackDefinitions,nestedExtraDimensionalContainer,bulkConfig)};const lightBulkRegex=/^(\d*)l$/i,complexBulkRegex=/^(\d+);\s*(\d*)l$/i;function weightToBulk(weight){if(null==weight)return;const trimmed=weight.trim();if(/^\d+$/.test(trimmed))return new Bulk({normal:parseInt(trimmed,10)});const lightMatch=trimmed.match(lightBulkRegex);if(lightMatch)return new Bulk({light:parseInt(lightMatch[1]||"1",10)});const complexMatch=trimmed.match(complexBulkRegex);if(complexMatch){const[,normal,light]=complexMatch;return new Bulk({normal:parseInt(normal,10),light:parseInt(light||"1",10)})}}function normalizeWeight(weight){if(null==weight)return;return(""+weight).toLowerCase().trim()}function toBulkItem(item,nestedItems=[]){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x;const id=item._id,weight=null===(_b=null===(_a=item.data)||void 0===_a?void 0:_a.weight)||void 0===_b?void 0:_b.value,quantity=null!==(_e=null===(_d=null===(_c=item.data)||void 0===_c?void 0:_c.quantity)||void 0===_d?void 0:_d.value)&&void 0!==_e?_e:0,isEquipped=null!==(_h=null===(_g=null===(_f=item.data)||void 0===_f?void 0:_f.equipped)||void 0===_g?void 0:_g.value)&&void 0!==_h&&_h,equippedBulk=null===(_k=null===(_j=item.data)||void 0===_j?void 0:_j.equippedBulk)||void 0===_k?void 0:_k.value,unequippedBulk=null===(_m=null===(_l=item.data)||void 0===_l?void 0:_l.unequippedBulk)||void 0===_m?void 0:_m.value,stackGroup=null===(_p=null===(_o=item.data)||void 0===_o?void 0:_o.stackGroup)||void 0===_p?void 0:_p.value,negateBulk=null===(_r=null===(_q=item.data)||void 0===_q?void 0:_q.negateBulk)||void 0===_r?void 0:_r.value,extraDimensionalContainer=null!==(_v=null===(_u=null===(_t=null===(_s=item.data)||void 0===_s?void 0:_s.traits)||void 0===_t?void 0:_t.value)||void 0===_u?void 0:_u.includes("extradimensional"))&&void 0!==_v&&_v;return new BulkItem({id:id,bulk:null!==(_w=weightToBulk(normalizeWeight(weight)))&&void 0!==_w?_w:new Bulk,negateBulk:null!==(_x=weightToBulk(normalizeWeight(negateBulk)))&&void 0!==_x?_x:new Bulk,unequippedBulk:weightToBulk(normalizeWeight(unequippedBulk)),equippedBulk:weightToBulk(normalizeWeight(equippedBulk)),holdsItems:nestedItems,stackGroup:stackGroup,isEquipped:isEquipped,quantity:quantity,extraDimensionalContainer:extraDimensionalContainer})}function toBulkItems(items){const allIds=new Set(items.map(item=>item._id)),itemsInContainers=utils_1.groupBy(items,item=>{var _a,_b,_c;const ref=null!==(_c=null===(_b=null===(_a=item.data)||void 0===_a?void 0:_a.containerId)||void 0===_b?void 0:_b.value)&&void 0!==_c?_c:null;return null!==ref&&allIds.has(ref)?ref:null});if(itemsInContainers.has(null)){return function buildContainerTree(items,groupedItems){return items.map(item=>{const itemId=item._id;if(null!=itemId&&groupedItems.has(itemId)){return toBulkItem(item,buildContainerTree(groupedItems.get(itemId),groupedItems))}return toBulkItem(item)})}(itemsInContainers.get(null),itemsInContainers)}return[]}exports.weightToBulk=weightToBulk,exports.normalizeWeight=normalizeWeight,exports.toBulkItem=toBulkItem,exports.toBulkItems=toBulkItems,exports.itemsFromActorData=function(actorData){return toBulkItems(actorData.items.filter(dataDefinitions_1.isPhysicalItem))},exports.calculateCarriedArmorBulk=function(wornBulk){var _a;const bulk=null!==(_a=weightToBulk(normalizeWeight(wornBulk)))&&void 0!==_a?_a:new Bulk;return 1===bulk.light?"1":bulk.normal>0?""+(bulk.normal+1):"-"},exports.fixWeight=function(brokenWeight){var _a;const bulk=null!==(_a=weightToBulk(normalizeWeight(brokenWeight)))&&void 0!==_a?_a:new Bulk;return 1===bulk.light?"l":bulk.normal>0?""+bulk.normal:null},exports.indexBulkItemsById=function(bulkItems=[]){const result=new Map;return bulkItems.forEach(bulkItem=>function fillBulkIndex(bulkItem,resultMap){resultMap.set(bulkItem.id,bulkItem),bulkItem.holdsItems.forEach(heldBulkItem=>fillBulkIndex(heldBulkItem,resultMap))}(bulkItem,result)),result}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const utils_1=__webpack_require__(3),damage_1=__webpack_require__(15);function getPropertySlots(itemData){var _a,_b,_c,_d;let slots=0;"orichalcum"===(null===(_b=null===(_a=null==itemData?void 0:itemData.data)||void 0===_a?void 0:_a.preciousMaterial)||void 0===_b?void 0:_b.value)&&(slots+=1);const potencyRune=null===(_d=null===(_c=null==itemData?void 0:itemData.data)||void 0===_c?void 0:_c.potencyRune)||void 0===_d?void 0:_d.value;return utils_1.isBlank(potencyRune)||(slots+=parseInt(potencyRune,10)),slots}function getPropertyRunes(itemData,slots){var _a;const runes=[];for(let i=1;i<=slots;i+=1){const rune=null===(_a=itemData.data["propertyRune"+i])||void 0===_a?void 0:_a.value;utils_1.isBlank(rune)||runes.push(rune)}return runes}exports.getPropertySlots=getPropertySlots,exports.getPropertyRunes=getPropertyRunes,exports.getAttackBonus=function(itemData){var _a,_b,_c,_d,_e;return"bomb"===(null===(_a=itemData.group)||void 0===_a?void 0:_a.value)?null!==(_c=utils_1.toNumber(null===(_b=null==itemData?void 0:itemData.bonus)||void 0===_b?void 0:_b.value))&&void 0!==_c?_c:0:null!==(_e=utils_1.toNumber(null===(_d=null==itemData?void 0:itemData.potencyRune)||void 0===_d?void 0:_d.value))&&void 0!==_e?_e:0},exports.getArmorBonus=function(itemData){var _a,_b,_c;const potencyRune=null!==(_b=utils_1.toNumber(null===(_a=null==itemData?void 0:itemData.potencyRune)||void 0===_a?void 0:_a.value))&&void 0!==_b?_b:0;return(null!==(_c=utils_1.toNumber(itemData.armor.value))&&void 0!==_c?_c:0)+potencyRune};const strikingRuneValues=new Map;strikingRuneValues.set("striking",1),strikingRuneValues.set("greaterStriking",2),strikingRuneValues.set("majorStriking",3),exports.getStrikingDice=function(itemData){var _a;return strikingRuneValues.get(null===(_a=null==itemData?void 0:itemData.strikingRune)||void 0===_a?void 0:_a.value)||0};const resiliencyRuneValues=new Map;function toModifier(rune,{damageType:damageType,dieSize:dieSize="d6",diceNumber:diceNumber=1}){const traits=[];return void 0!==damageType&&traits.push(damageType),{name:CONFIG.PF2E.weaponPropertyRunes[rune],diceNumber:diceNumber,dieSize:dieSize,category:damage_1.DamageCategory.fromDamageType(damageType),damageType:damageType,enabled:!0,traits:traits}}resiliencyRuneValues.set("resilient",1),resiliencyRuneValues.set("greaterResilient",2),resiliencyRuneValues.set("majorResilient",3),exports.getResiliencyBonus=function(itemData){var _a;return resiliencyRuneValues.get(null===(_a=null==itemData?void 0:itemData.resiliencyRune)||void 0===_a?void 0:_a.value)||0};const runeDamageModifiers=new Map;runeDamageModifiers.set("disrupting",{damageType:"positive"}),runeDamageModifiers.set("corrosive",{damageType:"acid"}),runeDamageModifiers.set("flaming",{damageType:"fire"}),runeDamageModifiers.set("frost",{damageType:"cold"}),runeDamageModifiers.set("shock",{damageType:"electricity"}),runeDamageModifiers.set("thundering",{damageType:"sonic"}),runeDamageModifiers.set("serrating",{dieSize:"d4"}),runeDamageModifiers.set("anarchic",{damageType:"chaotic"}),runeDamageModifiers.set("axiomatic",{damageType:"lawful"}),runeDamageModifiers.set("holy",{damageType:"good"}),runeDamageModifiers.set("unholy",{damageType:"evil"}),runeDamageModifiers.set("greaterDisrupting",{damageType:"positive",diceNumber:2}),runeDamageModifiers.set("greaterCorrosive",{damageType:"acid"}),runeDamageModifiers.set("greaterFlaming",{damageType:"fire"}),runeDamageModifiers.set("greaterFrost",{damageType:"cold"}),runeDamageModifiers.set("greaterShock",{damageType:"electricity"}),runeDamageModifiers.set("greaterThundering",{damageType:"sonic"}),exports.getPropertyRuneModifiers=function(itemData){const diceModifiers=[];for(const rune of getPropertyRunes(itemData,getPropertySlots(itemData)))if(runeDamageModifiers.has(rune)){const modifierConfig=runeDamageModifiers.get(rune);diceModifiers.push(toModifier(rune,modifierConfig))}return diceModifiers},exports.hasGhostTouchRune=function(itemData){return new Set(getPropertyRunes(itemData,getPropertySlots(itemData))).has("ghostTouch")}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const utils_1=__webpack_require__(3);function toCoins(denomination,value){return{pp:"pp"===denomination?value:0,gp:"gp"===denomination?value:0,sp:"sp"===denomination?value:0,cp:"cp"===denomination?value:0}}function combineCoins(first,second){return{pp:first.pp+second.pp,gp:first.gp+second.gp,sp:first.sp+second.sp,cp:first.cp+second.cp}}function sellAllTreasure(items){const treasureIds=[],coins=items.filter(item=>{var _a,_b,_c,_d,_e,_f;return"treasure"===item.type&&void 0!==(null===(_b=null===(_a=item.data)||void 0===_a?void 0:_a.denomination)||void 0===_b?void 0:_b.value)&&null!==(null===(_d=null===(_c=item.data)||void 0===_c?void 0:_c.denomination)||void 0===_d?void 0:_d.value)&&"coins"!==(null===(_f=null===(_e=null==item?void 0:item.data)||void 0===_e?void 0:_e.stackGroup)||void 0===_f?void 0:_f.value)}).map(item=>{var _a,_b,_c,_d,_e,_f;treasureIds.push(item._id);const value=(null!==(_c=null===(_b=null===(_a=item.data)||void 0===_a?void 0:_a.value)||void 0===_b?void 0:_b.value)&&void 0!==_c?_c:1)*(null!==(_f=null===(_e=null===(_d=item.data)||void 0===_d?void 0:_d.quantity)||void 0===_e?void 0:_e.value)&&void 0!==_f?_f:1);return toCoins(item.data.denomination.value,value)}).reduce(combineCoins,{pp:0,gp:0,sp:0,cp:0});return{treasureIds:treasureIds,coins:coins}}async function addCoins({items:items=[],coins:coins={pp:0,gp:0,sp:0,cp:0},combineStacks:combineStacks=!1,updateItemQuantity:updateItemQuantity=(async()=>Promise.resolve()),addFromCompendium:addFromCompendium=(async()=>Promise.resolve())}={}){const currencies=new Set(Object.keys(coins)),topLevelCoins=items.filter(item=>combineStacks&&function(item,currencies){var _a,_b,_c,_d,_e,_f,_g,_h;return"treasure"===(null==item?void 0:item.type)&&1===(null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.value)||void 0===_b?void 0:_b.value)&&"coins"===(null===(_d=null===(_c=null==item?void 0:item.data)||void 0===_c?void 0:_c.stackGroup)||void 0===_d?void 0:_d.value)&&utils_1.isBlank(null===(_f=null===(_e=null==item?void 0:item.data)||void 0===_e?void 0:_e.containerId)||void 0===_f?void 0:_f.value)&&currencies.has(null===(_h=null===(_g=null==item?void 0:item.data)||void 0===_g?void 0:_g.denomination)||void 0===_h?void 0:_h.value)}(item,currencies)),coinsByDenomination=utils_1.groupBy(topLevelCoins,item=>{var _a,_b;return null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.denomination)||void 0===_b?void 0:_b.value});for(const denomination of currencies){const quantity=coins[denomination];if(quantity>0)if(coinsByDenomination.has(denomination))await updateItemQuantity(coinsByDenomination.get(denomination)[0],quantity);else{const compendiumId=exports.coinCompendiumIds[denomination];await addFromCompendium(compendiumId,quantity)}}}function addCoinsSimple(actor,{coins:coins={pp:0,gp:0,sp:0,cp:0},combineStacks:combineStacks=!1}={}){return addCoins({coins:coins,combineStacks:combineStacks,items:actor.data.items,async updateItemQuantity(item,quantity){var _a,_b;const currentQuantity=(null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.quantity)||void 0===_b?void 0:_b.value)||0,ownedItem=actor.getOwnedItem(item._id);await ownedItem.update({"data.quantity.value":currentQuantity+quantity})},async addFromCompendium(compendiumId,quantity){const pack=game.packs.find(p=>"pf2e.equipment-srd"===p.collection),item=await pack.getEntity(compendiumId);item.data.data.quantity.value=quantity,await actor.createOwnedItem(item.data)}})}function sellAllTreasureSimple(actor){const{treasureIds:treasureIds,coins:coins}=sellAllTreasure(actor.data.items);return Promise.all([actor.deleteEmbeddedEntity("OwnedItem",treasureIds),addCoinsSimple(actor,{coins:coins,combineStacks:!0})])}exports.sellAllTreasure=sellAllTreasure,exports.calculateWealth=function(items){return items.filter(item=>{var _a,_b,_c,_d;return"treasure"===item.type&&void 0!==(null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.denomination)||void 0===_b?void 0:_b.value)&&null!==(null===(_d=null===(_c=null==item?void 0:item.data)||void 0===_c?void 0:_c.denomination)||void 0===_d?void 0:_d.value)}).map(item=>{var _a,_b,_c,_d,_e,_f;const value=(null!==(_c=null===(_b=null===(_a=item.data)||void 0===_a?void 0:_a.value)||void 0===_b?void 0:_b.value)&&void 0!==_c?_c:1)*(null!==(_f=null===(_e=null===(_d=item.data)||void 0===_d?void 0:_d.quantity)||void 0===_e?void 0:_e.value)&&void 0!==_f?_f:1);return toCoins(item.data.denomination.value,value)}).reduce(combineCoins,{pp:0,gp:0,sp:0,cp:0})},exports.coinCompendiumIds={pp:"JuNPeK5Qm1w6wpb4",gp:"B6B7tBWJSqOBz5zz",sp:"5Ew82vBF9YfaiY9f",cp:"lzJ8AVhRcbFul5fh"},exports.addCoins=addCoins,exports.addCoinsSimple=addCoinsSimple,exports.temp=function(actor){new Dialog({title:"Sell all treasure",content:"Would you like to sell all of your treasure?",buttons:{yes:{label:"Yes",callback:()=>sellAllTreasureSimple(actor)},no:{label:"No"}},default:"no"}).render(!0)},exports.sellAllTreasureSimple=sellAllTreasureSimple,exports.sellTreasure=async function(actor,itemId){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m;const item=actor.getOwnedItem(itemId);if("treasure"===(null==item?void 0:item.type)&&void 0!==(null===(_b=null===(_a=item.data.data)||void 0===_a?void 0:_a.denomination)||void 0===_b?void 0:_b.value)&&null!==(null===(_d=null===(_c=item.data.data)||void 0===_c?void 0:_c.denomination)||void 0===_d?void 0:_d.value)&&"coins"!==(null===(_f=null===(_e=item.data.data)||void 0===_e?void 0:_e.stackGroup)||void 0===_f?void 0:_f.value)){const quantity=(null!==(_j=null===(_h=null===(_g=item.data.data)||void 0===_g?void 0:_g.value)||void 0===_h?void 0:_h.value)&&void 0!==_j?_j:1)*(null!==(_m=null===(_l=null===(_k=item.data.data)||void 0===_k?void 0:_k.quantity)||void 0===_l?void 0:_l.value)&&void 0!==_m?_m:1),coins=toCoins(item.data.data.denomination.value,quantity);await actor.deleteEmbeddedEntity("OwnedItem",itemId),await addCoinsSimple(actor,{coins:coins,combineStacks:!0})}}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const bulk_1=__webpack_require__(6),utils_1=__webpack_require__(3);class ContainerData{constructor({item:item,heldItems:heldItems,negateBulk:negateBulk,capacity:capacity,heldItemBulk:heldItemBulk,isInContainer:isInContainer,formattedNegateBulk:formattedNegateBulk,formattedHeldItemBulk:formattedHeldItemBulk,formattedCapacity:formattedCapacity}){this.item=item,this.heldItems=heldItems,this.negateBulk=negateBulk,this.heldItemBulk=heldItemBulk,this.isInContainer=isInContainer,this.formattedHeldItemBulk=formattedHeldItemBulk,this.formattedNegateBulk=formattedNegateBulk,this.formattedCapacity=formattedCapacity,this.capacity=capacity}get isContainer(){return!this.capacity.isNegligible}get isCollapsed(){var _a,_b,_c,_d;return null!==(_d=null===(_c=null===(_b=null===(_a=this.item)||void 0===_a?void 0:_a.data)||void 0===_b?void 0:_b.collapsed)||void 0===_c?void 0:_c.value)&&void 0!==_d&&_d}get isNotInContainer(){return!this.isInContainer}_getLightBulkCapacityThreshold(){return this.capacity.normal>0?this.capacity.toLightBulk()+10:this.capacity.light}get fullPercentage(){const capacity=this._getLightBulkCapacityThreshold();if(0===capacity)return 0;const heldLightBulk=this.heldItemBulk.toLightBulk();return Math.floor(heldLightBulk/capacity*100)}get fullPercentageMax100(){const percentage=this.fullPercentage;return percentage>100?100:percentage}get isOverLoaded(){return this.capacity.normal>0?this.heldItemBulk.toLightBulk()>=this.capacity.toLightBulk()+10:this.heldItemBulk.toLightBulk()>this.capacity.light}}function toContainer(item,heldItems=[],heldBulkItems=[],isInContainer,stackDefinitions,bulkConfig){var _a,_b,_c,_d,_e,_f;const negateBulk=null!==(_c=bulk_1.weightToBulk(null===(_b=null===(_a=item.data)||void 0===_a?void 0:_a.negateBulk)||void 0===_b?void 0:_b.value))&&void 0!==_c?_c:new bulk_1.Bulk,[heldItemBulk]=bulk_1.calculateBulk(heldBulkItems,stackDefinitions,!1,bulkConfig),capacity=null!==(_f=bulk_1.weightToBulk(null===(_e=null===(_d=item.data)||void 0===_d?void 0:_d.bulkCapacity)||void 0===_e?void 0:_e.value))&&void 0!==_f?_f:new bulk_1.Bulk;return new ContainerData({item:item,heldItems:heldItems,negateBulk:negateBulk,capacity:capacity,heldItemBulk:heldItemBulk,isInContainer:isInContainer,formattedNegateBulk:bulk_1.formatBulk(negateBulk),formattedHeldItemBulk:bulk_1.formatBulk(heldItemBulk),formattedCapacity:bulk_1.formatBulk(capacity)})}exports.isCycle=function(itemId,containerId,items){const idIndexedItems=new Map;for(const item of items)idIndexedItems.set(item._id,item);return function detectCycle(itemId,containerId,idIndexedItems){var _a,_b;if(idIndexedItems.has(containerId)){const currentItem=idIndexedItems.get(containerId);return itemId===currentItem._id||detectCycle(itemId,null===(_b=null===(_a=null==currentItem?void 0:currentItem.data)||void 0===_a?void 0:_a.containerId)||void 0===_b?void 0:_b.value,idIndexedItems)}return!1}(itemId,containerId,idIndexedItems)},exports.getContainerMap=function(items=[],bulkItemsById=new Map,stackDefinitions,bulkConfig=bulk_1.defaultBulkConfig){var _a,_b,_c,_d;const allIds=utils_1.groupBy(items,item=>item._id),containerGroups=utils_1.groupBy(items,item=>{var _a,_b;const containerId=null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.containerId)||void 0===_b?void 0:_b.value;return allIds.has(containerId)?containerId:null}),idIndexedContainerData=new Map;for(const item of items){const isInContainer=containerGroups.has(null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.containerId)||void 0===_b?void 0:_b.value),heldItems=containerGroups.get(item._id)||[];idIndexedContainerData.set(item._id,toContainer(allIds.get(item._id)[0],heldItems,null!==(_d=null===(_c=bulkItemsById.get(item._id))||void 0===_c?void 0:_c.holdsItems)&&void 0!==_d?_d:[],isInContainer,stackDefinitions,bulkConfig))}return idIndexedContainerData}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class TraitSelector5e extends FormApplication{constructor(object,options){super(object,options),this.searchString=null,this._filterTimeout=null}static get defaultOptions(){const options=super.defaultOptions;return options.id="trait-selector",options.classes=["pf2e"],options.title="Actor Trait Selection",options.template="systems/pf2e/templates/actors/trait-selector.html",options.width="auto",options.height=700,options.scrollY=[".trait-list"],options}get attribute(){return this.options.name}getData(){const attr=getProperty(this.object.data,this.attribute);"string"==typeof attr.value&&(attr.value=TraitSelector5e._backCompat(attr.value,this.options.choices)),attr.value||(attr.value="");const hasValues=this.options.has_values,hasExceptions=this.options.has_exceptions,choices=duplicate(this.options.choices);if(hasValues){const selected=[];for(const trait of Object.values(attr))selected[trait.type]={value:trait.value,exceptions:trait.exceptions};for(const[k,v]of Object.entries(choices))choices[k]=k in selected?{label:v,chosen:!0,value:selected[k].value||"",exceptions:selected[k].exceptions||""}:{label:v,chosen:!1}}else for(const[k,v]of Object.entries(choices))choices[k]={label:v,chosen:attr.value.includes(k)};const orderedChoices={};return Object.keys(choices).sort((a,b)=>choices[a].label.localeCompare(choices[b].label)).forEach(key=>{orderedChoices[key]=choices[key]}),{ordered_choices:orderedChoices,has_values:hasValues,has_exceptions:hasExceptions,searchString:this.searchString,custom:attr.custom}}search(searchString){const query=new RegExp(RegExp.escape(searchString),"i");this.element.find("li.trait-item").each((i,li)=>{const name=li.getElementsByClassName("trait-label")[0].textContent;li.style.display=query.test(name)?"flex":"none"}),this.searchString=searchString}activateListeners(html){super.activateListeners(html),html.find('input[name="search"]').keyup(this._onFilterResults.bind(this)),this.searchString&&this.search(this.searchString),this.options.has_values&&(html.find("input[id^=input_value]").focusin(ev=>{const name=ev.currentTarget.name;html.find(`input[type=checkbox][name="${name}"]`).prop("checked",!0)}),this.options.allow_empty_values||html.find("input[id^=input_value]").focusout(ev=>{const input=ev.currentTarget;""===input.value&&html.find(`input[type=checkbox][name="${input.name}"]`).prop("checked",!1)})),this.options.has_exceptions&&(html.find("input[id^=input_exception]").focusin(ev=>{const name=ev.currentTarget.name;html.find(`input[type=checkbox][name="${name}"]`).prop("checked",!0)}),html.find("input[id^=input_exception]").focusout(ev=>{const inputException=ev.currentTarget;""===html.find(`input[id=input_value][name="${inputException.name}"]`).val()&&html.find(`input[type=checkbox][name="${inputException.name}"]`).prop("checked",!1)}))}_onFilterResults(event){event.preventDefault();const input=event.currentTarget;this._filterTimeout&&(clearTimeout(this._filterTimeout),this._filterTimeout=null),this._filterTimeout=setTimeout(()=>this.search(input.value),100)}static _backCompat(current,choices){return current&&0!==current.length?(current=current.split(/[\s,]/).filter(t=>!!t)).map(val=>{for(const[k,v]of Object.entries(choices))if(val===v)return k;return null}).filter(val=>!!val):[]}async _updateObject(event,formData){if(this.options.has_values){const choices=[];for(const[k,v]of Object.entries(formData))if(v.length>1&&v[0]&&(!Number.isNaN(Number(v[1]))&&""!==v[1]||this.options.allow_empty_values)){const label=this.options.choices[k],exceptions=v[2]||"";choices.push({type:k,label:label,value:v[1],exceptions:exceptions})}this.object.update({[""+this.attribute]:choices})}else{const choices=[];for(const[k,v]of Object.entries(formData))"search"!==k&&"custom"!==k&&v&&choices.push(k);this.object.update({[this.attribute+".value"]:choices,[this.attribute+".custom"]:formData.custom})}}}exports.TraitSelector5e=TraitSelector5e},function(module,exports,__webpack_require__){"use strict";var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)Object.hasOwnProperty.call(mod,k)&&(result[k]=mod[k]);return result.default=mod,result};Object.defineProperty(exports,"__esModule",{value:!0});const treasure_1=__webpack_require__(8),AddCoinsPopup_1=__webpack_require__(53),kits_1=__webpack_require__(19),compendium_browser_1=__webpack_require__(12),MoveLootPopup_1=__webpack_require__(54),actor_1=__importStar(__webpack_require__(2)),trait_selector_1=__webpack_require__(10),conditions_1=__webpack_require__(5);class ActorSheetPF2e extends ActorSheet{static get defaultOptions(){return mergeObject(super.defaultOptions,{scrollY:[".sheet-sidebar",".spellcastingEntry-list",".actions-list",".skills-pane",".feats-pane",".inventory-pane",".actions-pane",".spellbook-pane",".skillstab-pane"]})}get actorType(){return this.actor.data.type}getData(){const sheetData=super.getData();return this._prepareTraits(sheetData.data.traits),this._prepareItems(sheetData.actor),sheetData.isTargetFlatFooted=this.actor.getFlag(game.system.id,"rollOptions.all.target:flatFooted"),sheetData.isProficiencyLocked=this.actor.getFlag(game.system.id,"proficiencyLock"),sheetData}_findActiveList(){return this.element.find(".tab.active .directory-list")}_prepareTraits(traits){if(void 0===traits)return;const map={languages:CONFIG.PF2E.languages,dr:CONFIG.PF2E.resistanceTypes,di:CONFIG.PF2E.immunityTypes,dv:CONFIG.PF2E.weaknessTypes,ci:CONFIG.PF2E.immunityTypes,traits:CONFIG.PF2E.monsterTraits};for(const[t,choices]of Object.entries(map)){const trait=traits[t]||{value:[],selected:[]};if(Array.isArray(trait)){trait.selected={};for(const entry of trait)if("object"==typeof entry)if("exceptions"in entry&&""!==entry.exceptions)trait.selected[entry.type]=`${choices[entry.type]} (${entry.value}) [${entry.exceptions}]`;else{let text=""+choices[entry.type];""!==entry.value&&(text=`${text} (${entry.value})`),trait.selected[entry.type]=text}else trait.selected[entry]=choices[entry]||""+entry}else trait.value&&(trait.selected=Object.fromEntries(trait.value.map(name=>[name,name])));trait.custom&&(trait.selected.custom=trait.custom)}}_prepareSpell(actorData,spellbook,spell){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o;const spellLvl=Number(spell.data.level.value)<11?Number(spell.data.level.value):10;let spellcastingEntry=null;if((spell.data.location||{}).value&&(spellcastingEntry=(this.actor.getOwnedItem(spell.data.location.value)||{}).data),!spellcastingEntry)return void console.log("PF2e System | Prepare Spell | Spellcasting entry not found for spell "+spell.name);const isNotLevelBasedSpellcasting="wand"===(null===(_b=null===(_a=spellcastingEntry.data)||void 0===_a?void 0:_a.tradition)||void 0===_b?void 0:_b.value)||"scroll"===(null===(_d=null===(_c=spellcastingEntry.data)||void 0===_c?void 0:_c.tradition)||void 0===_d?void 0:_d.value)||"ritual"===(null===(_f=null===(_e=spellcastingEntry.data)||void 0===_e?void 0:_e.tradition)||void 0===_f?void 0:_f.value)||"focus"===(null===(_h=null===(_g=spellcastingEntry.data)||void 0===_g?void 0:_g.tradition)||void 0===_h?void 0:_h.value),spellsSlotsWhereThisIsPrepared=null===(_k=Object.entries((null===(_j=spellcastingEntry.data)||void 0===_j?void 0:_j.slots)||{}))||void 0===_k?void 0:_k.filter(slotArr=>!!Object.values(slotArr[1].prepared).find(slotSpell=>(null==slotSpell?void 0:slotSpell.id)===spell._id)),highestSlotPrepared=null!==(_l=null==spellsSlotsWhereThisIsPrepared?void 0:spellsSlotsWhereThisIsPrepared.map(slot=>parseInt(slot[0].match(/slot(\d+)/)[1],10)).reduce((acc,cur)=>cur>acc?cur:acc,0))&&void 0!==_l?_l:spellLvl,normalHighestSpellLevel=Math.ceil(actorData.data.details.level.value/2);for(let i=Math.min(10,Math.max(spellLvl,highestSlotPrepared,normalHighestSpellLevel));i>=0;i--)isNotLevelBasedSpellcasting&&i!==spellLvl||(spellbook[i]=spellbook[i]||{isCantrip:0===i,isFocus:11===i,label:CONFIG.PF2E.spellLevels[i],spells:[],prepared:[],uses:spellcastingEntry&&parseInt(null===(_m=spellcastingEntry.data)||void 0===_m?void 0:_m.slots["slot"+i].value,10)||0,slots:spellcastingEntry&&parseInt(null===(_o=spellcastingEntry.data)||void 0===_o?void 0:_o.slots["slot"+i].max,10)||0,displayPrepared:!spellcastingEntry||!spellcastingEntry.data.displayLevels||void 0===spellcastingEntry.data.displayLevels[i]||spellcastingEntry.data.displayLevels[i],unpreparedSpellsLabel:spellcastingEntry&&"arcane"===spellcastingEntry.data.tradition.value&&"prepared"===spellcastingEntry.data.prepared.value?game.i18n.localize("PF2E.UnpreparedSpellsLabelArcanePrepared"):game.i18n.localize("PF2E.UnpreparedSpellsLabel")});spell.data.school.str=CONFIG.PF2E.spellSchools[spell.data.school.value];try{const item=this.actor.getOwnedItem(spell._id);item&&(spell.spellInfo=item.getSpellInfo())}catch(err){console.log("PF2e System | Character Sheet | Could not load chat data for spell "+spell.id,spell)}spellbook[spellLvl].spells.push(spell)}_preparedSpellSlots(spellcastingEntry,spellbook){for(const[key,spl]of Object.entries(spellbook))if(spl.slots>0)for(let i=0;i<spl.slots;i++){const entrySlot=((spellcastingEntry.data.slots["slot"+key]||{}).prepared||{})[i]||null;if(entrySlot&&entrySlot.id){const item=this.actor.getOwnedItem(entrySlot.id);if(item){const itemCopy=duplicate(item);if(entrySlot.expended?itemCopy.expended=!0:itemCopy.expended=!1,spl.prepared[i]=itemCopy,spl.prepared[i]){spl.prepared[i].data&&spl.prepared[i].data.school&&spl.prepared[i].data.school.str&&(spl.prepared[i].data.school.str=CONFIG.PF2E.spellSchools[spl.prepared[i].data.school.value]);try{spl.prepared[i].spellInfo=item.getSpellInfo()}catch(err){console.log("PF2e System | Character Sheet | Could not load prepared spell "+entrySlot.id,item)}spl.prepared[i].prepared=!0}else spl.prepared[i]={name:"Empty Slot (drag spell here)",id:null,prepared:!1}}else spl.prepared[i]={name:"Empty Slot (drag spell here)",id:null,prepared:!1}}else spl.prepared[i]={name:"Empty Slot (drag spell here)",id:null,prepared:!1}}}async _allocatePreparedSpellSlot(spellLevel,spellSlot,spell,entryId){!0===CONFIG.debug.hooks&&console.log(`PF2e DEBUG | Updating location for spell ${spell.name} to match spellcasting entry ${entryId}`);const options={_id:entryId};options[`data.slots.slot${spellLevel}.prepared.${spellSlot}`]={id:spell._id},this.actor.updateEmbeddedEntity("OwnedItem",options)}async _removePreparedSpellSlot(spellLevel,spellSlot,entryId){!0===CONFIG.debug.hooks&&console.log(`PF2e DEBUG | Updating spellcasting entry ${entryId} to remove spellslot ${spellSlot} for spell level ${spellLevel}`);const options={_id:entryId};options[`data.slots.slot${spellLevel}.prepared.${spellSlot}`]={name:"Empty Slot (drag spell here)",id:null,prepared:!1},this.actor.updateEmbeddedEntity("OwnedItem",options)}async _setExpendedPreparedSpellSlot(spellLevel,spellSlot,entryId,expendedState){let state=!0;"true"===expendedState&&(state=!1);const options={_id:entryId};options[`data.slots.slot${spellLevel}.prepared.${spellSlot}`]={expended:state},this.actor.updateEmbeddedEntity("OwnedItem",options)}_getProficiencyIcon(level){return{0:"",1:'<i class="fas fa-check-circle"></i>',2:'<i class="fas fa-check-circle"></i><i class="fas fa-check-circle"></i>',3:'<i class="fas fa-check-circle"></i><i class="fas fa-check-circle"></i><i class="fas fa-check-circle"></i>',4:'<i class="fas fa-check-circle"></i><i class="fas fa-check-circle"></i><i class="fas fa-check-circle"></i><i class="fas fa-check-circle"></i>'}[level]}_getDyingIcon(level){const maxDying=this.object.data.data.attributes.dying.max||4,doomed=this.object.data.data.attributes.doomed.value||0,icons={};for(let dyingLevel=0;dyingLevel<=maxDying;dyingLevel++){icons[dyingLevel]=dyingLevel===maxDying?"<span>":"";for(let column=1;column<=maxDying;column++)icons[dyingLevel]+=column>=maxDying-doomed||dyingLevel===maxDying?'<i class="fas fa-skull"></i>':dyingLevel<column?'<i class="far fa-circle"></i>':'<i class="fas fa-times-circle"></i>';icons[dyingLevel]+=dyingLevel===maxDying?"</span>":""}return icons[level]}_getWoundedIcon(level){const maxDying=this.object.data.data.attributes.dying.max||4,icons={};for(let i=0;i<maxDying;i++){let iconHtml="";for(let iconColumn=1;iconColumn<maxDying;iconColumn++)iconHtml+=iconColumn<=i?'<i class="fas fa-dot-circle"></i>':'<i class="far fa-circle"></i>';icons[i]=iconHtml}return icons[level]}_getDoomedIcon(level){const maxDying=this.object.data.data.attributes.dying.max||4,icons={};for(let i=0;i<maxDying;i++){let iconHtml="";for(let iconColumn=1;iconColumn<maxDying;iconColumn++)iconHtml+=iconColumn<=i?'<i class="fas fa-skull"></i>':'<i class="far fa-circle"></i>';icons[i]=iconHtml}return icons[level]}_getHeroPointsIcon(level){return{0:'<i class="far fa-circle"></i><i class="far fa-circle"></i><i class="far fa-circle"></i>',1:'<i class="fas fa-hospital-symbol"></i><i class="far fa-circle"></i><i class="far fa-circle"></i>',2:'<i class="fas fa-hospital-symbol"></i><i class="fas fa-hospital-symbol"></i><i class="far fa-circle"></i>',3:'<i class="fas fa-hospital-symbol"></i><i class="fas fa-hospital-symbol"></i><i class="fas fa-hospital-symbol"></i>'}[level]}_getActionImg(action){return{0:"icons/svg/mystery-man.svg",1:"systems/pf2e/icons/actions/OneAction.png",2:"systems/pf2e/icons/actions/TwoActions.png",3:"systems/pf2e/icons/actions/ThreeActions.png",free:"systems/pf2e/icons/actions/FreeAction.png",reaction:"systems/pf2e/icons/actions/Reaction.png",passive:"systems/pf2e/icons/actions/Passive.png"}[action]}activateListeners(html){if(super.activateListeners(html),html.find("[data-wpad]").each((i,e)=>{const w=("INPUT"===e.tagName?e.value:e.innerText).length*parseInt(e.getAttribute("data-wpad"),10)/2;e.setAttribute("style",`flex: 0 0 ${w}px`)}),html.find(".item .item-name h4").click(event=>{this._onItemSummary(event)}),html.find(".item .melee-name h4").click(event=>{this._onItemSummary(event)}),html.find(".spellcasting.rollable").click(event=>{event.preventDefault();const itemId=$(event.currentTarget).parents(".item-container").attr("data-container-id");this.actor.getOwnedItem(itemId).rollSpellcastingEntryCheck(event)}),!this.options.editable)return;html.find(".save-name").click(ev=>{var _a;ev.preventDefault();const save=$(ev.currentTarget).parents("[data-save]")[0].getAttribute("data-save");if(null===(_a=this.actor.data.data.saves[save])||void 0===_a?void 0:_a.roll){const opts=this.actor.getRollOptions(["all","saving-throw",save]);this.actor.data.data.saves[save].roll(ev,opts)}else this.actor.rollSave(ev,save)}),html.find(".roll-init").click(ev=>{var _a;ev.preventDefault();const checkType=this.actor.data.data.attributes.initiative.ability,opts=this.actor.getRollOptions(["all","initiative"].concat(null!==(_a=actor_1.SKILL_DICTIONARY[checkType])&&void 0!==_a?_a:checkType));this.actor.data.data.attributes.initiative.roll(ev,opts)}),html.find(".attribute-name").click(ev=>{var _a;ev.preventDefault();const attribute=ev.currentTarget.parentElement.getAttribute("data-attribute");if(null===(_a=this.actor.data.data.attributes[attribute])||void 0===_a?void 0:_a.roll){const opts=this.actor.getRollOptions(["all",attribute]);this.actor.data.data.attributes[attribute].roll(ev,opts)}else this.actor.rollAttribute(ev,attribute)}),html.find(".ability-name").click(ev=>{ev.preventDefault();const ability=ev.currentTarget.parentElement.getAttribute("data-ability");this.actor.rollAbility(ev,ability)}),html.find(".skill-name.rollable, .skill-score.rollable").click(ev=>{var _a,_b;const skl=ev.currentTarget.parentElement.getAttribute("data-skill");if(null===(_a=this.actor.data.data.skills[skl])||void 0===_a?void 0:_a.roll){const opts=this.actor.getRollOptions(["all","skill-check",null!==(_b=actor_1.SKILL_DICTIONARY[skl])&&void 0!==_b?_b:skl]);this.actor.data.data.skills[skl].roll(ev,opts)}else this.actor.rollSkill(ev,skl)}),html.find(".recoveryCheck.rollable").click(ev=>{this.actor.rollRecovery(ev)}),html.find(".click-stat-level").on("click contextmenu",this._onClickStatLevel.bind(this)),html.find(".dying-click").on("click contextmenu",this._onClickDying.bind(this)),html.find(".item-unprepare").click(ev=>{const slotId=Number($(ev.currentTarget).parents(".item").attr("data-slot-id")),spellLvl=Number($(ev.currentTarget).parents(".item").attr("data-spell-lvl")),entryId=$(ev.currentTarget).parents(".item").attr("data-entry-id");this._removePreparedSpellSlot(spellLvl,slotId,entryId)}),html.find(".item-toggle-prepare").click(ev=>{const slotId=Number($(ev.currentTarget).parents(".item").attr("data-slot-id")),spellLvl=Number($(ev.currentTarget).parents(".item").attr("data-spell-lvl")),entryId=$(ev.currentTarget).parents(".item").attr("data-entry-id"),expendedState=$(ev.currentTarget).parents(".item").attr("data-expended-state");this._setExpendedPreparedSpellSlot(spellLvl,slotId,entryId,expendedState)}),html.find(".item-toggle-equip").click(ev=>{const f=$(ev.currentTarget),itemId=f.parents(".item").attr("data-item-id"),active=f.hasClass("active");this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.equipped.value":!active})}),html.find(".item-toggle-invest").click(ev=>{const f=$(ev.currentTarget),itemId=f.parents(".item").attr("data-item-id"),active=f.hasClass("active");this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.invested.value":!active})}),html.find(".trait-selector").click(ev=>this._onTraitSelector(ev)),html.find(".add-coins-popup button").click(ev=>this._onAddCoinsPopup(ev)),html.find(".sell-all-treasure button").click(ev=>this._onSellAllTreasure(ev)),html.find(".feat-browse").click(ev=>compendium_browser_1.compendiumBrowser.openTab("feat")),html.find(".action-browse").click(ev=>compendium_browser_1.compendiumBrowser.openTab("action")),html.find(".spell-browse").click(ev=>compendium_browser_1.compendiumBrowser.openTab("spell")),html.find(".inventory-browse").click(ev=>compendium_browser_1.compendiumBrowser.openTab("equipment")),html.find(".spell-create").click(ev=>this._onItemCreate(ev)),html.find(".spellcasting-create").click(ev=>this._createSpellcastingEntry(ev)),html.find(".spellcasting-remove").click(ev=>this._removeSpellcastingEntry(ev)),html.find(".hide-container-toggle").click(ev=>{$(ev.target).parent().siblings().toggle(100,()=>{})}),html.find(".item-create").click(ev=>this._onItemCreate(ev)),html.find(".item-toggle-container").click(ev=>this._toggleContainer(ev)),html.find(".item-sell-treasure").click(ev=>{const itemId=$(ev.currentTarget).parents(".item").attr("data-item-id");treasure_1.sellTreasure(this.actor,itemId)}),html.find(".item-edit").click(ev=>{const itemId=$(ev.currentTarget).parents(".item").attr("data-item-id");new(0,CONFIG.Item.entityClass)(this.actor.getOwnedItem(itemId).data,{actor:this.actor}).sheet.render(!0)}),html.find(".item-delete").click(async ev=>{const li=$(ev.currentTarget).parents(".item"),itemId=li.attr("data-item-id"),item=new Item(this.actor.getOwnedItem(itemId).data,{actor:this.actor});if("condition"===item.type&&item.getFlag(game.system.id,"condition")){const condition=item.data,list=[],references=li.find(".condition-references");console.log(references.html());const content=await renderTemplate("systems/pf2e/templates/actors/delete-condition-dialog.html",{name:item.name,ref:references.html()});new Dialog({title:"Remove Condition",content:content,buttons:{Yes:{icon:'<i class="fa fa-check"></i>',label:"Yes",callback:async()=>{this.actor.data.items.filter(i=>{var _a;return"condition"===i.type&&(null===(_a=i.flags.pf2e)||void 0===_a?void 0:_a.condition)&&i.data.base===condition.data.base&&i.data.value.value===condition.data.value.value}).forEach(i=>{list.push(i._id)}),await conditions_1.PF2eConditionManager.removeConditionFromToken(list,this.token)}},cancel:{icon:'<i class="fas fa-times"></i>',label:"Cancel"}},default:"Yes"}).render(!0)}else{const content=await renderTemplate("systems/pf2e/templates/actors/delete-item-dialog.html",{name:item.name});new Dialog({title:"Delete Confirmation",content:content,buttons:{Yes:{icon:'<i class="fa fa-check"></i>',label:"Yes",callback:async()=>{if(await this.actor.deleteOwnedItem(itemId),"lore"===item.type){const skill=item.name.toLowerCase().replace(/\s+/g,"-");await this.actor.update({["data.skills.-="+skill]:null})}else await this.actor.update({[`data.customModifiers.-=${itemId}-attack`]:null,[`data.customModifiers.-=${itemId}-damage`]:null});li.slideUp(200,()=>this.render(!1))}},cancel:{icon:'<i class="fas fa-times"></i>',label:"Cancel"}},default:"Yes"}).render(!0)}}),html.find(".item-increase-quantity").click(event=>{const itemId=$(event.currentTarget).parents(".item").attr("data-item-id"),item=this.actor.getOwnedItem(itemId).data;if(!("quantity"in item.data))throw new Error("Tried to update quantity on item that does not have quantity");this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.quantity.value":Number(item.data.quantity.value)+1})}),html.find(".item-decrease-quantity").click(event=>{const itemId=$(event.currentTarget).parents(".item").attr("data-item-id"),item=this.actor.getOwnedItem(itemId).data;if(!("quantity"in item.data))throw new Error("Tried to update quantity on item that does not have quantity");Number(item.data.quantity.value)>0&&this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.quantity.value":Number(item.data.quantity.value)-1})}),html.find(".item-prepare").click(ev=>{const itemId=$(ev.currentTarget).parents(".item").attr("data-item-id"),item=this.actor.getOwnedItem(itemId).data;if(!("prepared"in item.data))throw new Error("Tried to update prepared on item that does not have prepared");item.data.prepared.value=!item.data.prepared.value,this.actor.updateEmbeddedEntity("OwnedItem",item)});const handler=ev=>this._onDragItemStart(ev);html.find(".item").each((i,li)=>{li.setAttribute("draggable","true"),li.addEventListener("dragstart",handler,!1)});const skillHandler=ev=>this._onDragSkillStart(ev);html.find(".skill").each((i,li)=>{li.setAttribute("draggable","true"),li.addEventListener("dragstart",skillHandler,!1)});const containerItems=Array.from(html[0].querySelectorAll('[data-item-is-container="true"]'));containerItems.forEach(elem=>elem.addEventListener("dragenter",()=>elem.classList.add("hover-container"),!1)),containerItems.forEach(elem=>elem.addEventListener("dragleave",()=>elem.classList.remove("hover-container"),!1)),html.find("[data-action-index].item .item-image.action-strike").click(event=>{if(!("actions"in this.actor.data.data))throw Error("Experimental strikes are not supported on this actor");const actionIndex=$(event.currentTarget).parents(".item").attr("data-action-index"),opts=this.actor.getRollOptions(["all","attack-roll"]);this.actor.data.data.actions[Number(actionIndex)].roll(event,opts)}),html.find("[data-variant-index].variant-strike").click(event=>{if(!("actions"in this.actor.data.data))throw Error("Experimental strikes are not supported on this actor");const actionIndex=$(event.currentTarget).parents(".item").attr("data-action-index"),variantIndex=$(event.currentTarget).attr("data-variant-index"),opts=this.actor.getRollOptions(["all","attack-roll"]);this.actor.data.data.actions[Number(actionIndex)].variants[Number(variantIndex)].roll(event,opts)}),html.find("[data-item-id].item .item-image").click(event=>this._onItemRoll(event)),html.find(".focus-pool-input").change(async event=>{event.preventDefault();const itemId=$(event.currentTarget).parents(".item-container").attr("data-container-id"),focusPool=Math.clamped(Number(event.target.value),0,3),item=this.actor.getOwnedItem(itemId);let focusPoints=getProperty(item.data,"data.focus.points")||0;focusPoints=Math.clamped(focusPoints,0,focusPool),await this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.focus.points":focusPoints,"data.focus.pool":focusPool})}),html.find(".item-value-input").change(async event=>{event.preventDefault();let itemId=$(event.currentTarget).parents(".item").attr("data-item-id");itemId||(itemId=$(event.currentTarget).parents(".item-container").attr("data-container-id")),await this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.item.value":Number(event.target.value)})}),html.find(".item-name-input").change(async event=>{const itemId=event.target.attributes["data-item-id"].value;await this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,name:event.target.value})}),html.find(".spell-slots-input").change(async event=>{event.preventDefault();const options={_id:$(event.currentTarget).parents(".item").attr("data-item-id")};options[`data.slots.slot${Number($(event.currentTarget).parents(".item").attr("data-level"))}.value`]=Number(event.target.value),await this.actor.updateEmbeddedEntity("OwnedItem",options)}),html.find(".spell-max-input").change(async event=>{event.preventDefault();const options={_id:$(event.currentTarget).parents(".item").attr("data-item-id")};options[`data.slots.slot${Number($(event.currentTarget).parents(".item").attr("data-level"))}.max`]=Number(event.target.value),await this.actor.updateEmbeddedEntity("OwnedItem",options)}),html.find(".ability-select").change(async event=>{event.preventDefault();const itemId=$(event.currentTarget).parents(".item-container").attr("data-container-id");await this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.ability.value":event.target.value})}),html.find(".prepared-toggle").click(async event=>{event.preventDefault();const itemId=$(event.currentTarget).parents(".item-container").attr("data-container-id"),itemToEdit=this.actor.getOwnedItem(itemId).data;if("spellcastingEntry"!==itemToEdit.type)throw new Error("Tried to toggle prepared spells on a non-spellcasting entry");const bool=!(itemToEdit.data.showUnpreparedSpells||{}).value;await this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.showUnpreparedSpells.value":bool})}),html.find(".level-prepared-toggle").click(async event=>{event.preventDefault();const parentNode=$(event.currentTarget).parents(".spellbook-header"),itemId=parentNode.attr("data-item-id"),lvl=parentNode.attr("data-level"),itemToEdit=this.actor.getOwnedItem(itemId).data;if("spellcastingEntry"!==itemToEdit.type)throw new Error("Tried to toggle prepared spells on a non-spellcasting entry");const currentDisplayLevels=itemToEdit.data.displayLevels||{};currentDisplayLevels[lvl]=!currentDisplayLevels[lvl],await this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.displayLevels":currentDisplayLevels}),this.render()}),html.find("input[type=text], input[type=number]").focus(event=>{event.currentTarget.select()})}_onClickDying(event){event.preventDefault();const field=$(event.currentTarget).siblings('input[type="hidden"]'),maxDying=this.object.data.data.attributes.dying.max,doomed=this.object.data.data.attributes.doomed.value,level=parseFloat(""+field.val());let newLevel;"click"===event.type?(newLevel=Math.clamped(level+1+0,0,maxDying),newLevel+doomed>=maxDying&&(newLevel=maxDying)):"contextmenu"===event.type&&(newLevel=Math.clamped(level-1,0,maxDying),newLevel+doomed>=maxDying&&(newLevel-=doomed)),field.val(newLevel),this._onSubmit(event)}_onClickStatLevel(event){var _a;event.preventDefault();const field=$(event.currentTarget).siblings('input[type="hidden"]'),max=null!==(_a=field.data("max"))&&void 0!==_a?_a:4,{statType:statType,category:category}=field.data();if(this.actor.getFlag("pf2e","proficiencyLock")&&"proficiency"===category)return;const level=parseFloat(""+field.val());let newLevel;if("click"===event.type?newLevel=Math.clamped(level+1,0,max):"contextmenu"===event.type&&(newLevel=Math.clamped(level-1,0,max)),"item"!==statType)field.val(newLevel),this._onSubmit(event);else{let itemId=$(event.currentTarget).parents(".item").attr("data-item-id");if(void 0===itemId)if(itemId=$(event.currentTarget).parents(".item-container").attr("data-container-id"),"focus"===category){const item=this.actor.getOwnedItem(itemId),focusPoolSize=getProperty(item.data,"data.focus.pool")||1;newLevel=Math.clamped(newLevel,0,focusPoolSize),this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.focus.points":newLevel})}else this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.proficiency.value":newLevel});else this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.proficient.value":newLevel})}}_onDragItemStart(event){var _a;event.stopImmediatePropagation();const itemId=event.currentTarget.getAttribute("data-item-id"),containerId=event.currentTarget.getAttribute("data-container-id"),actionIndex=event.currentTarget.getAttribute("data-action-index");if(itemId||containerId){const item=this.actor.getOwnedItem(itemId||containerId);return event.dataTransfer.setData("text/plain",JSON.stringify({type:"Item",data:item.data,actorId:this.actor._id,tokenId:null===(_a=this.actor.token)||void 0===_a?void 0:_a.id,id:itemId})),!0}return!!actionIndex&&(event.dataTransfer.setData("text/plain",JSON.stringify({type:"Action",index:actionIndex,actorId:this.actor._id})),!0)}_onDragSkillStart(event){const skill=event.currentTarget.getAttribute("data-skill");if(skill){const skillName=$(event.currentTarget).find(".skill-name").text();return event.dataTransfer.setData("text/plain",JSON.stringify({type:"Skill",skill:skill,skillName:skillName,actorId:this.actor._id})),!0}return!1}async _onDrop(event){var _a,_b,_c;event.preventDefault(),!0===CONFIG.debug.hooks&&console.log("PF2e DEBUG | ***** PF2e _onDrop (spell) override method called *****");const dropSlotType=$(event.target).parents(".item").attr("data-item-type"),dropContainerType=$(event.target).parents(".item-container").attr("data-container-type"),dragEntitiy=JSON.parse(event.dataTransfer.getData("text/plain")||null);if("spellSlot"===dropSlotType){const dragItem=dragEntitiy;if(dragItem.pack){!0===CONFIG.debug.hooks&&console.log("PF2e DEBUG | ***** item from compendium pack dropped on a spellSlot *****");const dropID=$(event.target).parents(".item-container").attr("data-container-id");return this.actor.importItemFromCollectionWithLocation(dragItem.pack,dragItem.id,dropID),!1}if(dragItem&&dragItem.data&&"spell"===dragItem.data.type){!0===CONFIG.debug.hooks&&console.log("PF2e DEBUG | ***** spell dropped on a spellSlot *****");const dropID=$(event.target).parents(".item").attr("data-item-id"),spellLvl=Number($(event.target).parents(".item").attr("data-spell-lvl")),entryId=$(event.target).parents(".item").attr("data-entry-id");this._allocatePreparedSpellSlot(spellLvl,dropID,dragItem.data,entryId)}else if(dragItem.data){if("spell"===dragItem.data.type){if(!0===CONFIG.debug.hooks&&console.log("PF2e DEBUG | ***** spell dragged from another actor dropped on a spellSlot *****"),dragItem.actorId===this.actor._id)return!1;const dropID=$(event.target).parents(".item-container").attr("data-container-id");return dragItem.data.data.location={value:dropID},this.actor.createEmbeddedEntity("OwnedItem",dragItem.data),!1}"item"===dragItem.data.type&&console.log("An item from another sheet has been dropped here.")}}if("spell"===(null===(_a=null==dragEntitiy?void 0:dragEntitiy.data)||void 0===_a?void 0:_a.type)&&dragEntitiy.actorId===this.actor._id){const sourceId=dragEntitiy.data._id,dropId=$(event.target).parents(".item").attr("data-item-id");if("spell"===dropSlotType&&sourceId!==dropId){const source=this.actor.getOwnedItem(sourceId),sourceLevel=source.data.data.level.value,sourceLocation=source.data.data.location.value,target=this.actor.getOwnedItem(dropId),targetLevel=target.data.data.level.value,targetLocation=target.data.data.location.value;if(sourceLevel===targetLevel&&sourceLocation===targetLocation){const siblings=this.actor.items.entries.filter(i=>"spell"===i.data.type&&i.data.data.level.value===sourceLevel&&i.data.data.location.value===sourceLocation),sortBefore=source.data.sort>=target.data.sort;source.sortRelative({target:target,siblings:siblings,sortBefore:sortBefore})}}return!1}if("spellcastingEntry"===dropContainerType){const dragData=dragEntitiy;if(dragData&&dragData.data&&"spell"===dragData.data.type&&dragData.actorId===this.actor.id){!0===CONFIG.debug.hooks&&console.log("PF2e DEBUG | ***** spell from same actor dropped on a spellcasting entry *****");const dropID=$(event.target).parents(".item-container").attr("data-container-id");dropID&&(dragData.data.data.location={value:dropID},await this.actor.updateEmbeddedEntity("OwnedItem",dragData.data))}if("spellcastingEntry"===(null===(_b=null==dragData?void 0:dragData.data)||void 0===_b?void 0:_b.type)&&dragData.actorId===this.actor.id){const sourceId=dragData.data._id,dropId=$(event.target).parents(".item-container").attr("data-container-id");if(sourceId!==dropId){const source=this.actor.getOwnedItem(sourceId),target=this.actor.getOwnedItem(dropId),siblings=this.actor.items.entries.filter(i=>"spellcastingEntry"===i.data.type);if(source&&target){const sortBefore=source.data.sort>=target.data.sort;source.sortRelative({target:target,siblings:siblings,sortBefore:sortBefore})}}return!1}if(dragData.data){if("spell"===dragData.data.type){if(!0===CONFIG.debug.hooks&&console.log("PF2e DEBUG | ***** spell from another actor dropped on a spellcasting entry *****"),dragData.actorId===this.actor.id)return!1;const dropID=$(event.target).parents(".item-container").attr("data-container-id");return dragData.data.data.location={value:dropID},this.actor.createEmbeddedEntity("OwnedItem",dragData.data),!1}}else{if(dragData.pack){!0===CONFIG.debug.hooks&&console.log("PF2e DEBUG | ***** item from a compendium pack dropped on a spellcasting entry *****");const dropID=$(event.target).parents(".item-container").attr("data-container-id");return this.actor.importItemFromCollectionWithLocation(dragData.pack,dragData.id,dropID),!1}if(dragData.id){const dragItem=game.items.get(dragData.id);if(!dragItem)throw new Error("Dragged item not found");const dropID=$(event.target).parents(".item-container").attr("data-container-id");return dragItem.data.data.location={value:dropID},this.actor.createEmbeddedEntity("OwnedItem",dragItem.data),!1}}}return("spellcastingEntry"!==(null===(_c=null==dragEntitiy?void 0:dragEntitiy.data)||void 0===_c?void 0:_c.type)||"spellcastingEntry"===dropContainerType)&&(!0===CONFIG.debug.hooks&&console.log("PF2e DEBUG | ***** PF2e _onDrop (spell) override method finished passing over to _onDropOverride *****"),this._onDropOverride(event))}async _onDropOverride(event){var _a,_b,_c;let data;try{if(data=JSON.parse(event.dataTransfer.getData("text/plain")),"Item"!==data.type)return!1}catch(err){return!1}const actor=this.actor;let itemData;if(data.pack){console.log("Comes from compemdium");const pack=game.packs.get(data.pack);itemData=await pack.getEntry(data.id)}else{if(data.data)return this.moveItemBetweenActors(event,data.actorId,data.tokenId,actor._id,null===(_a=actor.token)||void 0===_a?void 0:_a.id,data.id),!0;{console.log("From world entry");const item=game.items.get(data.id);if(!item)return!1;itemData=duplicate(item.data)}}if("kit"===itemData.type)return await kits_1.addKit(itemData,async newItems=>{const items=await actor.createOwnedItem(newItems);return Array.isArray(items)?items.map(item=>item._id):[items._id]}),!0;if("condition"===itemData.type&&(null===(_b=itemData.flags.pf2e)||void 0===_b?void 0:_b.condition)){const condition=itemData;return await conditions_1.PF2eConditionManager.addConditionToToken(condition,this.token),!0}const container=$(event.target).parents('[data-item-is-container="true"]');let containerId=null;return void 0!==container[0]&&(containerId=null===(_c=container[0].dataset.itemId)||void 0===_c?void 0:_c.trim()),actor_1.default.stashOrUnstash(actor,async()=>{const newItemData=await actor.createOwnedItem(itemData);return actor.getOwnedItem(newItemData._id)},containerId)}async moveItemBetweenActors(event,sourceActorId,sourceTokenId,targetActorId,targetTokenId,itemId){var _a;const sourceActor=sourceTokenId?game.actors.tokens[sourceTokenId]:game.actors.get(sourceActorId),targetActor=targetTokenId?game.actors.tokens[targetTokenId]:game.actors.get(targetActorId),item=sourceActor.getOwnedItem(itemId),isSameActor=sourceActorId===targetActorId&&sourceTokenId===targetTokenId,container=$(event.target).parents('[data-item-is-container="true"]');let containerId=null;if(void 0!==container[0]&&(containerId=null===(_a=container[0].dataset.itemId)||void 0===_a?void 0:_a.trim()),isSameActor)return await actor_1.default.stashOrUnstash(targetActor,async()=>item,containerId),this._onSortItem(event,item.data);if(("quantity"in item.data.data?Number(item.data.data.quantity.value):0)>1){new MoveLootPopup_1.MoveLootPopup(sourceActor,{},quantity=>{console.log(`Accepted moving ${quantity} items`),actor_1.default.transferItemToActor(sourceActor,targetActor,item,quantity,containerId)}).render(!0)}else actor_1.default.transferItemToActor(sourceActor,targetActor,item,1,containerId);return!0}_onItemRoll(event){event.preventDefault();const itemId=$(event.currentTarget).parents(".item").attr("data-item-id");this.actor.getOwnedItem(itemId).roll(event)}_onItemSummary(event){event.preventDefault();const li=$(event.currentTarget).parent().parent(),itemId=li.attr("data-item-id");let item;if("spellSlot"===li.attr("data-item-type"))return;try{if(item=this.actor.getOwnedItem(itemId),!item.type)return}catch(err){return}if("spellcastingEntry"===item.data.type||"condition"===item.data.type)return;const chatData=item.getChatData({secrets:this.actor.owner});this._renderItemSummary(li,item,chatData)}_renderItemSummary(li,item,chatData){const localize=game.i18n.localize.bind(game.i18n);if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,()=>summary.remove())}else{const div=$(`<div class="item-summary"><div class="item-description">${chatData.description.value}</div></div>`),props=$('<div class="item-properties tags"></div>');chatData.properties&&chatData.properties.filter(p=>"string"==typeof p).forEach(p=>{props.append(`<span class="tag tag_secondary">${localize(p)}</span>`)}),chatData.critSpecialization&&props.append(`<span class="tag" title="${localize(chatData.critSpecialization.description)}" style="background: rgb(69,74,124); color: white;">${localize(chatData.critSpecialization.label)}</span>`),chatData.traits&&chatData.traits.length&&chatData.traits.forEach(p=>{p.description?props.append(`<span class="tag tag_alt" title="${localize(p.description)}">${localize(p.label)}</span>`):props.append(`<span class="tag">${localize(p.label)}</span>`)}),div.append(props),li.append(div.hide()),div.slideDown(200)}li.toggleClass("expanded")}_toggleContainer(event){var _a,_b,_c,_d;const itemId=$(event.currentTarget).parents(".item").data("item-id"),item=this.actor.getOwnedItem(itemId);if(null===item||"backpack"!==item.data.type)return;const isCollapsed=null!==(_d=null===(_c=null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.data)||void 0===_b?void 0:_b.collapsed)||void 0===_c?void 0:_c.value)&&void 0!==_d&&_d;item.update({"data.collapsed.value":!isCollapsed})}_onItemCreate(event){event.preventDefault();const header=event.currentTarget,data=duplicate(header.dataset);if("feat"===data.type)data.name=`New ${data.featType.capitalize()} ${data.type.capitalize()}`,mergeObject(data,{"data.featType.value":data.featType});else if("action"===data.type)data.name="New "+data.actionType.capitalize(),mergeObject(data,{"data.actionType.value":data.actionType});else if("melee"===data.type)data.name="New "+data.actionType.capitalize(),mergeObject(data,{"data.weaponType.value":data.actionType});else if("spell"===data.type){this.actor._setShowUnpreparedSpells(data.location,data.level),data.name=`New  Level ${data.level} ${data.type.capitalize()}`,mergeObject(data,{"data.level.value":data.level,"data.location.value":data.location});const currentLvlToDisplay={};currentLvlToDisplay[data.level]=!0,this.actor.updateEmbeddedEntity("OwnedItem",{_id:data.location,"data.showUnpreparedSpells.value":!0,"data.displayLevels":currentLvlToDisplay})}else"lore"===data.type&&"npc"===this.actorType?(data.name="Skill",data.img="/icons/svg/d20-black.svg"):data.name="New "+data.type.capitalize();this.actor.createEmbeddedEntity("OwnedItem",data)}_createSpellcastingEntry(event){event.preventDefault();let magicTradition="arcane",spellcastingType="innate";const dialogOptions={width:300,top:event.clientY-80,left:window.innerWidth-710},dialogData={magicTradition:magicTradition,magicTraditions:CONFIG.PF2E.magicTraditions,spellcastingType:spellcastingType,spellcastingTypes:CONFIG.PF2E.preparationType};renderTemplate("systems/pf2e/templates/actors/spellcasting-dialog.html",dialogData).then(dlg=>{new Dialog({title:"Select Spellcasting Entry Details",content:dlg,buttons:{create:{label:"Create",callback:html=>{let name="";magicTradition=""+html.find('[name="magicTradition"]').val(),"ritual"===magicTradition?(spellcastingType="",name=CONFIG.PF2E.magicTraditions[magicTradition]+"s"):"focus"===magicTradition?(spellcastingType="",name=CONFIG.PF2E.magicTraditions[magicTradition]+" Spells"):"scroll"===magicTradition?(spellcastingType="",name=""+CONFIG.PF2E.magicTraditions[magicTradition]):"wand"===magicTradition?(spellcastingType="prepared",name=""+CONFIG.PF2E.magicTraditions[magicTradition]):(spellcastingType=""+html.find('[name="spellcastingType"]').val(),name=`${CONFIG.PF2E.preparationType[spellcastingType]} ${CONFIG.PF2E.magicTraditions[magicTradition]} Spells`);const data={name:name,type:"spellcastingEntry",data:{ability:{type:"String",label:"Spellcasting Ability",value:""},spelldc:{type:"String",label:"Class DC",item:0},tradition:{type:"String",label:"Magic Tradition",value:magicTradition},prepared:{type:"String",label:"Spellcasting Type",value:spellcastingType},showUnpreparedSpells:{value:!0}}};this.actor.createEmbeddedEntity("OwnedItem",data)}}},default:"create"},dialogOptions).render(!0)})}_removeSpellcastingEntry(event){event.preventDefault();const li=$(event.currentTarget).parents(".item"),itemId=li.attr("data-container-id"),item=this.actor.getOwnedItem(itemId);renderTemplate("systems/pf2e/templates/actors/delete-spellcasting-dialog.html").then(html=>{new Dialog({title:"Delete Confirmation",content:html,buttons:{Yes:{icon:'<i class="fa fa-check"></i>',label:"Yes",callback:async()=>{console.log("PF2e | Deleting Spell Container: ",item.name);const itemsToDelete=[];for(const i of this.actor.data.items)"spell"===i.type&&i.data.location.value===itemId&&itemsToDelete.push(i._id);await this.actor.deleteOwnedItem(itemsToDelete),await this.actor.deleteOwnedItem(itemId),li.slideUp(200,()=>this.render(!1))}},cancel:{icon:'<i class="fas fa-times"></i>',label:"Cancel"}},default:"Yes"}).render(!0)})}_onAddCoinsPopup(event){event.preventDefault(),new AddCoinsPopup_1.AddCoinsPopup(this.actor,{}).render(!0)}_onSellAllTreasure(event){event.preventDefault(),treasure_1.sellAllTreasureSimple(this.actor)}_onTraitSelector(event){event.preventDefault();const a=$(event.currentTarget),options={name:a.parents("label").attr("for"),title:a.parent().text().trim(),choices:CONFIG.PF2E[a.attr("data-options")],has_values:"true"===a.attr("data-has-values"),allow_empty_values:"true"===a.attr("data-allow-empty-values"),has_exceptions:"true"===a.attr("data-has-exceptions")};new trait_selector_1.TraitSelector5e(this.actor,options).render(!0)}_onCrbTraitSelector(event){event.preventDefault();const a=$(event.currentTarget),options={name:a.parents("li").attr("for"),title:a.parent().parent().siblings("h4").text().trim(),choices:CONFIG.PF2E[a.attr("data-options")],has_values:"true"===a.attr("data-has-values"),allow_empty_values:"true"===a.attr("data-allow-empty-values"),has_exceptions:"true"===a.attr("data-has-exceptions")};new trait_selector_1.TraitSelector5e(this.actor,options).render(!0)}_onAreaEffect(event){const areaType=$(event.currentTarget).attr("data-area-areaType"),areaSize=Number($(event.currentTarget).attr("data-area-size"));let tool="cone";"burst"===areaType?tool="circle":"emanation"===areaType?tool="rect":"line"===areaType&&(tool="ray");let x,y,templateData=this.actor.getFlag("pf2e","areaEffectId")||null,templateScene=null;if(templateData&&(templateScene=this.actor.getFlag("pf2e","areaEffectScene")||null,this.actor.setFlag("pf2e","areaEffectId",null),this.actor.setFlag("pf2e","areaEffectScene",null),console.log(`PF2e | Existing MeasuredTemplate ${templateData.id} from Scene ${templateScene} found`),canvas.templates.objects.children))for(const placeable of canvas.templates.objects.children)if(console.log(`PF2e | Placeable Found - id: ${placeable.data.id}, scene: ${canvas.scene._id}, type: ${placeable.constructor.name}`),placeable.data.id===templateData.id&&canvas.scene._id===templateScene&&"MeasuredTemplate"===placeable.constructor.name){console.log(`PF2e | Deleting MeasuredTemplate ${templateData.id} from Scene ${templateScene}`);new MeasuredTemplate(templateData,templateScene).delete(templateScene)}let data={};const gridWidth=canvas.grid.grid.w;if("emanation"===areaType||"cone"===areaType)if(canvas.tokens.controlled.length>1)ui.notifications.info("Please select a single target token");else if(0===canvas.tokens.controlled.length)ui.notifications.info("Please select a target token");else{const t=canvas.tokens.controlled[0];let{rotation:rotation}=t.data;const{width:width}=t.data;if(x=t.data.x,y=t.data.y,"cone"===tool)rotation<0&&(rotation=360+rotation),rotation<35?(x+=gridWidth/2,y+=gridWidth):rotation<55?y+=gridWidth:rotation<125?y+=gridWidth/2:rotation<145||(rotation<215?x+=gridWidth/2:rotation<235?x+=gridWidth:rotation<305?(x+=gridWidth,y+=gridWidth/2):rotation<325?(x+=gridWidth,y+=gridWidth):(x+=gridWidth/2,y+=gridWidth)),rotation+=90,data={t:tool,x:x,y:y,distance:areaSize,direction:rotation,fillColor:game.user.data.color||"#FF0000"};else if("rect"===tool){x-=gridWidth*(areaSize/5),y-=gridWidth*(areaSize/5),rotation=45;const rectSide=areaSize+5*width+areaSize;data={t:tool,x:x,y:y,distance:Math.sqrt(rectSide**2+rectSide**2),direction:rotation,fillColor:game.user.data.color||"#FF0000"}}MeasuredTemplate.create(canvas.scene._id,data).then(results=>{templateData=results.data,this.actor.setFlag("pf2e","areaEffectId",templateData),this.actor.setFlag("pf2e","areaEffectScene",canvas.scene._id)})}}_onSubmit(event){var _a,_b,_c,_d,_e;return"data.attributes.hp.value"===(null===(_a=null==event?void 0:event.currentTarget)||void 0===_a?void 0:_a.name)&&(event.currentTarget.value=Math.clamped(Number(event.currentTarget.value),Number(null!==(_c=null===(_b=this.actor.data.data.attributes.hp)||void 0===_b?void 0:_b.min)&&void 0!==_c?_c:0),Number(null!==(_e=null===(_d=this.actor.data.data.attributes.hp)||void 0===_d?void 0:_d.max)&&void 0!==_e?_e:0))),super._onSubmit(event)}_onChangeInput(event){this._onSubmit(event)}}exports.default=ActorSheetPF2e},function(module,exports,__webpack_require__){"use strict";var __await=this&&this.__await||function(v){return this instanceof __await?(this.v=v,this):new __await(v)},__asyncGenerator=this&&this.__asyncGenerator||function(thisArg,_arguments,generator){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,g=generator.apply(thisArg,_arguments||[]),q=[];return i={},verb("next"),verb("throw"),verb("return"),i[Symbol.asyncIterator]=function(){return this},i;function verb(n){g[n]&&(i[n]=function(v){return new Promise((function(a,b){q.push([n,v,a,b])>1||resume(n,v)}))})}function resume(n,v){try{(r=g[n](v)).value instanceof __await?Promise.resolve(r.value.v).then(fulfill,reject):settle(q[0][2],r)}catch(e){settle(q[0][3],e)}var r}function fulfill(value){resume("next",value)}function reject(value){resume("throw",value)}function settle(f,v){f(v),q.shift(),q.length&&resume(q[0][0],q[0][1])}},__asyncValues=this&&this.__asyncValues||function(o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,m=o[Symbol.asyncIterator];return m?m.call(o):(o="function"==typeof __values?__values(o):o[Symbol.iterator](),i={},verb("next"),verb("throw"),verb("return"),i[Symbol.asyncIterator]=function(){return this},i);function verb(n){i[n]=o[n]&&function(v){return new Promise((function(resolve,reject){(function(resolve,reject,d,v){Promise.resolve(v).then((function(v){resolve({value:v,done:d})}),reject)})(resolve,reject,(v=o[n](v)).done,v.value)}))}}},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const progress_1=__importDefault(__webpack_require__(24));function _sortedObject(obj){return Object.fromEntries([...Object.entries(obj)].sort())}const packLoader=new class{constructor(){this.loadedPacks={Actor:{},Item:{}}}loadPacks(entityType,packs){return __asyncGenerator(this,arguments,(function*(){this.loadedPacks[entityType]||(this.loadedPacks[entityType]={});const progress=new progress_1.default({steps:packs.length});for(const packId of packs){let data=this.loadedPacks[entityType][packId];if(data){const{pack:pack}=data;progress.advance("Loading "+pack.metadata.label)}else{const pack=game.packs.get(packId);if(!pack){progress.advance("");continue}if(progress.advance("Loading "+pack.metadata.label),pack.metadata.entity!==entityType)continue;{const content=yield __await(pack.getContent());data={pack:pack,content:content},this.loadedPacks[entityType][packId]=data}}yield yield __await(data)}progress.close("Loading complete")}))}};class CompendiumBrowser extends Application{constructor(options={}){super(options),this.hookCompendiumList(),this.hookTab(),Hooks.on("ready",()=>{this.loadSettings(),this.initCompendiumList()})}initCompendiumList(){var _a,_b,_c;const settings={action:{},bestiary:{},hazard:{},equipment:{},feat:{},spell:{}};let types;for(const pack of game.packs.values()){if("Item"===pack.metadata.entity)types=["action","equipment","feat","spell"];else{if("Actor"!==pack.metadata.entity)continue;types=["bestiary","hazard"]}for(const t of types){const load=null!==(_c=null===(_b=null===(_a=this.settings[t])||void 0===_a?void 0:_a[pack.collection])||void 0===_b?void 0:_b.load)&&void 0!==_c?_c:pack.collection.includes(t);settings[t][pack.collection]={load:load,name:pack.metadata.label}}}this.settings=settings}loadSettings(){this.settings=JSON.parse(game.settings.get("pf2e","compendiumBrowserPacks")),this.data={action:null,bestiary:null,equipment:null,feat:null,hazard:null,spell:null}}hookTab(){this.navigationTab=this._tabs[0];const _tabCallback=this.navigationTab.callback;this.navigationTab.callback=(event,tabs,active,...args)=>{_tabCallback(event,tabs,active,...args),this.loadTab(active)}}async openTab(tab){await this._render(!0),this.navigationTab.activate(tab,{triggerCallback:!0})}async loadTab(tab){if(this.data[tab])return;let data;switch(tab){case"settings":return;case"action":data=this.loadActions();break;case"equipment":data=this.loadEquipment();break;case"feat":data=this.loadFeats();break;case"spell":data=this.loadSpells();break;case"bestiary":data=this.loadBestiary();break;case"hazard":data=this.loadHazards();break;default:throw new Error("Unknown tab "+tab)}this.data[tab]=await data,this.rendered&&this.render(!0)}_loadedPacks(tab){var _a;return Object.entries(null!==(_a=this.settings[tab])&&void 0!==_a?_a:[]).flatMap(([collection,info])=>info.load?[collection]:[])}async loadActions(){var e_1,_a;console.log("PF2e System | Compendium Browser | Started loading feats");const actions={};try{for(var _c,_b=__asyncValues(packLoader.loadPacks("Item",this._loadedPacks("action")));!(_c=await _b.next()).done;){const{pack:pack,content:content}=_c.value;console.log(`PF2e System | Compendium Browser | ${pack.metadata.label} - Loading`);for(let action of content)action=action.data,"action"===action.type&&("passive"===action.data.actionType.value&&(action.img=this._getActionImg("passive")),action.compendium=pack.collection,actions[action._id]=action)}}catch(e_1_1){e_1={error:e_1_1}}finally{try{_c&&!_c.done&&(_a=_b.return)&&await _a.call(_b)}finally{if(e_1)throw e_1.error}}return console.log("PF2e System | Compendium Browser | Finished loading actions"),{actions:actions,actionTraits:_sortedObject(CONFIG.PF2E.featTraits),skills:CONFIG.PF2E.skillList,proficiencies:CONFIG.PF2E.proficiencyLevels}}async loadBestiary(){var e_2,_a;console.log("PF2e System | Compendium Browser | Started loading actors");const bestiaryActors={},sources=new Set;try{for(var _c,_b=__asyncValues(packLoader.loadPacks("Actor",this._loadedPacks("bestiary")));!(_c=await _b.next()).done;){const{pack:pack,content:content}=_c.value;console.log(`PF2e System | Compendium Browser | ${pack.metadata.label} - ${content.length} entries found`);for(let actor of content)if(actor=actor.data,"npc"===actor.type){if(actor.compendium=pack.collection,actor.filters={},actor.filters.level=actor.data.details.level.value,actor.filters.traits=actor.data.traits.traits.value,actor.filters.alignment=actor.data.details.alignment.value,actor.filters.actorSize=actor.data.traits.size.value,actor.data.details.source&&actor.data.details.source.value){const actorSource=actor.data.details.source.value;actorSource.includes("pg.")?actor.filters.source=actorSource.split("pg.")[0].trim():actorSource.includes("page.")?actor.filters.source=actorSource.split("page.")[0].trim():actor.filters.source=actorSource}actor.filters.source&&sources.add(actor.filters.source),bestiaryActors[actor._id]=actor,actor.filters.rarity=actor.data.traits.rarity?actor.data.traits.rarity.value:actor.data.rarity?actor.data.rarity.value:{value:"common"}}console.log(`PF2e System | Compendium Browser | ${pack.metadata.label} - Loaded`)}}catch(e_2_1){e_2={error:e_2_1}}finally{try{_c&&!_c.done&&(_a=_b.return)&&await _a.call(_b)}finally{if(e_2)throw e_2.error}}return console.log("PF2e System | Compendium Browser | Finished loading Bestiary actors"),{bestiaryActors:bestiaryActors,actorSize:CONFIG.PF2E.actorSizes,alignment:CONFIG.PF2E.alignment,traits:_sortedObject(CONFIG.PF2E.monsterTraits),languages:_sortedObject(CONFIG.PF2E.languages),source:[...sources].sort(),rarities:CONFIG.PF2E.rarityTraits}}async loadHazards(){var e_3,_a;console.log("PF2e System | Compendium Browser | Started loading actors");const hazardActors={},sources=new Set,rarities=Object.keys(CONFIG.PF2E.rarityTraits);try{for(var _c,_b=__asyncValues(packLoader.loadPacks("Actor",this._loadedPacks("hazard")));!(_c=await _b.next()).done;){const{pack:pack,content:content}=_c.value;console.log(`PF2e System | Compendium Browser | ${pack.metadata.label} - ${content.length} entries found`);for(let actor of content)if(actor=actor.data,"hazard"===actor.type){if(actor.compendium=pack.collection,actor.filters={},actor.filters.level=actor.data.details.level,actor.filters.traits=actor.data.traits.traits.value,actor.data.details.source&&actor.data.details.source.value){const actorSource=actor.data.details.source.value;actorSource.includes("pg.")?actor.filters.source=actorSource.split("pg.")[0].trim():actorSource.includes("page.")?actor.filters.source=actorSource.split("page.")[0].trim():actor.filters.source=actorSource}actor.filters.complex=actor.data.details.isComplex?"complex":"simple",actor.filters.source&&sources.add(actor.filters.source),hazardActors[actor._id]=actor,actor.filters.rarity=(()=>{if(actor.data.traits.rarity)return actor.data.traits.rarity.value;if(actor.data.rarity)return actor.data.rarity.value;for(const rarity of rarities){const indexOfRarity=actor.data.traits.traits.value.indexOf(rarity);if(indexOfRarity>=0)return actor.data.traits.traits.value[indexOfRarity]}return"common"})()}console.log(`PF2e System | Compendium Browser | ${pack.metadata.label} - Loaded`)}}catch(e_3_1){e_3={error:e_3_1}}finally{try{_c&&!_c.done&&(_a=_b.return)&&await _a.call(_b)}finally{if(e_3)throw e_3.error}}return console.log("PF2e System | Compendium Browser | Finished loading Hazard actors"),{hazardActors:hazardActors,traits:_sortedObject(CONFIG.PF2E.hazardTraits),source:[...sources].sort(),rarities:CONFIG.PF2E.rarityTraits}}async loadEquipment(){var e_4,_a;console.log("PF2e System | Compendium Browser | Started loading feats");const inventoryItems={},itemTypes=["weapon","armor","equipment","consumable","treasure","backpack","kit"];try{for(var _c,_b=__asyncValues(packLoader.loadPacks("Item",this._loadedPacks("equipment")));!(_c=await _b.next()).done;){const{pack:pack,content:content}=_c.value;console.log(`PF2e System | Compendium Browser | ${pack.metadata.label} - ${content.length} entries found`);for(let item of content)item=item.data,itemTypes.includes(item.type)&&(item.compendium=pack.collection,item.data.itemTypes={value:item.type},inventoryItems[item._id]=item,item.data.rarity=item.data.traits.rarity?item.data.traits.rarity:item.data.rarity?item.data.rarity:{value:"common"})}}catch(e_4_1){e_4={error:e_4_1}}finally{try{_c&&!_c.done&&(_a=_b.return)&&await _a.call(_b)}finally{if(e_4)throw e_4.error}}return console.log("PF2e System | Compendium Browser | Finished loading inventory items"),{inventoryItems:inventoryItems,armorTypes:CONFIG.PF2E.armorTypes,armorGroups:CONFIG.PF2E.armorGroups,weaponTraits:_sortedObject(CONFIG.PF2E.weaponTraits),itemTypes:{weapon:"Weapons",armor:"Armor",equipment:"Equipment",consumable:"Consumables",treasure:"Treasure",backpack:"Containers",kit:"Kits"},rarities:CONFIG.PF2E.rarityTraits,weaponTypes:CONFIG.PF2E.weaponTypes,weaponGroups:CONFIG.PF2E.weaponGroups}}async loadFeats(){var e_5,_a;console.log("PF2e System | Compendium Browser | Started loading feats");const feats={},classes=new Set,skills=new Set,ancestries=new Set,times=new Set,ancestryList=Object.keys(CONFIG.PF2E.ancestryTraits);try{for(var _c,_b=__asyncValues(packLoader.loadPacks("Item",this._loadedPacks("feat")));!(_c=await _b.next()).done;){const{pack:pack,content:content}=_c.value;console.log(`PF2e System | Compendium Browser | ${pack.metadata.label} - ${content.length} entries found`);for(let feat of content)if(feat=feat.data,"feat"===feat.type){if(feat.compendium=pack.collection,feat.data.traits.value){const classIntersection=Object.keys(CONFIG.PF2E.classTraits).filter(x=>feat.data.traits.value.includes(x));if(0!==classIntersection.length&&(classes.add(classIntersection.join(",")),feat.data.classes={value:classIntersection}),"ancestry"===feat.data.featType.value){const ancestryIntersection=ancestryList.filter(x=>feat.data.traits.value.includes(x));0!==ancestryIntersection.length&&(ancestries.add(ancestryIntersection.join(",")),feat.data.ancestry={value:ancestryIntersection})}}if("skill"===feat.data.featType.value){const skillList=Object.keys(CONFIG.PF2E.skillList);let prerequisitesArr=feat.data.prerequisites.value.split(" ");prerequisitesArr=prerequisitesArr.map(y=>y.toLowerCase());const skillIntersection=skillList.filter(x=>prerequisitesArr.includes(x));0!==skillIntersection.length&&(skills.add(skillIntersection.join(",")),feat.data.skills={value:skillIntersection})}feat.data.level.formated=parseInt(feat.data.level.value,10);let time="";"reaction"===feat.data.actionType.value?(feat.data.actionType.img=this._getActionImg("reaction"),time="reaction"):"free"===feat.data.actionType.value?(feat.data.actionType.img=this._getActionImg("free"),time="free"):"passive"===feat.data.actionType.value?(feat.data.actionType.img=this._getActionImg("passive"),time="passive"):parseInt(feat.data.actions.value,10)&&(feat.data.actionType.img=this._getActionImg(feat.data.actions.value),time=feat.data.actions.value.toLowerCase()),""!==time&&times.add(time),feats[feat._id]=feat,feat.data.rarity=feat.data.traits.rarity?feat.data.traits.rarity:feat.data.rarity?feat.data.rarity:{value:"common"}}}}catch(e_5_1){e_5={error:e_5_1}}finally{try{_c&&!_c.done&&(_a=_b.return)&&await _a.call(_b)}finally{if(e_5)throw e_5.error}}const classesObj={};for(const classStr of[...classes].sort())classesObj[classStr]=CONFIG.PF2E.classTraits[classStr];const ancestryObj={};for(const ancestryStr of[...ancestries].sort())ancestryObj[ancestryStr]=CONFIG.PF2E.ancestryTraits[ancestryStr];return console.log("PF2e System | Compendium Browser | Finished loading feats"),{feats:feats,featClasses:CONFIG.PF2E.classTraits,featSkills:CONFIG.PF2E.skillList,featAncestry:ancestryObj,featTimes:[...times].sort(),rarities:CONFIG.PF2E.rarityTraits}}async loadSpells(){var e_6,_a;console.log("PF2e System | Compendium Browser | Started loading spells");const spells={},classes=new Set,schools=new Set,times=new Set,classList=Object.keys(CONFIG.PF2E.classTraits);try{for(var _c,_b=__asyncValues(packLoader.loadPacks("Item",this._loadedPacks("spell")));!(_c=await _b.next()).done;){const{pack:pack,content:content}=_c.value;console.log(`PF2e System | Compendium Browser | ${pack.metadata.label} - ${content.length} entries found`);for(let spell of content)if(spell=spell.data,"spell"===spell.type){spell.compendium=pack.collection,0===spell.data.level.value?spell.data.level.formated="C":11===spell.data.level.value?spell.data.level.formated="F":spell.data.level.formated=spell.data.level.value;const classIntersection=classList.filter(x=>spell.data.traits.value.includes(x));if(0!==classIntersection.length&&(classes.add(classIntersection.join(",")),spell.data.classes={value:classIntersection}),void 0!==spell.data.time.value){let time=spell.data.time.value;-1!==time.indexOf("reaction")&&(time="reaction"),times.add(time)}"reaction"===spell.data.time.value?spell.data.time.img=this._getActionImg("reaction"):"free"===spell.data.time.value?spell.data.time.img=this._getActionImg("free"):spell.data.time.img=this._getActionImg(spell.data.time.value),spells[spell._id]=spell,void 0!==spell.data.school.value&&schools.add(spell.data.school.value),spell.data.rarity=spell.data.traits.rarity?spell.data.traits.rarity:spell.data.rarity?spell.data.rarity:{value:"common"}}}}catch(e_6_1){e_6={error:e_6_1}}finally{try{_c&&!_c.done&&(_a=_b.return)&&await _a.call(_b)}finally{if(e_6)throw e_6.error}}const classesObj={};for(const classStr of[...classes].sort())classesObj[classStr]=CONFIG.PF2E.classTraits[classStr];const schoolsObj={};for(const school of[...schools].sort())schoolsObj[school]=CONFIG.PF2E.spellSchools[school];return console.log("PF2e System | Compendium Browser | Finished loading spells"),{classes:classesObj,times:[...times].sort(),schools:schoolsObj,traditions:CONFIG.PF2E.spellTraditions,spells:spells,rarities:CONFIG.PF2E.rarityTraits}}static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:[],template:"systems/pf2e/templates/packs/compendium-browser.html",width:800,height:700,resizable:!1,tabs:[{navSelector:".compendium-navigation",contentSelector:".compendium-content",initial:"landing-page"}]})}get title(){return game.i18n.localize("PF2E.CompendiumBrowser.Title")}activateListeners(html){super.activateListeners(html),this.resetFilters(html),html.on("click",".clear-filters",ev=>{this.resetFilters(html),this.filterSpells(html.find(".tab.active li"))}),html.on("click",".item-edit, .actor-edit",ev=>{const entry=ev.currentTarget.closest(".spell").dataset,id=entry.entryId,compendium=entry.entryCompendium;game.packs.get(compendium).getEntity(id).then(spell=>{spell.sheet.render(!0)})}),html.find(".draggable").each((i,li)=>{li.setAttribute("draggable",!0),li.addEventListener("dragstart",event=>{const packName=li.dataset.entryCompendium,pack=game.packs.find(p=>p.collection===packName);return pack?(event.dataTransfer.setData("text/plain",JSON.stringify({type:pack.entity,pack:pack.collection,id:li.dataset.entryId})),!0):(event.preventDefault(),!1)},!1)}),html.on("click",".filtercontainer h3",ev=>{$(ev.target.nextElementSibling).toggle(100)}),html.on("mousedown","input[name=textFilter]",ev=>{3===ev.which&&$(html.find(".hint")).toggle(100)}),html.on("change","select[name=sortorder]",ev=>{const spellList=html.find(".tab.active li"),byName="true"===ev.target.value,sortedList=this.sortSpells(spellList,byName),ol=$(html.find(".tab.active ul"));ol[0].innerHTML=[];for(const element of sortedList)ol[0].append(element)}),html.on("change paste","input[name=textFilter]",ev=>{this.sorters.text=ev.target.value,this.filterSpells(html.find(".tab.active li"))}),html.on("change","#timefilter select",ev=>{this.sorters.castingtime=ev.target.value,this.filterSpells(html.find(".tab.active li"))}),html.on("click","input[type=checkbox]",ev=>{const filterType=ev.target.name.split(/-(.+)/)[0],filterTarget=ev.target.name.split(/-(.+)/)[1],filterValue=ev.target.checked;Object.keys(this.filters).includes(filterType)&&(this.filters[filterType][filterTarget]=filterValue,this.filters[filterType]=this.clearObject(this.filters[filterType])),this.filterSpells(html.find(".tab.active li"))}),html.on("click","button.save-settings",ev=>{const formData=new FormData(html.find(".compendium-browser-settings form")[0]);for(const[t,packs]of Object.entries(this.settings))for(const[key,pack]of Object.entries(packs))pack.load=formData.has(`${t}-${key}`);game.settings.set("pf2e","compendiumBrowserPacks",JSON.stringify(this.settings))})}hookCompendiumList(){Hooks.on("renderCompendiumDirectory",(app,html,data)=>{if(html.find(".compendium-browser-btn").length)return void console.error("Compendium Browser - Already hooked");const importButton=$('<button class="compendium-browser-btn"><i class="fas fa-fire"></i> Compendium Browser</button>');let target=html.find(".directory-footer");target.length||(target=html.find(".directory-list")),target.append(importButton),importButton.click(ev=>{ev.preventDefault(),this.render(!0)})}),Hooks.on("renderActorDirectory",(app,html,data)=>{if(html.find(".bestiary-browser-btn").length)return void console.error("Compendium Browser - Already hooked");const bestiaryImportButton=$('<button class="bestiary-browser-btn"><i class="fas fa-fire"></i> Bestiary Browser</button>');game.user.isGM&&html.find(".directory-footer").append(bestiaryImportButton),bestiaryImportButton.click(ev=>{ev.preventDefault(),this.openTab("bestiary")})})}clearObject(obj){return Object.fromEntries(Object.entries(obj).filter(([key,value])=>value))}_getActionImg(action){var _a;return null!==(_a={1:"systems/pf2e/icons/actions/OneAction.png",2:"systems/pf2e/icons/actions/TwoActions.png",3:"systems/pf2e/icons/actions/ThreeActions.png","1 or 2":"systems/pf2e/icons/actions/OneTwoActions.png","1 to 3":"systems/pf2e/icons/actions/OneThreeActions.png","2 or 3":"systems/pf2e/icons/actions/TwoThreeActions.png",free:"systems/pf2e/icons/actions/FreeAction.png",reaction:"systems/pf2e/icons/actions/Reaction.png",passive:"systems/pf2e/icons/actions/Passive.png"}[action])&&void 0!==_a?_a:"icons/svg/mystery-man.svg"}getData(){return mergeObject({user:game.user,settings:this.settings},this.data)}async filterSpells(li){let counter=0;li.hide();for(const spell of li)this.getFilterResult(spell)&&($(spell).show(),counter+=1,counter%20==0&&await new Promise(r=>setTimeout(r,0)))}getFilterResult(element){var _a;if(""!==this.sorters.text){const strings=this.sorters.text.split(",");for(const string of strings)if(-1===string.indexOf(":")){if(-1===$(element).find(".spell-name a")[0].innerHTML.toLowerCase().indexOf(string.toLowerCase().trim()))return!1}else{const targetValue=string.split(":")[1].trim(),targetStat=string.split(":")[0].trim();if(!(null===(_a=element.dataset[targetStat])||void 0===_a?void 0:_a.includes(targetValue.toLowerCase())))return!1}}if("null"!==this.sorters.castingtime){if(element.dataset.time!==this.sorters.castingtime)return!1}for(const filter of Object.keys(this.filters))if(Object.keys(this.filters[filter]).length>0){const filteredElements=element.dataset[filter];let hide=!0;if(filteredElements)for(const e of filteredElements.split(","))if(!0===this.filters[filter][e.trim()]){hide=!1;break}if(hide)return!1}return!0}resetFilters(html){this.sorters={text:"",castingtime:"null"},this.filters={level:{},complex:{},classes:{},skills:{},ancestry:{},school:{},traditions:{},armortype:{},group:{},traits:{},itemtypes:{},rarity:{},weapontype:{},proficiencies:{},actorsize:{},alignment:{},source:{},feattype:{}},html.find(".tab.browser input[name=textFilter]").val(""),html.find(".tab.browser input[name=timefilter]").val("null"),html.find(".tab.browser input[type=checkbox]").prop("checked",!1)}sortSpells(list,byName){let mappedList;return mappedList=byName?list.map((i,li)=>({value:$(li).find(".spell-name a")[0].innerHTML,li:li,i:i})):list.map((i,li)=>({value:parseInt(li.dataset.level||-10,10),li:li,i:i})),mappedList.sort((a,b)=>{const aName=a.value,bName=b.value;return aName<bName?-1:aName>bName?1:a.i-b.i}),Array.prototype.map.call(mappedList,({li:li})=>li)}}exports.compendiumBrowser=new CompendiumBrowser},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const spell_1=__importDefault(__webpack_require__(28)),runes_1=__webpack_require__(7),utils_1=__webpack_require__(3),modifiers_1=__webpack_require__(0),dice_1=__webpack_require__(4),actor_1=__importDefault(__webpack_require__(2));class PF2EItem extends Item{async roll(event){const template=`systems/pf2e/templates/chat/${this.data.type}-card.html`,{token:token}=this.actor,contextualData=(event?event.currentTarget.closest(".item"):{}).dataset||{},templateData={actor:this.actor,tokenId:token?`${token.scene._id}.${token.id}`:null,item:this.data,data:this.getChatData(void 0,contextualData)},chatData={user:game.user._id,speaker:{actor:this.actor._id,token:this.actor.token,alias:this.actor.name},type:CONST.CHAT_MESSAGE_TYPES.OTHER},rollMode=game.settings.get("core","rollMode");return["gmroll","blindroll"].includes(rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM").map(u=>u._id)),"blindroll"===rollMode&&(chatData.blind=!0),chatData.content=await renderTemplate(template,templateData),ChatMessage.create(chatData,{displaySheet:!1})}getChatData(htmlOptions,rollOptions){const data=this[`_${this.data.type}ChatData`](rollOptions);return data&&(data.description.value=TextEditor.enrichHTML(data.description.value,htmlOptions)),data}getSpellInfo(){return this._spellChatData()}_armorChatData(){const localize=game.i18n.localize.bind(game.i18n),data=duplicate(this.data.data),properties=[CONFIG.PF2E.armorTypes[data.armorType.value],CONFIG.PF2E.armorGroups[data.group.value],`${utils_1.addSign(runes_1.getArmorBonus(data))} ${localize("PF2E.ArmorArmorLabel")}`,`${data.dex.value||0} ${localize("PF2E.ArmorDexLabel")}`,`${data.check.value||0} ${localize("PF2E.ArmorCheckLabel")}`,`${data.speed.value||0} ${localize("PF2E.ArmorSpeedLabel")}`,data.traits.value,data.equipped.value?localize("PF2E.ArmorEquippedLabel"):null];return data.properties=properties.filter(p=>null!==p),data.traits=null,data}_equipmentChatData(){const data=duplicate(this.data.data),properties=[data.equipped.value?game.i18n.localize("PF2E.EquipmentEquippedLabel"):null];return data.properties=properties.filter(p=>null!==p),data}_weaponChatData(){var _a,_b,_c,_d,_e,_f;const data=duplicate(this.data.data),actorData=this.actor.data,traits=[],itemTraits=data.traits.value;let twohandedTrait=!1;if("weapon"!==this.data.type)throw new Error("tried to create a weapon chat data for a non-weapon item");if(0!==(data.traits.value||[]).length)for(let i=0;i<data.traits.value.length;i++){const traitsObject={label:CONFIG.PF2E.weaponTraits[data.traits.value[i]]||data.traits.value[i].charAt(0).toUpperCase()+data.traits.value[i].slice(1),description:CONFIG.PF2E.traitsDescriptions[data.traits.value[i]]||""};traits.push(traitsObject),itemTraits[i].match("(\\btwo-hand\\b)-(d\\d+)")&&(twohandedTrait=!0)}const isFinesse=(data.traits.value||[]).includes("finesse"),abl=isFinesse&&actorData.data.abilities.dex.mod>actorData.data.abilities.str.mod?"dex":data.ability.value||"str",prof=data.weaponType.value||"simple",proficiency={type:"default",value:0};if(Object.keys(CONFIG.PF2E.weaponTypes).includes(prof))proficiency.type="martial",proficiency.value=(null===(_b=null===(_a=actorData.data.martial)||void 0===_a?void 0:_a[prof])||void 0===_b?void 0:_b.value)||0;else try{const martialSkill=this.actor.getOwnedItem(prof);if("martial"===martialSkill.data.type){proficiency.type="skill";const rank=(null===(_c=martialSkill.data.data.proficient)||void 0===_c?void 0:_c.value)||0;proficiency.value=modifiers_1.ProficiencyModifier.fromLevelAndRank(this.actor.data.data.details.level.value,rank).modifier}}catch(err){console.log("PF2E | Could not find martial skill for "+prof)}data.proficiency=proficiency,data.attackRoll=runes_1.getAttackBonus(data)+(null!==(_f=null===(_e=null===(_d=actorData.data.abilities)||void 0===_d?void 0:_d[abl])||void 0===_e?void 0:_e.mod)&&void 0!==_f?_f:0)+proficiency.value;data.group.value&&(data.critSpecialization={label:CONFIG.PF2E.weaponGroups[data.group.value],description:CONFIG.PF2E.weaponDescriptions[data.group.value]}),data.isTwohanded=!!twohandedTrait,data.wieldedTwoHands=!!data.hands.value,data.isFinesse=isFinesse,data.properties=[].filter(p=>!!p),data.traits=traits.filter(p=>!!p);const map=this.calculateMap();return data.map2=map.map2,data.map3=map.map3,data}_meleeChatData(){const data=duplicate(this.data.data),traits=[];if(0!==(data.traits.value||[]).length)for(let i=0;i<data.traits.value.length;i++){const traitsObject={label:CONFIG.PF2E.weaponTraits[data.traits.value[i]]||data.traits.value[i].charAt(0).toUpperCase()+data.traits.value[i].slice(1),description:CONFIG.PF2E.traitsDescriptions[data.traits.value[i]]||""};traits.push(traitsObject)}const isAgile=(data.traits.value||[]).includes("agile");return data.map2=isAgile?"-4":"-5",data.map3=isAgile?"-8":"-10",data.traits=traits.filter(p=>!!p),data}_consumableChatData(){const localize=game.i18n.localize.bind(game.i18n),data=duplicate(this.data.data);return data.consumableType.str=CONFIG.PF2E.consumableTypes[data.consumableType.value],data.properties=[data.consumableType.str,`${data.charges.value}/${data.charges.max} ${localize("PF2E.ConsumableChargesLabel")}`],data.hasCharges=data.charges.value>=0,data}_treasureChatData(){return duplicate(this.data.data)}_toolChatData(){const data=duplicate(this.data.data),abl=this.actor.data.data.abilities[data.ability.value].label,prof=data.proficient.value||0,properties=[abl,CONFIG.PF2E.proficiencyLevels[prof]];return data.properties=properties.filter(p=>null!==p),data}_loreChatData(){const data=duplicate(this.data.data);if("npc"!==this.actor.data.type){const abl=this.actor.data.data.abilities[data.ability.value].label,prof=data.proficient.value||0,properties=[abl,CONFIG.PF2E.proficiencyLevels[prof]];data.properties=properties.filter(p=>null!==p)}return data}_backpackChatData(){const data=duplicate(this.data.data);return data.properties=[],data}_spellChatData(rollOptions){var _a;const localize=game.i18n.localize.bind(game.i18n),data=duplicate(this.data.data),spellcastingEntry=this.actor.getOwnedItem(data.location.value);if(null===spellcastingEntry||"spellcastingEntry"!==spellcastingEntry.data.type)return{};const spellDC=spellcastingEntry.data.data.spelldc.dc,spellAttack=spellcastingEntry.data.data.spelldc.value;data.isSave="save"===data.spellType.value,data.isSave?data.save.dc=spellDC:data.save.dc=spellAttack,data.save.str=data.save.value?CONFIG.PF2E.saves[data.save.value.toLowerCase()]:"",data.damageLabel="heal"===data.spellType.value?localize("PF2E.SpellTypeHeal"):localize("PF2E.DamageLabel"),data.isAttack="attack"===data.spellType.value;const props=[CONFIG.PF2E.spellLevels[data.level.value],`${localize("PF2E.SpellComponentsLabel")}: ${data.components.value}`,data.range.value?`${localize("PF2E.SpellRangeLabel")}: ${data.range.value}`:null,data.target.value?`${localize("PF2E.SpellTargetLabel")}: ${data.target.value}`:null,data.area.value?`${localize("PF2E.SpellAreaLabel")}: ${CONFIG.PF2E.areaSizes[data.area.value]} ${CONFIG.PF2E.areaTypes[data.area.areaType]}`:null,(null===(_a=data.areasize)||void 0===_a?void 0:_a.value)?`${localize("PF2E.SpellAreaLabel")}: ${data.areasize.value}`:null,data.time.value?`${localize("PF2E.SpellTimeLabel")}: ${data.time.value}`:null,data.duration.value?`${localize("PF2E.SpellDurationLabel")}: ${data.duration.value}`:null];data.spellLvl=(rollOptions||{}).spellLvl,data.level.value<parseInt(data.spellLvl,10)&&props.push("Heightened: +"+(parseInt(data.spellLvl,10)-data.level.value)),data.properties=props.filter(p=>null!==p);const traits=[];if(0!==(data.traits.value||[]).length)for(let i=0;i<data.traits.value.length;i++){const traitsObject={label:data.traits.value[i].charAt(0).toUpperCase()+data.traits.value[i].substr(1),description:CONFIG.PF2E.traitsDescriptions[data.traits.value[i]]||""};traits.push(traitsObject)}return data.traits=traits.filter(p=>p),data}_featChatData(){const data=duplicate(this.data.data),props=["Level "+(data.level.value||0),data.actionType.value?CONFIG.PF2E.actionTypes[data.actionType.value]:null];data.properties=props.filter(p=>p);const traits=[];if(0!==(data.traits.value||[]).length)for(let i=0;i<data.traits.value.length;i++){const traitsObject={label:CONFIG.PF2E.featTraits[data.traits.value[i]]||data.traits.value[i].charAt(0).toUpperCase()+data.traits.value[i].slice(1),description:CONFIG.PF2E.traitsDescriptions[data.traits.value[i]]||""};traits.push(traitsObject)}return data.traits=traits.filter(p=>p),data}_actionChatData(){const data=duplicate(this.data.data);let associatedWeapon=null;data.weapon.value&&(associatedWeapon=this.actor.getOwnedItem(data.weapon.value));const props=[CONFIG.PF2E.actionTypes[data.actionType.value],associatedWeapon?associatedWeapon.name:null];data.properties=props.filter(p=>p);const traits=[];if(0!==(data.traits.value||[]).length)for(let i=0;i<data.traits.value.length;i++){const traitsObject={label:CONFIG.PF2E.featTraits[data.traits.value[i]]||data.traits.value[i].charAt(0).toUpperCase()+data.traits.value[i].slice(1),description:CONFIG.PF2E.traitsDescriptions[data.traits.value[i]]||""};traits.push(traitsObject)}return data.traits=traits.filter(p=>p),data}_conditionChatData(){const data=duplicate(this.data.data);return data.properties=[],data}_effectChatData(){const data=duplicate(this.data.data);return data.properties=[],data}rollWeaponAttack(event,multiAttackPenalty){if("action"===this.type)throw new Error("Wrong item type!");if("weapon"!==this.type&&"melee"!==this.type)throw new Error("Wrong item type!");const itemData=this.getChatData(),rollData=duplicate(this.actor.data.data),abl=itemData.isFinesse&&rollData.abilities.dex.mod>rollData.abilities.str.mod?"dex":itemData.ability.value||"str",prof=itemData.weaponType.value||"simple";let parts=["@itemBonus",`@abilities.${abl}.mod`];const title=`${this.name} - Attack Roll${multiAttackPenalty>1?` (MAP ${multiAttackPenalty})`:""}`;"npc"===this.actor.data.type?parts=["@itemBonus"]:itemData.proficiency&&"skill"===itemData.proficiency.type?parts.push(itemData.proficiency.value):parts.push(`@martial.${prof}.value`),rollData.item=itemData,rollData.itemBonus=runes_1.getAttackBonus(itemData),2===multiAttackPenalty?parts.push(itemData.map2):3===multiAttackPenalty&&parts.push(itemData.map3),dice_1.DicePF2e.d20Roll({event:event,parts:parts,actor:this.actor,data:rollData,rollType:"attack-roll",title:title,speaker:ChatMessage.getSpeaker({actor:this.actor}),dialogOptions:{width:400,top:event?event.clientY-80:400,left:window.innerWidth-710}})}rollWeaponDamage(event,critical=!1){var _a;const localize=game.i18n.localize.bind(game.i18n);if("weapon"!==this.data.type)throw new Error("Wrong item type!");const itemData=this.data.data,rollData=duplicate(this.actor.data.data);let rollDie=itemData.damage.die;let abilityMod=rollData.abilities.str.mod,parts=[];const partsCritOnly=[],dtype=CONFIG.PF2E.damageTypes[itemData.damage.damageType],traits=itemData.traits.value||[];let critTrait="",critDie="",bonusDamage=0,twohandedTrait=!1,twohandedDie="",thrownTrait=!1;const len=traits.length,critRegex="(\\bdeadly\\b|\\bfatal\\b)-(d\\d+)",hasThiefRacket=this.actor.data.items.filter(e=>"feat"===e.type&&"Thief Racket"===e.name).length>0,strikingDice=runes_1.getStrikingDice(itemData);hasThiefRacket&&rollData.abilities.dex.mod>abilityMod&&(abilityMod=rollData.abilities.dex.mod);for(let i=0;i<len;i++)traits[i].match(critRegex)?(critTrait=traits[i].match(critRegex)[1],critDie=traits[i].match(critRegex)[2]):traits[i].match("(\\btwo-hand\\b)-(d\\d+)")?(twohandedTrait=!0,twohandedDie=traits[i].match("(\\btwo-hand\\b)-(d\\d+)")[2]):traits[i].match("(\\bthrown\\b)-(\\d+)")&&(thrownTrait=!0);twohandedTrait&&itemData.hands.value&&(rollDie=twohandedDie),itemData.bonusDamage&&itemData.bonusDamage.value&&(bonusDamage=parseInt(itemData.bonusDamage.value,10));const damageDice=null!==(_a=itemData.damage.dice)&&void 0!==_a?_a:1;let weaponDamage=damageDice+strikingDice+rollDie;if(parts=[weaponDamage,"@itemBonus"],rollData.itemBonus=bonusDamage,"deadly"===critTrait){const deadlyDamage=(strikingDice>0?strikingDice:1)+critDie;partsCritOnly.push(deadlyDamage)}else"fatal"===critTrait&&(!0===critical&&(weaponDamage=damageDice+strikingDice+critDie,parts=[weaponDamage,"@itemBonus"]),partsCritOnly.push(1+critDie));if("melee"===itemData.range.value||"reach"===itemData.range.value||""===itemData.range.value)parts.push(abilityMod);else if((itemData.traits.value||[]).includes("propulsive")){if(1===Math.sign(this.actor.data.data.abilities.str.mod)){const halfStr=Math.floor(this.actor.data.data.abilities.str.mod/2);parts.push(halfStr)}}else thrownTrait&&parts.push(abilityMod);if(itemData.property1.dice&&itemData.property1.die&&itemData.property1.damageType){const propertyDamage=Number(itemData.property1.dice)+itemData.property1.die;parts.push(propertyDamage)}if(itemData.property1.critDice&&itemData.property1.critDie&&itemData.property1.critDamageType){const propertyDamage=Number(itemData.property1.critDice)+itemData.property1.critDie;partsCritOnly.push(propertyDamage)}const critTitle=critTrait?critTrait.toUpperCase():"";let title=critical?`${localize("PF2E.CriticalDamageLabel")} ${critTitle} ${localize("PF2E.DamageLabel")}: ${this.name}`:`${localize("PF2E.DamageLabel")}: ${this.name}`;dtype&&(title+=` (${dtype})`),rollData.item=itemData,dice_1.DicePF2e.damageRoll({event:event,parts:parts,partsCritOnly:partsCritOnly,critical:critical,actor:this.actor,data:rollData,title:title,speaker:ChatMessage.getSpeaker({actor:this.actor}),dialogOptions:{width:400,top:event.clientY-80,left:window.innerWidth-710}})}rollNPCAttack(event,multiAttackPenalty){if("melee"!==this.type)throw new Error("Wrong item type!");const itemData=this.getChatData(),rollData=duplicate(this.actor.data.data),parts=["@itemBonus"],title=`${this.name} - Attack Roll${multiAttackPenalty>1?` (MAP ${multiAttackPenalty})`:""}`;rollData.item=itemData,rollData.itemBonus=itemData.bonus.value,2===multiAttackPenalty?parts.push(itemData.map2):3===multiAttackPenalty&&parts.push(itemData.map3),dice_1.DicePF2e.d20Roll({event:event,parts:parts,actor:this.actor,data:rollData,rollType:"attack-roll",title:title,speaker:ChatMessage.getSpeaker({actor:this.actor}),dialogOptions:{width:400,top:event?event.clientY-80:400,left:window.innerWidth-710}})}rollNPCDamage(event,critical=!1){if("melee"!==this.data.type)throw new Error("Wrong item type!");const itemData=this.data.data,rollData=duplicate(this.actor.data.data);let parts=[];const partsType=[],dtype=[];itemData.damageRolls&&"object"==typeof itemData.damageRolls?Object.keys(itemData.damageRolls).forEach(key=>{itemData.damageRolls[key].damage&&parts.push(itemData.damageRolls[key].damage),partsType.push(`${itemData.damageRolls[key].damage} ${itemData.damageRolls[key].damageType}`)}):itemData.damageRolls&&itemData.damageRolls.length?itemData.damageRolls.forEach(entry=>{parts.push(entry.damage),partsType.push(`${entry.damage} ${entry.damageType}`)}):parts=[itemData.damage.die];let title=`${this.name}: ${partsType.join(", ")}`;dtype.length&&(title+=` (${dtype})`),0===parts.length&&(console.log("PF2e System | No damage parts provided in damage roll"),parts=["0"]),rollData.item=itemData,dice_1.DicePF2e.damageRoll({event:event,parts:parts,critical:critical,actor:this.actor,data:rollData,title:title,speaker:ChatMessage.getSpeaker({actor:this.actor}),dialogOptions:{width:400,top:event.clientY-80,left:window.innerWidth-710}})}rollSpellcastingEntryCheck(event){const itemData=this.data;if("spellcastingEntry"!==itemData.type)throw new Error("Wrong item type!");const rollData=duplicate(this.actor.data.data),parts=[itemData.data.spelldc.value],title=this.name+" - Spellcasting Check";dice_1.DicePF2e.d20Roll({event:event,parts:parts,data:rollData,title:title,speaker:ChatMessage.getSpeaker({actor:this.actor}),dialogOptions:{width:400,top:event.clientY-80,left:window.innerWidth-710}})}rollSpellAttack(event,multiAttackPenalty){if("spell"!==this.data.type)throw new Error("Wrong item type!");const itemData=this.data.data,rollData=duplicate(this.actor.data.data),spellcastingEntry=this.actor.getOwnedItem(itemData.location.value);if("spellcastingEntry"!==spellcastingEntry.data.type)throw new Error("Spell points to location that is not a spellcasting type");const parts=[spellcastingEntry.data.data.spelldc.value],title=this.name+" - Spell Attack Roll",map=this.calculateMap();2===multiAttackPenalty?parts.push(map.map2):3===multiAttackPenalty&&parts.push(map.map3),dice_1.DicePF2e.d20Roll({event:event,parts:parts,data:rollData,rollType:"attack-roll",title:title,speaker:ChatMessage.getSpeaker({actor:this.actor}),dialogOptions:{width:400,top:event.clientY-80,left:window.innerWidth-710}})}rollSpellDamage(event){if("spell"!==this.data.type)throw new Error("Wrong item type!");const localize=game.i18n.localize.bind(game.i18n),card=event.currentTarget.closest("*[data-spell-lvl]"),cardData=card?card.dataset:{},itemData=this.data.data,rollData=duplicate(this.actor.data.data),isHeal="heal"===itemData.spellType.value,dtype=CONFIG.PF2E.damageTypes[itemData.damageType.value],spellLvl=parseInt(cardData.spellLvl,10),spell=new spell_1.default(this.data,{castingActor:this.actor,castLevel:spellLvl}),parts=spell.damageParts,damageLabel=localize(isHeal?"PF2E.SpellTypeHeal":"PF2E.DamageLabel");let title=`${this.name} - ${damageLabel}`;dtype&&!isHeal&&(title+=` (${dtype})`),rollData.mod=rollData.abilities[spell.spellcastingEntry.ability].mod,rollData.item=itemData,dice_1.DicePF2e.damageRoll({event:event,parts:parts,data:rollData,actor:this.actor,title:title,speaker:ChatMessage.getSpeaker({actor:this.actor}),dialogOptions:{width:400,top:event.clientY-80,left:window.innerWidth-710}})}rollConsumable(ev){if("consumable"!==this.data.type)throw new Error("Tried to roll consumable on a non-consumable");const itemData=this.data.data,cv=itemData.consume.value,content="Uses "+this.name;if(cv?new Roll(cv).toMessage({speaker:ChatMessage.getSpeaker({actor:this.actor}),flavor:content}):ChatMessage.create({user:game.user._id,speaker:ChatMessage.getSpeaker({actor:this.actor}),content:content}),itemData.autoUse.value){const qty=itemData.quantity,chg=itemData.charges;if(chg.value<=1&&qty.value>1){const options={_id:this.data._id,"data.quantity.value":Math.max(qty.value-1,0),"data.charges.value":chg.max};this.actor.updateEmbeddedEntity("OwnedItem",options)}else chg.value<=1&&qty.value<=1&&itemData.autoDestroy.value?this.actor.deleteEmbeddedEntity("OwnedItem",this.data._id):this.actor.updateEmbeddedEntity("OwnedItem",{_id:this.data._id,"data.charges.value":Math.max(chg.value-1,0)})}}calculateMap(){return PF2EItem.calculateMap(this.data)}static calculateMap(item){if("weapon"===item.type){const agile=(item.data.traits.value||[]).includes("agile");switch((item.data.MAP||{}).value){case"1":return{map2:-1,map3:-2};case"2":return{map2:-2,map3:-4};case"3":return{map2:-3,map3:-6};case"4":return{map2:-4,map3:-8};case"5":return{map2:-5,map3:-10};default:return agile?{map2:-4,map3:-8}:{map2:-5,map3:-10}}}return{map2:-5,map3:-10}}static chatListeners(html){html.on("click",".card-buttons button",ev=>{ev.preventDefault();const button=$(ev.currentTarget),messageId=button.parents(".message").attr("data-message-id"),senderId=game.messages.get(messageId).user._id,card=button.parents(".chat-card");if(!game.user.isGM&&game.user._id!==senderId)return;let actor;const tokenKey=card.attr("data-token-id");if(tokenKey){const[sceneId,tokenId]=tokenKey.split(".");let token;if(sceneId===canvas.scene._id)token=canvas.tokens.get(tokenId);else{const scene=game.scenes.get(sceneId);if(!scene)return;const tokenData=scene.data.tokens.find(t=>t._id===tokenId);tokenData&&(token=new Token(tokenData))}if(!token)return;actor=Actor.fromToken(token)}else actor=game.actors.get(card.attr("data-actor-id"));const action=button.attr("data-action");if(!actor)return;const itemId=card.attr("data-item-id"),itemData=(actor.getOwnedItem(itemId)||{}).data;if(itemData){const item=new PF2EItem(itemData,{actor:actor});return void("weaponAttack"===action?item.rollWeaponAttack(ev):"weaponAttack2"===action?item.rollWeaponAttack(ev,2):"weaponAttack3"===action?item.rollWeaponAttack(ev,3):"weaponDamage"===action?item.rollWeaponDamage(ev):"weaponDamageCritical"===action?item.rollWeaponDamage(ev,!0):"npcAttack"===action?item.rollNPCAttack(ev):"npcAttack2"===action?item.rollNPCAttack(ev,2):"npcAttack3"===action?item.rollNPCAttack(ev,3):"npcDamage"===action?item.rollNPCDamage(ev):"npcDamageCritical"===action?item.rollNPCDamage(ev,!0):"criticalDamage"===action?item.rollWeaponDamage(ev,!0):"spellAttack"===action?item.rollSpellAttack(ev):"spellAttack2"===action?item.rollSpellAttack(ev,2):"spellAttack3"===action?item.rollSpellAttack(ev,3):"spellDamage"===action?item.rollSpellDamage(ev):"consume"===action?item.rollConsumable(ev):"save"===action&&actor_1.default.rollSave(ev,item))}const strikeIndex=card.attr("data-strike-index"),strikeName=card.attr("data-strike-name"),strikeAction=actor.data.data.actions[Number(strikeIndex)];if(strikeAction&&strikeAction.name===strikeName){const opts=actor.getRollOptions(["all","attack-roll"]);"strikeAttack"===action?strikeAction.variants[0].roll(ev,opts):"strikeAttack2"===action?strikeAction.variants[1].roll(ev,opts):"strikeAttack3"===action?strikeAction.variants[2].roll(ev,opts):"strikeDamage"===action?strikeAction.damage(ev,opts):"strikeCritical"===action&&strikeAction.critical(ev,opts)}})}}exports.default=PF2EItem},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const conditions_1=__webpack_require__(5);exports.PF2eStatus=class{constructor(statusName,source,value=1,active=!0){this.status=statusName,this.active=active,this.source=source,void 0!==getProperty(PF2e.DB.condition,this.status)?this.type="condition":void 0!==getProperty(PF2e.DB.status,this.status)&&(this.type="status"),void 0!==this.type&&void 0!==getProperty(PF2e.DB[this.type][this.status],"hasValue")&&(this.value=value)}get db(){if(void 0!==this.type)return getProperty(PF2e.DB[this.type],this.status)}};class PF2eStatusEffects{static init(){if(CONFIG.PF2E.PF2eStatusEffects.overruledByModule)return;console.log("PF2e System | Initializing Status Effects Module"),this.hookIntoFoundry();try{void 0!==game.modules.get("combat-utility-belt")&&game.modules.get("combat-utility-belt").active&&game.settings.get("combat-utility-belt","enableEnhancedConditions")&&ui.notifications.info("<strong>PF2e System & Combat Utility Belt</strong><div>You have the CUB module enabled. This may\n                cause unexpected side effects with the PF2e system at the moment, but this is expected to improve in future releases. If\n                you are experiencing problems with status effects, we recommend you disable CUB's Enhanced Conditions on the Module\n                settings.</div>",{permanent:!0})}catch(_a){ui.notifications.error("The Combat Utility Belt installation check failed. This may cause unexptected side effects with the PF2e system conditions.",{permanent:!0})}const statusEffectType=game.settings.get("pf2e","statusEffectType");CONFIG.PF2eStatusEffects.lastIconType=statusEffectType,CONFIG.PF2eStatusEffects.effectsIconFolder=PF2eStatusEffects.SETTINGOPTIONS.iconTypes[statusEffectType].effectsIconFolder,CONFIG.PF2eStatusEffects.effectsIconFileType=PF2eStatusEffects.SETTINGOPTIONS.iconTypes[statusEffectType].effectsIconFileType,CONFIG.PF2eStatusEffects.foundryStatusEffects=CONFIG.statusEffects,CONFIG.PF2eStatusEffects.keepFoundryStatusEffects=game.settings.get("pf2e","statusEffectKeepFoundry"),this._updateStatusIcons()}static get SETTINGOPTIONS(){return{iconTypes:{default:{effectsIconFolder:"systems/pf2e/icons/conditions/",effectsIconFileType:"png"},blackWhite:{effectsIconFolder:"systems/pf2e/icons/conditions-2/",effectsIconFileType:"png"},legacy:{effectsIconFolder:"systems/pf2e/icons/conditions-3/",effectsIconFileType:"png"}}}}static hookIntoFoundry(){const statusEffectTypeChoices={};for(const type of Object.keys(PF2eStatusEffects.SETTINGOPTIONS.iconTypes))statusEffectTypeChoices[type]=PF2e.DB.SETTINGS.statusEffectType[type];if(game.settings.register("pf2e","statusEffectType",{name:PF2e.DB.SETTINGS.statusEffectType.name,hint:PF2e.DB.SETTINGS.statusEffectType.hint,scope:"world",config:!0,default:"blackWhite",type:String,choices:statusEffectTypeChoices,onChange:s=>{PF2eStatusEffects._migrateStatusEffectUrls(s)}}),game.settings.register("pf2e","statusEffectKeepFoundry",{name:PF2e.DB.SETTINGS.statusEffectKeepFoundry.name,hint:PF2e.DB.SETTINGS.statusEffectKeepFoundry.hint,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>{window.location.reload(!1)}}),game.user.isGM&&game.settings.register("pf2e","statusEffectShowCombatMessage",{name:PF2e.DB.SETTINGS.statusEffectShowCombatMessage.name,hint:PF2e.DB.SETTINGS.statusEffectShowCombatMessage.hint,scope:"client",config:!0,default:!0,type:Boolean,onChange:()=>{window.location.reload(!1)}}),Hooks.on("renderTokenHUD",(app,html,data)=>{console.log("PF2e System | Rendering PF2e customized status effects"),PF2eStatusEffects._hookOnRenderTokenHUD(app,html,data)}),Hooks.on("onTokenHUDClear",(tokenHUD,token)=>{var _a,_b;token=tokenHUD.token,tokenHUD._state===(null===(_b=null===(_a=null==tokenHUD?void 0:tokenHUD.constructor)||void 0===_a?void 0:_a.RENDER_STATES)||void 0===_b?void 0:_b.NONE)&&!0===(null==token?void 0:token.statusEffectChanged)&&(console.log("PF2e System | StatusEffects were updated - Message to chat"),token.statusEffectChanged=!1,PF2eStatusEffects._createChatMessage(token))}),game.user.isGM&&game.settings.get("pf2e","statusEffectShowCombatMessage")){let lastTokenId="";Hooks.on("updateCombat",combat=>{const combatant=null==combat?void 0:combat.combatant,tokenId=null==combatant?void 0:combatant.tokenId;if(tokenId!==lastTokenId&&(null==combat?void 0:combat.started)&&(null==combatant?void 0:combatant.hasRolled)&&!(null==combatant?void 0:combatant.defeated)){const token=canvas.tokens.get(tokenId);lastTokenId=tokenId,this._createChatMessage(token,combatant.hidden)}(null==combat?void 0:combat.started)||""===lastTokenId||(lastTokenId="")})}Hooks.on("createToken",(scene,token,options,someId)=>{console.log("PF2e System | Updating the new token with the actors status effects"),PF2eStatusEffects._hookOnCreateToken(scene,token)}),Hooks.on("canvasReady",canvas=>{console.log("PF2e System | Updating the scenes token with the actors status effects"),PF2eStatusEffects._hookOnCanvasReady(canvas)})}static setPF2eStatusEffectControls(html,token){const effects=html.find(".status-effects");effects.on("click",".pf2e-effect-control",this._setStatusValue.bind(token)).on("contextmenu",".pf2e-effect-control",this._setStatusValue.bind(token)).on("mouseover mouseout",".pf2e-effect-control",this._showStatusDescr),effects.off("click",".effect-control").on("click",".effect-control",this._toggleStatus.bind(token)),effects.off("contextmenu",".effect-control").on("contextmenu",".effect-control",this._toggleStatus.bind(token)).on("mouseover mouseout",".effect-control",this._showStatusDescr)}static _updateStatusIcons(){const effects=[];Array.from(conditions_1.PF2eConditionManager.conditions.values()).filter(c=>"detection"!==c.data.group&&"attitudes"!==c.data.group).sort((a,b)=>a.name.localeCompare(b.name)).forEach(c=>{effects.push(`${CONFIG.PF2eStatusEffects.effectsIconFolder}${c.data.hud.statusName}.${CONFIG.PF2eStatusEffects.effectsIconFileType}`)}),CONFIG.statusEffects=CONFIG.PF2eStatusEffects.keepFoundryStatusEffects?effects.concat(CONFIG.PF2eStatusEffects.foundryStatusEffects):effects}static async _hookOnRenderTokenHUD(app,html,tokenData){const token=canvas.tokens.get(tokenData._id),statusIcons=html.find("img.effect-control"),affectingConditions=token.actor.data.items.filter(i=>{var _a;return(null===(_a=i.flags.pf2e)||void 0===_a?void 0:_a.condition)&&"condition"===i.type&&i.data.active&&i.data.sources.hud});html.find("div.status-effects").append('<div class="status-effect-summary"></div>'),this.setPF2eStatusEffectControls(html,token),app.token=token;for(let i of statusIcons){i=$(i);const src=i.attr("src");if(src.includes(CONFIG.PF2eStatusEffects.effectsIconFolder)){const statusName=this._getStatusFromImg(src),condition=conditions_1.PF2eConditionManager.getConditionByStatusName(statusName);i.attr("data-effect",statusName),i.attr("data-condition",condition.name);const effect=affectingConditions.find(e=>e.data.hud.statusName===statusName);if(condition.data.value.isValued){i.removeClass("effect-control").addClass("pf2e-effect-control"),i.wrap("<div class='pf2e-effect-img-container'></div>");const v=$("<div class='pf2e-effect-value' style='display:none'>0</div>");i.parent().append(v),void 0!==effect&&(i.attr("data-value",effect.data.value.value),effect.data.value.value>0&&$(v).removeAttr("style").text(effect.data.value.value))}i.hasClass("active")&&void 0===effect?i.removeClass("active"):i.hasClass("active")||void 0===effect||i.addClass("active")}}}static async _updateHUD(html,token){const statusIcons=html.find("img.effect-control, img.pf2e-effect-control"),appliedConditions=token.actor.data.items.filter(i=>{var _a;return(null===(_a=i.flags.pf2e)||void 0===_a?void 0:_a.condition)&&"condition"===i.type&&i.data.active&&i.data.sources.hud});for(let i of statusIcons){i=$(i);const status=i.attr("data-effect"),conditionName=i.attr("data-condition");if(conditionName){const condition=appliedConditions.find(e=>e.name===conditionName),conditionBase=conditions_1.PF2eConditionManager.getConditionByStatusName(status);if(null==conditionBase?void 0:conditionBase.data.value.isValued){const v=$(i).siblings("div.pf2e-effect-value").first();$(i).hasClass("active")?void 0===condition||void 0!==condition&&!condition.data.active||void 0!==condition&&condition.data.value.value<1?(i.removeClass("active"),v.attr("style","display:none").text("0")):void 0!==condition&&condition.data.value.value>0&&v.text(condition.data.value.value):void 0!==condition&&condition.data.active&&condition.data.value.value>0&&(i.addClass("active"),v.removeAttr("style").text(condition.data.value.value))}else i.hasClass("active")?(void 0===condition||void 0!==condition&&!condition.data.active)&&i.removeClass("active"):void 0!==condition&&condition.data.active&&i.addClass("active")}}}static _showStatusDescr(event){const f=$(event.currentTarget),statusDescr=$("div.status-effect-summary");if(f.attr("src").includes(CONFIG.PF2eStatusEffects.effectsIconFolder)){const statusName=f.attr("data-effect");statusDescr.text(PF2e.DB.condition[statusName].name).toggleClass("active")}}static _hookOnCreateToken(scene,tokenData){canvas.tokens.get(tokenData._id).owner&&conditions_1.PF2eConditionManager.renderEffects(canvas.tokens.get(tokenData._id))}static _hookOnCanvasReady(canvas){const scene=canvas.scene;for(const tokenData of scene.data.tokens){canvas.tokens.get(tokenData._id).owner&&conditions_1.PF2eConditionManager.renderEffects(canvas.tokens.get(tokenData._id))}}static async _setStatusValue(event){event.preventDefault();const token=this;if(event.shiftKey)return void PF2eStatusEffects._onToggleOverlay(event,token);const f=$(event.currentTarget),status=f.attr("data-condition"),condition=token.actor.data.items.find(i=>{var _a;return(null===(_a=i.flags.pf2e)||void 0===_a?void 0:_a.condition)&&"condition"===i.type&&i.name===status&&i.data.sources.hud&&void 0===i.data.references.parent});if("contextmenu"===event.type)if(event.ctrlKey){const conditionIds=[];token.statusEffectChanged=!0,token.actor.data.items.filter(i=>{var _a;return(null===(_a=i.flags.pf2e)||void 0===_a?void 0:_a.condition)&&"condition"===i.type&&i.data.base===status}).forEach(i=>conditionIds.push(i._id)),await conditions_1.PF2eConditionManager.removeConditionFromToken(conditionIds,token)}else condition&&(token.statusEffectChanged=!0,await conditions_1.PF2eConditionManager.updateConditionValue(condition._id,token,condition.data.value.value-1),token.data.actorLink&&PF2eStatusEffects._updateHUD(f.parent().parent(),token));else if("click"===event.type)if(token.statusEffectChanged=!0,condition)await conditions_1.PF2eConditionManager.updateConditionValue(condition._id,token,condition.data.value.value+1),token.data.actorLink&&PF2eStatusEffects._updateHUD(f.parent().parent(),token);else{const newCondition=conditions_1.PF2eConditionManager.getCondition(status);newCondition.data.sources.hud=!0,await conditions_1.PF2eConditionManager.addConditionToToken(newCondition,token)}}static async _toggleStatus(event){event.preventDefault();const token=this;if(event.shiftKey)return void PF2eStatusEffects._onToggleOverlay(event,token);const status=$(event.currentTarget).attr("data-condition"),condition=token.actor.data.items.find(i=>{var _a;return(null===(_a=i.flags.pf2e)||void 0===_a?void 0:_a.condition)&&"condition"===i.type&&i.name===status&&i.data.sources.hud&&void 0===i.data.references.parent}),conditionIds=[];if("contextmenu"===event.type)event.ctrlKey?token.actor.data.items.filter(i=>{var _a;return(null===(_a=i.flags.pf2e)||void 0===_a?void 0:_a.condition)&&"condition"===i.type&&i.data.base===status}).forEach(i=>conditionIds.push(i._id)):condition&&conditionIds.push(condition._id),conditionIds.length>0&&(token.statusEffectChanged=!0,await conditions_1.PF2eConditionManager.removeConditionFromToken(conditionIds,token));else if("click"===event.type&&!condition){const newCondition=conditions_1.PF2eConditionManager.getCondition(status);newCondition.data.sources.hud=!0,token.statusEffectChanged=!0,await conditions_1.PF2eConditionManager.addConditionToToken(newCondition,token)}}static _onToggleOverlay(event,token){event.preventDefault();const f=$(event.currentTarget);token.toggleOverlay(f.attr("src")),f.siblings().removeClass("overlay"),f.toggleClass("overlay")}static _createChatMessage(token,whisper=!1){let statusEffectList="",bubbleContent="";for(const condition of token.actor.data.items.filter(i=>{var _a;return(null===(_a=i.flags.pf2e)||void 0===_a?void 0:_a.condition)&&i.data.active&&"condition"===i.type}))statusEffectList+=`\n                <li><img src="${CONFIG.PF2eStatusEffects.effectsIconFolder+condition.data.hud.statusName}.${CONFIG.PF2eStatusEffects.effectsIconFileType}" title="${PF2e.DB.condition[condition.data.hud.statusName].summary}">\n                    <span class="statuseffect-li">\n                        <span class="statuseffect-li-text">${condition.name} ${condition.data.value.isValued?condition.data.value.value:""}</span>\n                        <div class="statuseffect-rules"><h2>${condition.name}</h2>${condition.data.description.value}</div>\n                    </span>\n                </li>`,bubbleContent=bubbleContent+PF2e.DB.condition[condition.data.hud.statusName].summary+".<br>";if(""===statusEffectList)return;const message=`\n            <div class="dice-roll">\n                <div class="dice-result">\n                    <div class="dice-total statuseffect-message">\n                        <ul>${statusEffectList}</ul>\n                    </div>\n                </div>\n            </div>\n        `,chatData={user:game.user._id,speaker:{alias:token.name+"'s status effects:"},content:message,type:CONST.CHAT_MESSAGE_TYPES.OTHER};whisper&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),ChatMessage.create(chatData),token.data.hidden||(bubbleContent=PF2eStatusEffects._changeYouToI(bubbleContent),canvas.hud.bubbles.say(token,bubbleContent,{emote:!0}))}static async _migrateStatusEffectUrls(chosenSetting){if(CONFIG.PF2E.PF2eStatusEffects.overruledByModule)return console.log("PF2e System | The PF2eStatusEffect icons are overruled by a module"),void ui.notifications.error("Changing this setting has no effect, as the icon types are overruled by a module.",{permanent:!0});console.log("PF2e System | Changing status effect icon types");const iconType=PF2eStatusEffects.SETTINGOPTIONS.iconTypes[chosenSetting],lastIconType=PF2eStatusEffects.SETTINGOPTIONS.iconTypes[CONFIG.PF2eStatusEffects.lastIconType],promises=[];for(const scene of game.scenes.values()){const tokenUpdates=[];for(const tokenData of scene.data.tokens){const update=duplicate(tokenData);for(const url of tokenData.effects)if(url.includes(lastIconType.effectsIconFolder)){const statusName=this._getStatusFromImg(url),newUrl=`${iconType.effectsIconFolder+statusName}.${iconType.effectsIconFileType}`;console.log(`PF2e System | Migrating effect ${statusName} of Token ${tokenData.name} on scene ${scene.data.name} | '${url}' to '${newUrl}'`);const index=update.effects.indexOf(url);index>-1&&update.effects.splice(index,1,newUrl)}tokenUpdates.push(update)}promises.push(scene.updateEmbeddedEntity("Token",tokenUpdates))}await Promise.all(promises),CONFIG.PF2eStatusEffects.effectsIconFolder=iconType.effectsIconFolder,CONFIG.PF2eStatusEffects.effectsIconFileType=iconType.effectsIconFileType,CONFIG.PF2eStatusEffects.lastIconType=chosenSetting,PF2eStatusEffects._updateStatusIcons()}static _changeYouToI(content){return content=(content=(content=(content=(content=(content=(content=(content=(content=(content=(content=(content=(content=(content=content.replace(/you’re/g,"I’m")).replace(/You’re/g,"I’m")).replace(/Your/g,"My")).replace(/your/g,"my")).replace(/You are/g,"I am")).replace(/you are/g,"I am")).replace(/You can’t/g,"I can’t")).replace(/you can’t/g,"I can’t")).replace(/You can/g,"I can")).replace(/you can/g,"I can")).replace(/You have/g,"I have")).replace(/you have/g,"I have")).replace(/You/g,"I")).replace(/you/g,"me")}static _getStatusFromImg(url){return url.substring(url.lastIndexOf("/")+1,url.length-CONFIG.PF2eStatusEffects.effectsIconFileType.length-1)}static async setStatus(token,effects=[]){for(const status of Object.values(effects)){const statusName=status.name,value=status.value,source=status.source?status.source:"PF2eStatusEffects.setStatus",condition=conditions_1.PF2eConditionManager.getConditionByStatusName(statusName);if(!condition){console.log(`PF2e System | '${statusName}' is not a vaild condition!`);continue}const effect=token.actor.data.items.find(i=>i.data.source.value===source&&"condition"===i.type&&i.data.hud.statusName===statusName);if("string"==typeof value&&condition.data.value.isValued)if(effect){let newValue=0;if(newValue=value.startsWith("+")||value.startsWith("-")?Number(effect.data.value.value)+Number(value):Number(value),Number.isNaN(newValue)){console.log(`PF2e System | '${value}' is not a number!`);continue}await conditions_1.PF2eConditionManager.updateConditionValue(effect._id,token,newValue)}else Number(value)>0&&(condition.data.source.value=source,condition.data.value.value=Number(value),await conditions_1.PF2eConditionManager.addConditionToToken(condition,token));else if(!value){if(condition.data.value.isValued){console.log(`PF2e System | '${statusName}' must have a value.`);continue}void 0!==effect&&status.toggle?await conditions_1.PF2eConditionManager.removeConditionFromToken([effect._id],token):void 0===effect&&(condition.data.source.value=source,await conditions_1.PF2eConditionManager.addConditionToToken(condition,token))}}this._createChatMessage(token)}}exports.PF2eStatusEffects=PF2eStatusEffects,TokenHUD.prototype.clear=function(){BasePlaceableHUD.prototype.clear.call(this),Hooks.call("onTokenHUDClear",this,this.object)},Hooks.once("ready",async()=>{await conditions_1.PF2eConditionManager.init(),PF2eStatusEffects.init()})},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const utils_1=__webpack_require__(3);exports.DamageCategory=Object.freeze({PHYSICAL:"physical",ENERGY:"energy",ALIGNMENT:"alignment",fromDamageType:damageType=>exports.CUSTOM_DAMAGE_TYPES_TO_CATEGORIES[damageType]||exports.BASE_DAMAGE_TYPES_TO_CATEGORIES[damageType]||damageType,addCustomDamageType:(category,type)=>{exports.CUSTOM_DAMAGE_TYPES_TO_CATEGORIES[type]=category},removeCustomDamageType:type=>delete exports.CUSTOM_DAMAGE_TYPES_TO_CATEGORIES[type],allCategories:()=>new Set([].concat(Object.values(exports.BASE_DAMAGE_TYPES_TO_CATEGORIES)).concat(Object.values(exports.CUSTOM_DAMAGE_TYPES_TO_CATEGORIES))),baseCategories:()=>new Set(Object.values(exports.BASE_DAMAGE_TYPES_TO_CATEGORIES)),customCategories:()=>{const result=new Set(Object.values(exports.CUSTOM_DAMAGE_TYPES_TO_CATEGORIES));for(const base of exports.DamageCategory.baseCategories())result.delete(base);return result},currentTypeMappings:()=>utils_1.combineObjects(exports.BASE_DAMAGE_TYPES_TO_CATEGORIES,exports.CUSTOM_DAMAGE_TYPES_TO_CATEGORIES,(first,second)=>second),toDamageTypes:category=>{const types=Object.entries(exports.DamageCategory.currentTypeMappings()).filter(([key,value])=>value===category).map(([key,value])=>key);return new Set(types)},clearCustom:()=>Object.keys(exports.CUSTOM_DAMAGE_TYPES_TO_CATEGORIES).forEach(key=>{delete exports.CUSTOM_DAMAGE_TYPES_TO_CATEGORIES[key]})}),exports.BASE_DAMAGE_TYPES_TO_CATEGORIES=Object.freeze({bludgeoning:exports.DamageCategory.PHYSICAL,piercing:exports.DamageCategory.PHYSICAL,slashing:exports.DamageCategory.PHYSICAL,acid:exports.DamageCategory.ENERGY,cold:exports.DamageCategory.ENERGY,electricity:exports.DamageCategory.ENERGY,fire:exports.DamageCategory.ENERGY,sonic:exports.DamageCategory.ENERGY,positive:exports.DamageCategory.ENERGY,negative:exports.DamageCategory.ENERGY,force:exports.DamageCategory.ENERGY,chaotic:exports.DamageCategory.ALIGNMENT,evil:exports.DamageCategory.ALIGNMENT,good:exports.DamageCategory.ALIGNMENT,lawful:exports.DamageCategory.ALIGNMENT}),exports.CUSTOM_DAMAGE_TYPES_TO_CATEGORIES={}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const check_modifiers_dialog_1=__webpack_require__(33),damage_roll_modifiers_dialog_1=__webpack_require__(34),modifiers_1=__webpack_require__(0);exports.PF2Check=class{static roll(check,context={},event,callback){var _a;(null===(_a=null==context?void 0:context.options)||void 0===_a?void 0:_a.length)>0&&(check.modifiers.forEach(modifier=>{modifier.ignored=!modifiers_1.PF2ModifierPredicate.test(modifier.predicate,context.options)}),check.applyStackingRules(),context.options.map(o=>o.toLowerCase()).includes("secret")&&(context.secret=!0));((game.user.data.flags.PF2e||{}).settings||{}).quickD20roll!==event.shiftKey?check_modifiers_dialog_1.CheckModifiersDialog.roll(check,context,callback):new check_modifiers_dialog_1.CheckModifiersDialog(check,context,callback).render(!0)}static async rerollFromMessage(message,{heroPoint:heroPoint=!1,keep:keep="new"}={}){if(!message.isAuthor&&!game.user.isGM)return void ui.notifications.error(game.i18n.localize("PF2E.RerollMenu.ErrorCantDelete"));const actor=game.actors.get(message.data.speaker.actor);let rerollFlavor=game.i18n.localize("PF2E.RerollMenu.MessageKeep."+keep);if(heroPoint){if(!actor)return void ui.notifications.error(game.i18n.localize("PF2E.RerollMenu.ErrorNoActor"));{const heroPointCount=actor.data.data.attributes.heroPoints.rank;if(!heroPointCount)return void ui.notifications.warn(game.i18n.format("PF2E.RerollMenu.WarnNoHeroPoint",{name:actor.name}));await actor.update({"data.attributes.heroPoints.rank":Math.clamped(heroPointCount-1,0,3)}),rerollFlavor=game.i18n.format("PF2E.RerollMenu.MessageHeroPoint",{name:actor.name})}}await message.delete();const oldRoll=message.roll,newRoll=oldRoll.reroll();let keepRoll=newRoll,[oldRollClass,newRollClass]=["pf2e-reroll-discard",""];("best"===keep&&oldRoll.total>newRoll.total||"worst"===keep&&oldRoll.total<newRoll.total)&&([oldRollClass,newRollClass]=[newRollClass,oldRollClass],keepRoll=oldRoll);const newMessage=await ChatMessage.create({roll:keepRoll,content:`<div class="${oldRollClass}">${await oldRoll.render()}</div><div class='pf2e-reroll-second ${newRollClass}'>${await newRoll.render()}</div>`,flavor:`<i class='fa fa-dice pf2e-reroll-indicator' title="${rerollFlavor}"></i>${message.data.flavor}`,sound:CONFIG.sounds.dice,speaker:message.data.speaker},{});await newMessage.setFlag("pf2e","canReroll",!1)}};exports.PF2DamageRoll=class{static roll(damage,context={},event,callback){var _a;(null===(_a=null==context?void 0:context.options)||void 0===_a?void 0:_a.length)>0&&context.options.map(o=>o.toLowerCase()).includes("secret")&&(context.secret=!0),damage_roll_modifiers_dialog_1.DamageRollModifiersDialog.roll(damage,context,callback)}}},function(module,exports,__webpack_require__){"use strict";function isPhysicalItem(item){return"data"in item&&"quantity"in item.data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.isPhysicalItem=isPhysicalItem,exports.assertPhysicalItem=function(item,error){if(!isPhysicalItem(item))throw Error(error)}},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const treasure_1=__webpack_require__(8),modifiers_1=__webpack_require__(0),base_1=__importDefault(__webpack_require__(11));class ActorSheetPF2eCreature extends base_1.default{_renderItemSummary(li,item,chatData){super._renderItemSummary(li,item,chatData);const div=li.find(".item-summary"),buttons=$('<div class="item-buttons"></div>');switch(item.data.type){case"action":chatData.weapon.value&&chatData.weapon.value&&(buttons.append(`<button class="weapon_attack tag" data-action="weaponAttack">${game.i18n.localize("PF2E.WeaponStrikeLabel")}</button>`),buttons.append('<button class="tag weapon_attack2" data-action="weaponAttack2">2</button>'),buttons.append('<button class="tag weapon_attack3" data-action="weaponAttack3">3</button>'),buttons.append(`<button class="tag weapon_damage" data-action="weaponDamage">${game.i18n.localize("PF2E.DamageLabel")}</button>`));break;case"weapon":chatData.isTwohanded&&(chatData.wieldedTwoHands?buttons.append('<span class="tag"><button data-action="toggleHands"><i class="far fa-hand-paper"></i><i class="far fa-hand-paper"></i></button></span>'):buttons.append('<span class="tag"><button data-action="toggleHands"><i class="far fa-hand-paper"></i></button></span>')),buttons.append(`<button class="weapon_attack tag" data-action="weaponAttack">${game.i18n.localize("PF2E.WeaponStrikeLabel")} (+${chatData.attackRoll})</button>`),buttons.append(`<button class="tag weapon_attack2" data-action="weaponAttack2">${chatData.map2}</button>`),buttons.append(`<button class="tag weapon_attack3" data-action="weaponAttack3">${chatData.map3}</button>`),buttons.append(`<button class="tag weapon_damage" data-action="weaponDamage">${game.i18n.localize("PF2E.DamageLabel")}</button>`),buttons.append(`<button class="tag weapon_critical" data-action="weaponDamageCritical">${game.i18n.localize("PF2E.CriticalDamageLabel")}</button>`);break;case"spell":chatData.isSave&&buttons.append(`<span class="tag">${game.i18n.localize("PF2E.SaveDCLabel")} ${chatData.save.dc} ${chatData.save.basic} ${chatData.save.str}</span>`),chatData.isAttack&&buttons.append(`<span class="tag"><button class="spell_attack" data-action="spellAttack">${game.i18n.localize("PF2E.AttackLabel")}</button></span>`),item.data.data.damage.value&&buttons.append(`<span class="tag"><button class="spell_damage" data-action="spellDamage">${chatData.damageLabel}: ${item.data.data.damage.value}</button></span>`);break;case"consumable":chatData.hasCharges&&buttons.append(`<span class="tag"><button class="consume" data-action="consume">${game.i18n.localize("PF2E.ConsumableUseLabel")} ${item.name}</button></span>`)}div.append(buttons),buttons.find("button").click(ev=>{switch(ev.preventDefault(),ev.stopPropagation(),ev.target.dataset.action){case"toggleHands":"weapon"===item.data.type&&(item.data.data.hands.value=!item.data.data.hands.value,this.actor.updateEmbeddedEntity("OwnedItem",item.data),this._render());break;case"weaponAttack":item.rollWeaponAttack(ev);break;case"weaponAttack2":item.rollWeaponAttack(ev,2);break;case"weaponAttack3":item.rollWeaponAttack(ev,3);break;case"weaponDamage":item.rollWeaponDamage(ev);break;case"weaponDamageCritical":item.rollWeaponDamage(ev,!0);break;case"spellAttack":item.rollSpellAttack(ev);break;case"spellDamage":item.rollSpellDamage(ev);break;case"consume":item.rollConsumable(ev)}})}getData(){var _a;const sheetData=super.getData();if(void 0!==sheetData.data.martial)for(const[s,skl]of Object.entries(sheetData.data.martial))skl.icon=this._getProficiencyIcon(skl.rank),skl.hover=CONFIG.PF2E.proficiencyLevels[skl.rank],skl.label=CONFIG.PF2E.martialSkills[s],skl.value=modifiers_1.ProficiencyModifier.fromLevelAndRank(sheetData.data.details.level.value,skl.rank||0).modifier;if(void 0!==sheetData.data.saves)for(const[s,save]of Object.entries(sheetData.data.saves))save.icon=this._getProficiencyIcon(save.rank),save.hover=CONFIG.PF2E.proficiencyLevels[save.rank],save.label=CONFIG.PF2E.saves[s];if(void 0!==sheetData.data.attributes&&(sheetData.data.attributes.perception.icon=this._getProficiencyIcon(sheetData.data.attributes.perception.rank),sheetData.data.attributes.perception.hover=CONFIG.PF2E.proficiencyLevels[sheetData.data.attributes.perception.rank]),void 0!==sheetData.data.abilities)for(const[a,abl]of Object.entries(sheetData.data.abilities))abl.label=CONFIG.PF2E.abilities[a];if(void 0!==sheetData.data.skills)for(const[s,skl]of Object.entries(sheetData.data.skills))skl.icon=this._getProficiencyIcon(skl.rank),skl.hover=CONFIG.PF2E.proficiencyLevels[skl.rank],skl.label=null!==(_a=skl.label)&&void 0!==_a?_a:CONFIG.PF2E.skills[s];if(void 0!==sheetData.actor.items){const treasure=treasure_1.calculateWealth(sheetData.actor.items);sheetData.totalTreasure={};for(const[denomination,value]of Object.entries(treasure))sheetData.totalTreasure[denomination]={value:value,label:CONFIG.PF2E.currencies[denomination]}}return sheetData.abilities=CONFIG.PF2E.abilities,sheetData.skills=CONFIG.PF2E.skills,sheetData.actorSizes=CONFIG.PF2E.actorSizes,sheetData.alignment=CONFIG.PF2E.alignment,sheetData.rarity=CONFIG.PF2E.rarityTraits,sheetData.pfsFactions=CONFIG.PF2E.pfsFactions,sheetData}}exports.default=ActorSheetPF2eCreature},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.addKit=async function(kitData,createItems){const rootItemData=await async function getKitItemData(kitData){return(await Promise.all(Object.values(kitData.items).map(async item=>{var _a,_b;let itemData;if(item.pack){const pack=game.packs.get(item.pack);itemData=await pack.getEntry(item.id)}else itemData=duplicate(null===(_a=await game.items.get(item.id))||void 0===_a?void 0:_a.data);if(!itemData)return console.warn(`PF2E Kit: ${null!==(_b=item.pack)&&void 0!==_b?_b:"World Item"} ${item.id} (${item.name}) not found`),[];if("kit"===itemData.type)return getKitItemData(itemData.data);itemData.data.quantity.value=item.quantity;return[[itemData,(await getKitItemData(item)).map(([i])=>i)]]}))).flat()}(kitData.data),potentialContainers=await createItems(rootItemData.map(([itemData])=>itemData)),containedItemData=rootItemData.map(([itemData,items],i)=>[items,potentialContainers[i]]).flatMap(([items,containerId])=>items.map(itemData=>(itemData.data.containerId.value=containerId,itemData)));await createItems(containedItemData)}},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const creature_1=__importDefault(__webpack_require__(18)),actor_1=__webpack_require__(2);class ActorSheetPF2eNPC extends creature_1.default{static get defaultOptions(){const options=super.defaultOptions;return mergeObject(options,{classes:options.classes.concat(["pf2e","actor","npc-sheet"]),width:650,height:680,showUnpreparedSpells:!0}),options}get template(){return"systems/pf2e/templates/actors/npc-sheet.html"}getData(){const sheetData=super.getData();return sheetData.monsterTraits=CONFIG.PF2E.monsterTraits,sheetData}_prepareItems(actorData){const attacks={melee:{label:"NPC Melee Attack",prefix:"PF2E.NPCAttackMelee",items:[],type:"melee"},ranged:{label:"NPC Ranged Attack",prefix:"PF2E.NPCAttackRanged",items:[],type:"melee"}},actions={action:{label:"Actions",actions:[]},reaction:{label:"Reactions",actions:[]},free:{label:"Free Actions",actions:[]},passive:{label:"Passive Actions",actions:[]}},tempSpellbook=[],spellcastingEntriesList=[],spellbooks=[];spellbooks.unassigned={};const spellcastingEntries=[],lores=[];for(const i of actorData.items)if(i.img=i.img||CONST.DEFAULT_TOKEN,"spell"===i.type)tempSpellbook.push(i);else if("spellcastingEntry"===i.type)spellcastingEntriesList.push(i._id),"prepared"===(i.data.prepared||{}).value?i.data.prepared.preparedSpells=!0:i.data.prepared.preparedSpells=!1,"ritual"===(i.data.tradition||{}).value?i.data.tradition.ritual=!0:i.data.tradition.ritual=!1,spellcastingEntries.push(i);else if("weapon"===i.type);else if("melee"===i.type){const weaponType=(i.data.weaponType||{}).value||"melee",isAgile=(i.data.traits.value||[]).includes("agile");i.data.bonus.total=parseInt(i.data.bonus.value,10)||0,i.data.isAgile=isAgile;const traits=[];if(0!==(i.data.traits.value||[]).length)for(let j=0;j<i.data.traits.value.length;j++){const traitsObject={label:CONFIG.PF2E.weaponTraits[i.data.traits.value[j]]||i.data.traits.value[j].charAt(0).toUpperCase()+i.data.traits.value[j].slice(1),description:CONFIG.PF2E.traitsDescriptions[i.data.traits.value[j]]||""};traits.push(traitsObject)}i.traits=traits.filter(p=>!!p),attacks[weaponType].items.push(i)}else if("action"===i.type){const actionType=i.data.actionType.value||"action";let actionImg=0;"action"===actionType?actionImg=parseInt((i.data.actions||{}).value,10)||1:"reaction"===actionType?actionImg="reaction":"free"===actionType?actionImg="free":"passive"===actionType&&(actionImg="passive"),i.img=this._getActionImg(actionImg);const traits=[];if(0!==(i.data.traits.value||[]).length)for(let j=0;j<i.data.traits.value.length;j++){const traitsObject={label:CONFIG.PF2E.weaponTraits[i.data.traits.value[j]]||i.data.traits.value[j].charAt(0).toUpperCase()+i.data.traits.value[j].slice(1),description:CONFIG.PF2E.traitsDescriptions[i.data.traits.value[j]]||""};traits.push(traitsObject)}i.data.actionType.value&&traits.push({label:CONFIG.PF2E.weaponTraits[i.data.actionType.value]||i.data.actionType.value.charAt(0).toUpperCase()+i.data.actionType.value.slice(1),description:CONFIG.PF2E.traitsDescriptions[i.data.actionType.value]||""}),i.traits=traits.filter(p=>!!p),actions[actionType].actions.push(i)}else if("feat"===i.type){const actionType=i.data.actionType.value||"passive";if(Object.keys(actions).includes(actionType)){i.feat=!0;let actionImg=0;"action"===actionType?actionImg=parseInt((i.data.actions||{}).value,10)||1:"reaction"===actionType?actionImg="reaction":"free"===actionType&&(actionImg="free"),i.img=this._getActionImg(actionImg),actions[actionType].actions.push(i)}}else"lore"===i.type&&lores.push(i);const embeddedEntityUpdate=[];for(const i of tempSpellbook){const spellType=i.data.time.value;if("reaction"===spellType?i.img=this._getActionImg("reaction"):"free"===spellType?i.img=this._getActionImg("free"):parseInt(spellType,10)&&(i.img=this._getActionImg(parseInt(spellType,10))),spellcastingEntriesList.includes(i.data.location.value)){const location=i.data.location.value;spellbooks[location]=spellbooks[location]||{},this._prepareSpell(actorData,spellbooks[location],i)}else if(1===spellcastingEntriesList.length){const location=spellcastingEntriesList[0];spellbooks[location]=spellbooks[location]||{},embeddedEntityUpdate.push({_id:i._id,"data.location.value":spellcastingEntriesList[0]}),this._prepareSpell(actorData,spellbooks[location],i)}else this._prepareSpell(actorData,spellbooks.unassigned,i)}embeddedEntityUpdate.length&&(console.log("PF2e System | Prepare Actor Data | Updating location for the following embedded entities: ",embeddedEntityUpdate),this.actor.updateEmbeddedEntity("OwnedItem",embeddedEntityUpdate),ui.notifications.info("PF2e actor data migration for orphaned spells applied. Please close actor and open again for changes to take affect.")),actorData.actions=actions,actorData.attacks=attacks,actorData.lores=lores,Object.keys(spellbooks.unassigned).length&&(actorData.orphanedSpells=!0,actorData.orphanedSpellbook=spellbooks.unassigned);for(const entry of spellcastingEntries)entry.data.prepared.preparedSpells&&spellbooks[entry._id]&&this._preparedSpellSlots(entry,spellbooks[entry._id]),entry.spellbook=spellbooks[entry._id];actorData.spellcastingEntries=spellcastingEntries}activateListeners(html){super.activateListeners(html),html.find("button").click(ev=>{ev.preventDefault(),ev.stopPropagation();const itemId=$(ev.currentTarget).parents(".item").attr("data-item-id"),item=this.actor.getOwnedItem(itemId);switch(ev.target.dataset.action){case"weaponAttack":item.rollWeaponAttack(ev);break;case"weaponAttack2":item.rollWeaponAttack(ev,2);break;case"weaponAttack3":item.rollWeaponAttack(ev,3);break;case"weaponDamage":item.rollWeaponDamage(ev);break;case"weaponDamageCritical":item.rollWeaponDamage(ev,!0);break;case"npcAttack":item.rollNPCAttack(ev);break;case"npcAttack2":item.rollNPCAttack(ev,2);break;case"npcAttack3":item.rollNPCAttack(ev,3);break;case"npcDamage":item.rollNPCDamage(ev);break;case"npcDamageCritical":item.rollNPCDamage(ev,!0);break;case"spellAttack":item.rollSpellAttack(ev);break;case"spellDamage":item.rollSpellDamage(ev);break;case"consume":item.rollConsumable(ev);break;default:throw new Error("Unknown action type")}}),this.options.editable&&(html.find(".item .npc-skill-name").click(event=>{var _a,_b;event.preventDefault();const shortform=$(event.currentTarget).parents(".item").attr("data-skill"),opts=this.actor.getRollOptions(["all","skill-check",null!==(_a=actor_1.SKILL_DICTIONARY[shortform])&&void 0!==_a?_a:shortform]);null===(_b=this.actor.data.data.skills[shortform])||void 0===_b||_b.roll(event,opts)}),html.find(".skill-input").change(async event=>{const itemId=event.target.attributes["data-item-id"].value;await this.actor.updateEmbeddedEntity("OwnedItem",{_id:itemId,"data.mod.value":Number(event.target.value)})}),html.find(".spelldc-input").change(async event=>{event.preventDefault();const itemId=$(event.currentTarget).parents(".item-container").attr("data-container-id"),spelldcType=$(event.currentTarget).parents(".npc-defense").attr("data-spelldc-attribute");if("dc"===spelldcType||"value"===spelldcType){const options={_id:itemId};options["data.spelldc."+spelldcType]=Number(event.target.value),await this.actor.updateEmbeddedEntity("OwnedItem",options)}}))}}exports.default=ActorSheetPF2eNPC},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}},__importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)Object.hasOwnProperty.call(mod,k)&&(result[k]=mod[k]);return result.default=mod,result};Object.defineProperty(exports,"__esModule",{value:!0});const config_1=__webpack_require__(22),settings_1=__importDefault(__webpack_require__(23)),templates_1=__importDefault(__webpack_require__(25)),combat_1=__webpack_require__(26),handlebars_1=__importDefault(__webpack_require__(27)),item_1=__importDefault(__webpack_require__(13)),actor_1=__importDefault(__webpack_require__(2)),playerconfig_1=__webpack_require__(47),pf2e_system_1=__webpack_require__(48),register_actors_1=__importDefault(__webpack_require__(51)),register_sheets_1=__webpack_require__(61),PF2eCombatTracker_1=__importDefault(__webpack_require__(64)),rolls_1=__webpack_require__(16),migrations=__importStar(__webpack_require__(65)),dice_1=__webpack_require__(4),statusEffects_1=__webpack_require__(14),conditions_1=__webpack_require__(5);function _updateMinionActors(master){game.actors.entities.filter(actor=>["familiar"].includes(actor.data.type)).filter(minion=>{var _a,_b;return!!(null===(_b=null===(_a=minion.data.data)||void 0===_a?void 0:_a.master)||void 0===_b?void 0:_b.id)}).filter(minion=>!master||minion.data.data.master.id===master.data._id).forEach(minion=>minion.update({"data.master.updated":(new Date).toISOString()}))}__webpack_require__(66),__webpack_require__(67),__webpack_require__(14),__webpack_require__(4),__webpack_require__(68),__webpack_require__(69),__webpack_require__(70),__webpack_require__(71),Hooks.once("init",()=>{console.log("PF2e | Initializing Pathfinder 2nd Edition System"),CONFIG.PF2E=config_1.CONFIG;for(const k in CONFIG.PF2E)Object.prototype.hasOwnProperty.call(CONFIG.PF2E,k)&&(CONFIG[k]=CONFIG.PF2E[k]);CONFIG.Item.entityClass=item_1.default,CONFIG.Actor.entityClass=actor_1.default,CONFIG.Combat.initiative.decimals=1,CONFIG.ui.combat=PF2eCombatTracker_1.default,playerconfig_1.PlayerConfigPF2e.hookOnRenderSettings(),settings_1.default(),templates_1.default(),register_actors_1.default(),register_sheets_1.registerSheets(),handlebars_1.default(),Combat.prototype._getInitiativeFormula=combat_1.initiativeFormula,window.DicePF2e=dice_1.DicePF2e,window.PF2eStatusEffects=statusEffects_1.PF2eStatusEffects,window.PF2eConditionManager=conditions_1.PF2eConditionManager}),Hooks.once("ready",()=>{playerconfig_1.PlayerConfigPF2e.init(),playerconfig_1.PlayerConfigPF2e.activateColorScheme(),_updateMinionActors()}),Hooks.once("setup",()=>{window.PF2e=new pf2e_system_1.PF2eSystem;const toLocalize=["abilities","skills","martialSkills","currencies","saves","armorTraits","preciousMaterialGrades","armorPotencyRunes","armorResiliencyRunes","armorPropertyRunes","weaponPotencyRunes","weaponStrikingRunes","weaponPropertyRunes","damageTypes","weaponDamage","healingTypes","weaponTypes","weaponGroups","consumableTraits","weaponDescriptions","weaponTraits","traitsDescriptions","weaponHands","equipmentTraits","itemBonuses","damageDie","weaponRange","weaponMAP","weaponReload","armorTypes","armorGroups","consumableTypes","magicTraditions","preparationType","spellTraits","featTraits","areaTypes","areaSizes","classTraits","ancestryTraits","alignment","skillList","spellComponents","spellTypes","spellTraditions","spellSchools","spellLevels","featTypes","featActionTypes","actionTypes","actionTypes","actionsNumber","actionCategories","proficiencyLevels","heroPointLevels","actorSizes","bulkTypes","conditionTypes","immunityTypes","resistanceTypes","weaknessTypes","languages","monsterTraits","spellScalingModes","attackEffects","hazardTraits","attributes","speedTypes","senses","preciousMaterials"];for(const o of toLocalize)CONFIG.PF2E[o]=Object.entries(CONFIG.PF2E[o]).reduce((obj,e)=>(obj[e[0]]=game.i18n.localize(e[1]),obj),{})}),Hooks.once("ready",()=>{const currentVersion=game.settings.get("pf2e","worldSchemaVersion");(currentVersion<Number(game.system.data.schema)||null===currentVersion)&&game.user.isGM&&(currentVersion&&currentVersion<.411&&ui.notifications.error("Your PF2E system data is from too old a Foundry version and cannot be reliably migrated to the latest version. The process will be attempted, but errors may occur.",{permanent:!0}),migrations.migrateWorld())}),Hooks.on("renderChatLog",(log,html)=>item_1.default.chatListeners(html)),Hooks.on("getChatLogEntryContext",(html,options)=>{const canApplyDamage=li=>{const{messageId:messageId}=li.data(),message=game.messages.get(messageId);return canvas.tokens.controlled.length&&message.isRoll&&message.data&&message.data.flavor&&message.data.flavor.includes("Damage")},canReroll=li=>{const message=game.messages.get(li.data("messageId")),actorId=message.data.speaker.actor;if(message.getFlag("pf2e","canReroll")&&actorId){return game.actors.get(actorId).owner&&(message.isAuthor||game.user.isGM)}return!1};return options.push({name:"Apply Damage",icon:'<i class="fas fa-user-minus"></i>',condition:canApplyDamage,callback:li=>actor_1.default.applyDamage(li,1)},{name:"Apply Healing",icon:'<i class="fas fa-user-plus"></i>',condition:li=>{const{messageId:messageId}=li.data(),message=game.messages.get(messageId);return canvas.tokens.controlled.length&&message.isRoll&&message.data&&message.data.flavor&&message.data.flavor.includes("Healing")},callback:li=>actor_1.default.applyDamage(li,-1)},{name:"Double Damage",icon:'<i class="fas fa-user-injured"></i>',condition:canApplyDamage,callback:li=>actor_1.default.applyDamage(li,2)},{name:"Half Damage",icon:'<i class="fas fa-user-shield"></i>',condition:canApplyDamage,callback:li=>actor_1.default.applyDamage(li,.5)},{name:"Set as Initiative",icon:'<i class="fas fa-fist-raised"></i>',condition:li=>{var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k;const{messageId:messageId}=li.data(),message=game.messages.get(messageId),validActor=null!==(_e="npc"===(null===(_d=null===(_c=null===(_b=null===(_a=canvas.tokens.controlled)||void 0===_a?void 0:_a[0])||void 0===_b?void 0:_b.actor)||void 0===_c?void 0:_c.data)||void 0===_d?void 0:_d.type))&&void 0!==_e&&_e,validRollType=null!==(_k=(null===(_g=null===(_f=null==message?void 0:message.data)||void 0===_f?void 0:_f.flavor)||void 0===_g?void 0:_g.includes("Skill Check"))||(null===(_j=null===(_h=null==message?void 0:message.data)||void 0===_h?void 0:_h.flavor)||void 0===_j?void 0:_j.includes("Perception Check")))&&void 0!==_k&&_k;return validActor&&message.isRoll&&validRollType},callback:li=>actor_1.default.setCombatantInitiative(li)},{name:"PF2E.RerollMenu.HeroPoint",icon:'<i class="fas fa-hospital-symbol"></i>',condition:li=>{var _a;const message=game.messages.get(li.data("messageId")),actorId=message.data.speaker.actor;if(message.getFlag("pf2e","canReroll")&&actorId){const actor=game.actors.get(actorId);return actor.owner&&(null===(_a=actor.data.data.attributes.heroPoints)||void 0===_a?void 0:_a.rank)>=1&&(message.isAuthor||game.user.isGM)}return!1},callback:li=>rolls_1.PF2Check.rerollFromMessage(game.messages.get(li.data("messageId")),{heroPoint:!0})},{name:"PF2E.RerollMenu.KeepNew",icon:'<i class="fas fa-dice"></i>',condition:canReroll,callback:li=>rolls_1.PF2Check.rerollFromMessage(game.messages.get(li.data("messageId")))},{name:"PF2E.RerollMenu.KeepWorst",icon:'<i class="fas fa-dice-one"></i>',condition:canReroll,callback:li=>rolls_1.PF2Check.rerollFromMessage(game.messages.get(li.data("messageId")),{keep:"worst"})},{name:"PF2E.RerollMenu.KeepBest",icon:'<i class="fas fa-dice-six"></i>',condition:canReroll,callback:li=>rolls_1.PF2Check.rerollFromMessage(game.messages.get(li.data("messageId")),{keep:"best"})}),options}),Hooks.on("preCreateActor",(actor,dir)=>{game.settings.get("pf2e","defaultTokenSettings")&&(mergeObject(actor,{"token.bar1":{attribute:"attributes.hp"},"token.displayName":CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER,"token.displayBars":CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER,"token.disposition":CONST.TOKEN_DISPOSITIONS.HOSTILE,"token.name":actor.name}),"character"===actor.type&&(actor.token.vision=!0,actor.token.disposition=CONST.TOKEN_DISPOSITIONS.FRIENDLY,actor.token.actorLink=!0))}),Hooks.on("updateActor",(actor,dir)=>{_updateMinionActors(actor)}),Hooks.on("createOwnedItem",(parent,child,options,userId)=>{parent instanceof actor_1.default&&parent.onCreateOwnedItem(child,options,userId)}),Hooks.on("deleteOwnedItem",(parent,child,options,userId)=>{parent instanceof actor_1.default&&parent.onDeleteOwnedItem(child,options,userId)})},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.CONFIG={},exports.CONFIG.chatDamageButtonShieldToggle=!1,exports.CONFIG.PF2eStatusEffects={overruledByModule:!1,lastIconType:"default",effectsIconFolder:"systems/pf2e/icons/conditions/",effectsIconFileType:"png",keepFoundryStatusEffects:!0,foundryStatusEffects:[]},exports.CONFIG.abilities={str:"PF2E.AbilityStr",dex:"PF2E.AbilityDex",con:"PF2E.AbilityCon",int:"PF2E.AbilityInt",wis:"PF2E.AbilityWis",cha:"PF2E.AbilityCha"},exports.CONFIG.attributes={perception:"PF2E.PerceptionLabel",stealth:"PF2E.StealthLabel",initiative:"PF2E.PerceptionLabel"},exports.CONFIG.skills={acr:"PF2E.SkillAcr",arc:"PF2E.SkillArc",ath:"PF2E.SkillAth",cra:"PF2E.SkillCra",dec:"PF2E.SkillDec",dip:"PF2E.SkillDip",itm:"PF2E.SkillItm",med:"PF2E.SkillMed",nat:"PF2E.SkillNat",occ:"PF2E.SkillOcc",prf:"PF2E.SkillPrf",rel:"PF2E.SkillRel",soc:"PF2E.SkillSoc",ste:"PF2E.SkillSte",sur:"PF2E.SkillSur",thi:"PF2E.SkillThi"},exports.CONFIG.martialSkills={unarmored:"PF2E.MartialUnarmored",light:"PF2E.MartialLight",medium:"PF2E.MartialMedium",heavy:"PF2E.MartialHeavy",simple:"PF2E.MartialSimple",martial:"PF2E.MartialMartial",advanced:"PF2E.MartialAdvanced",unarmed:"PF2E.MartialUnarmed"},exports.CONFIG.saves={reflex:"PF2E.SavesReflex",fortitude:"PF2E.SavesFortitude",will:"PF2E.SavesWill"},exports.CONFIG.currencies={pp:"PF2E.CurrencyPP",gp:"PF2E.CurrencyGP",sp:"PF2E.CurrencySP",cp:"PF2E.CurrencyCP"},exports.CONFIG.preciousMaterialGrades={low:"PF2E.PreciousMaterialLowGrade",standard:"PF2E.PreciousMaterialStandardGrade",high:"PF2E.PreciousMaterialHighGrade"},exports.CONFIG.preciousMaterials={coldIron:"PF2E.PreciousMaterialColdIron",silver:"PF2E.PreciousMaterialSilver",mithral:"PF2E.PreciousMaterialMithral",adamantine:"PF2E.PreciousMaterialAdamantine",darkwood:"PF2E.PreciousMaterialDarkwood",dragonhide:"PF2E.PreciousMaterialDragonhide",orichalcum:"PF2E.PreciousMaterialOrichalcum","sovereign steel":"PF2E.PreciousMaterialSovereignSteel"},exports.CONFIG.armorPotencyRunes={1:"PF2E.ArmorPotencyRune1",2:"PF2E.ArmorPotencyRune2",3:"PF2E.ArmorPotencyRune3",4:"PF2E.ArmorPotencyRune4"},exports.CONFIG.armorResiliencyRunes={resilient:"PF2E.ArmorResilientRune",greaterResilient:"PF2E.ArmorGreaterResilientRune",majorResilient:"PF2E.ArmorMajorResilientRune"},exports.CONFIG.armorPropertyRunes={ready:"PF2E.ArmorPropertyRuneReady",slick:"PF2E.ArmorPropertyRuneSlick",shadow:"PF2E.ArmorPropertyRuneShadow",glamered:"PF2E.ArmorPropertyRuneGlamered",acidResistant:"PF2E.ArmorPropertyRuneAcidResistant",coldResistant:"PF2E.ArmorPropertyRuneColdResistant",electricityResistant:"PF2E.ArmorPropertyRuneElectricityResistant",fireResistant:"PF2E.ArmorPropertyRuneFireResistant",greaterSlick:"PF2E.ArmorPropertyRuneGreaterSlick",invisibility:"PF2E.ArmorPropertyRuneInvisibility",sinisterKnight:"PF2E.ArmorPropertyRuneSinisterKnight",greaterReady:"PF2E.ArmorPropertyRuneGreaterReady",greaterShadow:"PF2E.ArmorPropertyRuneGreaterShadow",greaterInvisibility:"PF2E.ArmorPropertyRuneGreaterInvisibility",greaterAcidResistant:"PF2E.ArmorPropertyRuneGreaterAcidResistant",greaterColdResistant:"PF2E.ArmorPropertyRuneGreaterColdResistant",greaterElectricityResistant:"PF2E.ArmorPropertyRuneGreaterElectricityResistant",greaterFireResistant:"PF2E.ArmorPropertyRuneGreaterFireResistant",fortification:"PF2E.ArmorPropertyRuneFortification",winged:"PF2E.ArmorPropertyRuneWinged",rockBraced:"PF2E.ArmorPropertyRuneRockBraced",antimagic:"PF2E.ArmorPropertyRuneAntimagic",majorSlick:"PF2E.ArmorPropertyRuneMajorSlick",ethereal:"PF2E.ArmorPropertyRuneEthereal",majorShadow:"PF2E.ArmorPropertyRuneMajorShadow",greaterFortification:"PF2E.ArmorPropertyRuneGreaterFortification",greaterWinged:"PF2E.ArmorPropertyRuneGreaterWinged"},exports.CONFIG.weaponPotencyRunes={1:"PF2E.WeaponPotencyRune1",2:"PF2E.WeaponPotencyRune2",3:"PF2E.WeaponPotencyRune3",4:"PF2E.WeaponPotencyRune4"},exports.CONFIG.weaponStrikingRunes={striking:"PF2E.ArmorStrikingRune",greaterStriking:"PF2E.ArmorGreaterStrikingRune",majorStriking:"PF2E.ArmorMajorStrikingRune"},exports.CONFIG.weaponPropertyRunes={kinWarding:"PF2E.WeaponPropertyRuneKinWarding",returning:"PF2E.WeaponPropertyRuneReturning",ghostTouch:"PF2E.WeaponPropertyRuneGhostTouch",disrupting:"PF2E.WeaponPropertyRuneDisrupting",pacifying:"PF2E.WeaponPropertyRunePacifying",fearsome:"PF2E.WeaponPropertyRuneFearsome",shifting:"PF2E.WeaponPropertyRuneShifting",wounding:"PF2E.WeaponPropertyRuneWounding",bloodbane:"PF2E.WeaponPropertyRuneBloodbane",corrosive:"PF2E.WeaponPropertyRuneCorrosive",flaming:"PF2E.WeaponPropertyRuneFlaming",frost:"PF2E.WeaponPropertyRuneFrost",shock:"PF2E.WeaponPropertyRuneShock",thundering:"PF2E.WeaponPropertyRuneThundering",grievous:"PF2E.WeaponPropertyRuneGrievous",serrating:"PF2E.WeaponPropertyRuneSerrating",anarchic:"PF2E.WeaponPropertyRuneAnarchic",axiomatic:"PF2E.WeaponPropertyRuneAxiomatic",holy:"PF2E.WeaponPropertyRuneHoly",unholy:"PF2E.WeaponPropertyRuneUnholy",greaterFearsome:"PF2E.WeaponPropertyRuneGreaterFearsome",dancing:"PF2E.WeaponPropertyRuneDancing",spellStoring:"PF2E.WeaponPropertyRuneSpellStoring",greaterBloodbane:"PF2E.WeaponPropertyRuneGreaterBloodbane",keen:"PF2E.WeaponPropertyRuneKeen",greaterDisrupting:"PF2E.WeaponPropertyRuneGreaterDisrupting",greaterCorrosive:"PF2E.WeaponPropertyRuneGreaterCorrosive",greaterFlaming:"PF2E.WeaponPropertyRuneGreaterFlaming",greaterFrost:"PF2E.WeaponPropertyRuneGreaterFrost",greaterShock:"PF2E.WeaponPropertyRuneGreaterShock",greaterThundering:"PF2E.WeaponPropertyRuneGreaterThundering",ancestralEchoing:"PF2E.WeaponPropertyRuneAncestralEchoing",speed:"PF2E.WeaponPropertyRuneSpeed",vorpal:"PF2E.WeaponPropertyRuneVorpal"},exports.CONFIG.damageTypes={acid:"PF2E.DamageTypeAcid",bludgeoning:"PF2E.DamageTypeBludgeoning",cold:"PF2E.DamageTypeCold",fire:"PF2E.DamageTypeFire",force:"PF2E.DamageTypeForce",electricity:"PF2E.DamageTypeElectricity",sonic:"PF2E.DamageTypeSonic",negative:"PF2E.DamageTypeNegative",piercing:"PF2E.DamageTypePiercing",poison:"PF2E.DamageTypePoison",positive:"PF2E.DamageTypePositive",bleed:"PF2E.DamageTypeBleed",mental:"PF2E.DamageTypeMental",precision:"PF2E.DamageTypePrecision",slashing:"PF2E.DamageTypeSlashing",chaotic:"PF2E.DamageTypeChaotic",lawful:"PF2E.DamageTypeLawful",good:"PF2E.DamageTypeGood",evil:"PF2E.DamageTypeEvil"},exports.CONFIG.resistanceTypes={acid:"PF2E.DamageTypeAcid",bludgeoning:"PF2E.DamageTypeBludgeoning",cold:"PF2E.DamageTypeCold",fire:"PF2E.DamageTypeFire",force:"PF2E.DamageTypeForce",electricity:"PF2E.DamageTypeElectricity",sonic:"PF2E.DamageTypeSonic",negative:"PF2E.DamageTypeNegative",piercing:"PF2E.DamageTypePiercing",poison:"PF2E.DamageTypePoison",positive:"PF2E.DamageTypePositive",bleed:"PF2E.DamageTypeBleed",mental:"PF2E.DamageTypeMental",precision:"PF2E.DamageTypePrecision",slashing:"PF2E.DamageTypeSlashing",chaotic:"PF2E.DamageTypeChaotic",lawful:"PF2E.DamageTypeLawful",good:"PF2E.DamageTypeGood",evil:"PF2E.DamageTypeEvil",all:"PF2E.ResistanceTypeAll",physical:"PF2E.ResistanceTypePhysical",weapon:"PF2E.ResistanceTypeWeapon","critical-hits":"PF2E.ResistanceTypeCriticalHits","draconic resistance":"PF2E.ResistanceTypeDragonResistance","protean anatomy":"PF2E.ResistanceTypeProteanAnatomy"},exports.CONFIG.stackGroups={bolts:"PF2E.StackGroupBolts",arrows:"PF2E.StackGroupArrows",slingBullets:"PF2E.StackGroupSlingBullets",blowgunDarts:"PF2E.StackGroupBlowgunDarts",rations:"PF2E.StackGroupRations",coins:"PF2E.StackGroupCoins",gems:"PF2E.StackGroupGems"},exports.CONFIG.weaknessTypes={acid:"PF2E.DamageTypeAcid",bludgeoning:"PF2E.DamageTypeBludgeoning",cold:"PF2E.DamageTypeCold",fire:"PF2E.DamageTypeFire",force:"PF2E.DamageTypeForce",electricity:"PF2E.DamageTypeElectricity",sonic:"PF2E.DamageTypeSonic",negative:"PF2E.DamageTypeNegative",piercing:"PF2E.DamageTypePiercing",poison:"PF2E.DamageTypePoison",positive:"PF2E.DamageTypePositive",bleed:"PF2E.DamageTypeBleed",light:"PF2E.DamageTypeLight",mental:"PF2E.DamageTypeMental",precision:"PF2E.DamageTypePrecision",slashing:"PF2E.DamageTypeSlashing",chaotic:"PF2E.DamageTypeChaotic",lawful:"PF2E.DamageTypeLawful",good:"PF2E.DamageTypeGood",evil:"PF2E.DamageTypeEvil",adamantine:"PF2E.WeaknessTypeAdamantine",coldiron:"PF2E.WeaknessTypeColdIron",darkwood:"PF2E.WeaknessTypeDarkwood",mithral:"PF2E.WeaknessTypeMithral",orichalcum:"PF2E.WeaknessTypeOrichalcum",silver:"PF2E.WeaknessTypeSilver","area-damage":"PF2E.WeaknessTypeAreaDamage","splash-damage":"PF2E.WeaknessTypeSplashDamage",salt:"PF2E.WeaknessTypeSalt","salt water":"PF2E.WeaknessTypeSaltWater","vorpal fear":"PF2E.WeaknessTypeVorpalFear","vorpal weapons":"PF2E.WeaknessTypeVorpalWeapons","vampire weaknesses":"PF2E.WeaknessTypeVampireWeaknesses"},exports.CONFIG.weaponDamage={bludgeoning:"PF2E.DamageTypeBludgeoning",piercing:"PF2E.DamageTypePiercing",slashing:"PF2E.DamageTypeSlashing",modular:"PF2E.DamageTypeModular"},exports.CONFIG.healingTypes={healing:"PF2E.HealingTypeHealing",temphp:"PF2E.HealingTypeTemporaryHealing"},exports.CONFIG.weaponTypes={simple:"PF2E.WeaponTypeSimple",martial:"PF2E.WeaponTypeMartial",advanced:"PF2E.WeaponTypeAdvanced",unarmed:"PF2E.WeaponTypeUnarmed"},exports.CONFIG.weaponGroups={club:"PF2E.WeaponGroupClub",knife:"PF2E.WeaponGroupKnife",brawling:"PF2E.WeaponGroupBrawling",spear:"PF2E.WeaponGroupSpear",sword:"PF2E.WeaponGroupSword",axe:"PF2E.WeaponGroupAxe",flail:"PF2E.WeaponGroupFlail",polearm:"PF2E.WeaponGroupPolearm",pick:"PF2E.WeaponGroupPick",hammer:"PF2E.WeaponGroupHammer",shield:"PF2E.WeaponGroupShield",dart:"PF2E.WeaponGroupDart",bow:"PF2E.WeaponGroupBow",sling:"PF2E.WeaponGroupSling",bomb:"PF2E.WeaponGroupBomb"},exports.CONFIG.weaponDescriptions={club:"PF2E.WeaponDescriptionClub",knife:"PF2E.WeaponDescriptionKnife",brawling:"PF2E.WeaponDescriptionBrawling",spear:"PF2E.WeaponDescriptionSpear",sword:"PF2E.WeaponDescriptionSword",axe:"PF2E.WeaponDescriptionAxe",flail:"PF2E.WeaponDescriptionFlail",polearm:"PF2E.WeaponDescriptionPolearm",pick:"PF2E.WeaponDescriptionPick",hammer:"PF2E.WeaponDescriptionHammer",shield:"PF2E.WeaponDescriptionShield",dart:"PF2E.WeaponDescriptionDart",bow:"PF2E.WeaponDescriptionBow",sling:"PF2E.WeaponDescriptionSling",bomb:"PF2E.WeaponDescriptionBomb"},exports.CONFIG.usageTraits={"held-in-one-hand":"PF2E.TraitHeldOneHand","held-in-two-hands":"PF2E.TraitHeldTwoHands","affixed-to-weapon":"PF2E.TraitAffixedToWeapon","affixed-to-a-shield":"PF2E.TraitAffixedToAShield",bonded:"PF2E.TraitBonded",worn:"PF2E.TraitWorn",wornamulet:"PF2E.TraitWornAmulet",wornanklets:"PF2E.TraitWornAnklets",wornbackpack:"PF2E.TraitWornBackpack",wornbarding:"PF2E.TraitWornBarding",wornbelt:"PF2E.TraitWornBelt",wornbracers:"PF2E.TraitWornBracers",wornbracelet:"PF2E.TraitWornOnWrists",worncloak:"PF2E.TraitWornCloak",worncirclet:"PF2E.TraitWornCirclet",worncollar:"PF2E.TraitWornCollar",wornepaulet:"PF2E.TraitWornEpaulet",worneyepiece:"PF2E.TraitWornEyepiece",worngarment:"PF2E.TraitWornGarment",worngloves:"PF2E.TraitWornGloves",wornheadwear:"PF2E.TraitWornHeadwear",wornmask:"PF2E.TraitWornMask",wornnecklace:"PF2E.TraitWornNecklace",wornring:"PF2E.TraitWornRing",wornshoes:"PF2E.TraitWornShoes",wornhorseshoes:"PF2E.TraitWornHorseshoes",wornsaddle:"PF2E.TraitWornSaddle","etched-onto-armor":"PF2E.TraitEtchedOntoAArmor","etched-onto-a-weapon":"PF2E.TraitEtchedOntoAWeapon",wornwrist:"PF2E.TraitWornOnWrists"},exports.CONFIG.rarityTraits={common:"PF2E.TraitCommon",uncommon:"PF2E.TraitUncommon",rare:"PF2E.TraitRare",unique:"PF2E.TraitUnique"},exports.CONFIG.spellTraditions={arcane:"PF2E.TraitArcane",divine:"PF2E.TraitDivine",occult:"PF2E.TraitOccult",primal:"PF2E.TraitPrimal",focus:"PF2E.TraitFocus",ritual:"PF2E.TraitRitual"},exports.CONFIG.magicTraditions={focus:"PF2E.TraitFocus",ritual:"PF2E.TraitRitual",scroll:"PF2E.TraitScroll",wand:"PF2E.TraitWand"},mergeObject(exports.CONFIG.magicTraditions,exports.CONFIG.spellTraditions),exports.CONFIG.magicalSchools={abjuration:"PF2E.TraitAbjuration",conjuration:"PF2E.TraitConjuration",divination:"PF2E.TraitDivination",enchantment:"PF2E.TraitEnchantment",evocation:"PF2E.TraitEvocation",illusion:"PF2E.TraitIllusion",necromancy:"PF2E.TraitNecromancy",transmutation:"PF2E.TraitTransmutation"},exports.CONFIG.spellSchools={abj:"PF2E.SpellSchoolAbj",con:"PF2E.SpellSchoolCon",div:"PF2E.SpellSchoolDiv",enc:"PF2E.SpellSchoolEnc",evo:"PF2E.SpellSchoolEvo",ill:"PF2E.SpellSchoolIll",nec:"PF2E.SpellSchoolNec",trs:"PF2E.SpellSchoolTrs"},exports.CONFIG.classTraits={alchemist:"PF2E.TraitAlchemist",barbarian:"PF2E.TraitBarbarian",bard:"PF2E.TraitBard",champion:"PF2E.TraitChampion",cleric:"PF2E.TraitCleric",druid:"PF2E.TraitDruid",fighter:"PF2E.TraitFighter",investigator:"PF2E.TraitInvestigator",monk:"PF2E.TraitMonk",oracle:"PF2E.TraitOracle",ranger:"PF2E.TraitRanger",rogue:"PF2E.TraitRogue",sorcerer:"PF2E.TraitSorcerer",swashbuckler:"PF2E.TraitSwashbuckler",witch:"PF2E.TraitWitch",wizard:"PF2E.TraitWizard"},exports.CONFIG.ancestryTraits={dwarf:"PF2E.TraitDwarf",elf:"PF2E.TraitElf",gnome:"PF2E.TraitGnome",goblin:"PF2E.TraitGoblin","half-elf":"PF2E.TraitHalfElf",halfling:"PF2E.TraitHalfling","half-orc":"PF2E.TraitHalfOrc",human:"PF2E.TraitHuman",hobgoblin:"PF2E.TraitHobgoblin",leshy:"PF2E.TraitLeshy",lizardfolk:"PF2E.TraitLizardfolk",aasimar:"PF2E.TraitAasimar",catfolk:"PF2E.TraitCatfolk",changeling:"PF2E.TraitChangeling",dhampir:"PF2E.TraitDhampir",duskwalker:"PF2E.TraitDuskwalker",geniekin:"PF2E.TraitGeniekin",kobold:"PF2E.TraitKobold",orc:"PF2E.TraitOrc",ratfolk:"PF2E.TraitRatfolk",shoony:"PF2E.TraitShoony",tengu:"PF2E.TraitTengu",tiefling:"PF2E.TraitTiefling"},exports.CONFIG.weaponTraits={acid:"PF2E.TraitAcid",adamantine:"PF2E.PreciousMaterialAdamantine",alchemical:"PF2E.TraitAlchemical",agile:"PF2E.TraitAgile",artifact:"PF2E.TraitArtifact",attached:"PF2E.TraitAttached",backstabber:"PF2E.TraitBackstabber",backswing:"PF2E.TraitBackswing",bomb:"PF2E.TraitBomb",brutal:"PF2E.TraitBrutal",chaotic:"PF2E.TraitChaotic",cold:"PF2E.TraitCold",coldiron:"PF2E.TraitColdiron",concealable:"PF2E.TraitConcealable",consumable:"PF2E.TraitConsumable",cursed:"PF2E.TraitCursed","deadly-d6":"PF2E.TraitDeadlyD6","deadly-d8":"PF2E.TraitDeadlyD8","deadly-d10":"PF2E.TraitDeadlyD10","deadly-d12":"PF2E.TraitDeadlyD12",disarm:"PF2E.TraitDisarm",earth:"PF2E.TraitEarth",electricity:"PF2E.TraitElectricity",emotion:"PF2E.TraitEmotion",evil:"PF2E.TraitEvil","fatal-d8":"PF2E.TraitFatalD8","fatal-d10":"PF2E.TraitFatalD10","fatal-d12":"PF2E.TraitFatalD12",fear:"PF2E.TraitFear",finesse:"PF2E.TraitFinesse",fire:"PF2E.TraitFire",forceful:"PF2E.TraitForceful",fortune:"PF2E.TraitFortune","free-hand":"PF2E.TraitFreeHand",fungus:"PF2E.TraitFungus",ghostTouch:"PF2E.WeaponPropertyRuneGhostTouch",good:"PF2E.TraitGood",grapple:"PF2E.TraitGrapple",improvised:"PF2E.TraitImprovised",intelligent:"PF2E.TraitIntelligent",invested:"PF2E.TraitInvested","jousting-d6":"PF2E.TraitJoustingD6",lawful:"PF2E.TraitLawful",light:"PF2E.TraitLight",magical:"PF2E.TraitMagical",mental:"PF2E.TraitMental",negative:"PF2E.TraitNegative",nonlethal:"PF2E.TraitNonlethal",parry:"PF2E.TraitParry",poison:"PF2E.TraitPoison",positive:"PF2E.TraitPositive",propulsive:"PF2E.TraitPropulsive",range:"PF2E.TraitRange","range-increment-10":"PF2E.TraitRangeIncrement10","range-increment-20":"PF2E.TraitRangeIncrement20","range-increment-30":"PF2E.TraitRangeIncrement30","range-increment-40":"PF2E.TraitRangeIncrement40","range-increment-50":"PF2E.TraitRangeIncrement50","range-increment-60":"PF2E.TraitRangeIncrement60","range-increment-70":"PF2E.TraitRangeIncrement70","range-increment-80":"PF2E.TraitRangeIncrement80","range-increment-90":"PF2E.TraitRangeIncrement90","range-increment-100":"PF2E.TraitRangeIncrement100","range-increment-110":"PF2E.TraitRangeIncrement110","range-increment-120":"PF2E.TraitRangeIncrement120","range-increment-130":"PF2E.TraitRangeIncrement130","range-increment-140":"PF2E.TraitRangeIncrement140","range-increment-150":"PF2E.TraitRangeIncrement150","range-increment-160":"PF2E.TraitRangeIncrement160","range-increment-170":"PF2E.TraitRangeIncrement170","range-increment-180":"PF2E.TraitRangeIncrement180","range-increment-190":"PF2E.TraitRangeIncrement190","range-increment-200":"PF2E.TraitRangeIncrement200","range-increment-210":"PF2E.TraitRangeIncrement210","range-increment-220":"PF2E.TraitRangeIncrement220","range-increment-230":"PF2E.TraitRangeIncrement230","range-increment-240":"PF2E.TraitRangeIncrement240","range-increment-250":"PF2E.TraitRangeIncrement250","range-increment-260":"PF2E.TraitRangeIncrement260","range-increment-270":"PF2E.TraitRangeIncrement270","range-increment-280":"PF2E.TraitRangeIncrement280","range-increment-290":"PF2E.TraitRangeIncrement290","range-increment-300":"PF2E.TraitRangeIncrement300","range-increment-310":"PF2E.TraitRangeIncrement310","range-increment-320":"PF2E.TraitRangeIncrement320","ranged-trip":"PF2E.TraitRangedTrip",reach:"PF2E.TraitReach","reach-10":"PF2E.TraitReach10","reach-15":"PF2E.TraitReach15","reach-20":"PF2E.TraitReach20","reach-25":"PF2E.TraitReach25","reload-0":"PF2E.TraitReload0","reload-1":"PF2E.TraitReload1","reload-2":"PF2E.TraitReload2",shove:"PF2E.TraitShove",silver:"PF2E.PreciousMaterialSilver",staff:"PF2E.TraitStaff",sonic:"PF2E.TraitSonic",splash:"PF2E.TraitSplash",sweep:"PF2E.TraitSweep",teleportation:"PF2E.TraitTeleportation",tethered:"PF2E.TraitTethered","thrown-10":"PF2E.TraitThrown10","thrown-20":"PF2E.TraitThrown20","thrown-30":"PF2E.TraitThrown30","thrown-40":"PF2E.TraitThrown40",trip:"PF2E.TraitTrip",twin:"PF2E.TraitTwin","two-hand-d8":"PF2E.TraitTwoHandD8","two-hand-d10":"PF2E.TraitTwoHandD10","two-hand-d12":"PF2E.TraitTwoHandD12",unarmed:"PF2E.TraitUnarmed","versatile-s":"PF2E.TraitVersatileS","versatile-p":"PF2E.TraitVersatileP","versatile-b":"PF2E.TraitVersatileB","volley-30":"PF2E.TraitVolley30","modular-b-P-or-s":"PF2E.TraitModular"},mergeObject(exports.CONFIG.weaponTraits,exports.CONFIG.classTraits),mergeObject(exports.CONFIG.weaponTraits,exports.CONFIG.ancestryTraits),mergeObject(exports.CONFIG.weaponTraits,exports.CONFIG.magicalSchools),mergeObject(exports.CONFIG.weaponTraits,exports.CONFIG.spellTraditions),exports.CONFIG.armorTraits={apex:"PF2E.TraitApex",artifact:"PF2E.TraitArtifact",bulwark:"PF2E.TraitBulwark",comfort:"PF2E.TraitComfort",cursed:"PF2E.TraitCursed",evil:"PF2E.TraitEvil",force:"PF2E.TraitForce",flexible:"PF2E.TraitFlexible",good:"PF2E.TraitGood",intelligent:"PF2E.TraitIntelligent",invested:"PF2E.TraitInvested",light:"PF2E.TraitLight",magical:"PF2E.TraitMagical",noisy:"PF2E.TraitNoisy"},mergeObject(exports.CONFIG.armorTraits,exports.CONFIG.magicalSchools),mergeObject(exports.CONFIG.armorTraits,exports.CONFIG.spellTraditions),exports.CONFIG.equipmentTraits={acid:"PF2E.TraitAcid",air:"PF2E.TraitAir",alchemical:"PF2E.TraitAlchemical",apex:"PF2E.TraitApex",artifact:"PF2E.TraitArtifact",auditory:"PF2E.TraitAuditory",companion:"PF2E.TraitCompanion",chaotic:"PF2E.TraitChaotic",cold:"PF2E.TraitCold",contract:"PF2E.TraitContract",cursed:"PF2E.TraitCursed",darkness:"PF2E.TraitDarkness",death:"PF2E.TraitDeath",earth:"PF2E.TraitEarth",electricity:"PF2E.TraitElectricity",emotion:"PF2E.TraitEmotion",evil:"PF2E.TraitEvil",extradimensional:"PF2E.TraitExtradimensional",fear:"PF2E.TraitFear",fire:"PF2E.TraitFire",focused:"PF2E.TraitFocused",force:"PF2E.TraitForce",fortune:"PF2E.TraitFortune",good:"PF2E.TraitGood",healing:"PF2E.TraitHealing",intelligent:"PF2E.TraitIntelligent",invested:"PF2E.TraitInvested",lawful:"PF2E.TraitLawful",light:"PF2E.TraitLight",magical:"PF2E.TraitMagical",mental:"PF2E.TraitMental",misfortune:"PF2E.TraitMisfortune",negative:"PF2E.TraitNegative",nonlethal:"PF2E.TraitNonlethal",poison:"PF2E.TraitPoison",positive:"PF2E.TraitPositive",precious:"PF2E.TraitPrecious",revelation:"PF2E.TraitRevelation",saggorak:"PF2E.TraitSaggorak",scrying:"PF2E.TraitScrying",sonic:"PF2E.TraitSonic",staff:"PF2E.TraitStaff",structure:"PF2E.TraitStructure",tattoo:"PF2E.TraitTattoo",teleportation:"PF2E.TraitTeleportation",visual:"PF2E.TraitVisual",wand:"PF2E.TraitWand",water:"PF2E.TraitWater"},mergeObject(exports.CONFIG.equipmentTraits,exports.CONFIG.magicalSchools),mergeObject(exports.CONFIG.equipmentTraits,exports.CONFIG.ancestryTraits),mergeObject(exports.CONFIG.equipmentTraits,exports.CONFIG.spellTraditions),exports.CONFIG.consumableTraits={air:"PF2E.TraitAir",alchemical:"PF2E.TraitAlchemical",auditory:"PF2E.TraitAuditory",bomb:"PF2E.TraitBomb",cold:"PF2E.TraitCold",consumable:"PF2E.TraitConsumable",contact:"PF2E.TraitContact",drug:"PF2E.TraitDrug",electricity:"PF2E.TraitElectricity",elixir:"PF2E.TraitElixir",emotion:"PF2E.TraitEmotion",evil:"PF2E.TraitEvil",fear:"PF2E.TraitFear",fire:"PF2E.TraitFire",force:"PF2E.TraitForce",fortune:"PF2E.TraitFortune",good:"PF2E.TraitGood",healing:"PF2E.TraitHealing",incapacitation:"PF2E.TraitIncapacitation",ingested:"PF2E.TraitIngested",inhaled:"PF2E.TraitInhaled",injury:"PF2E.TraitInjury",light:"PF2E.TraitLight",magical:"PF2E.TraitMagical",mechanical:"PF2E.TraitMechanical",mental:"PF2E.TraitMental",misfortune:"PF2E.TraitMisfortune",morph:"PF2E.TraitMorph",mutagen:"PF2E.TraitMutagen",negative:"PF2E.TraitNegative",oil:"PF2E.TraitOil",poison:"PF2E.TraitPoison",polymorph:"PF2E.TraitPolymorph",positive:"PF2E.TraitPositive",potion:"PF2E.TraitPotion",scroll:"PF2E.TraitScroll",scrying:"PF2E.TraitScrying",sleep:"PF2E.TraitSleep",snare:"PF2E.TraitSnare",splash:"PF2E.TraitSplash",talisman:"PF2E.TraitTalisman",trap:"PF2E.TraitTrap",virulent:"PF2E.TraitVirulent",visual:"PF2E.TraitVisual"},mergeObject(exports.CONFIG.consumableTraits,exports.CONFIG.magicalSchools),mergeObject(exports.CONFIG.consumableTraits,exports.CONFIG.spellTraditions),exports.CONFIG.spellTraits={attack:"PF2E.TraitAttack",disease:"PF2E.TraitDisease",polymorph:"PF2E.TraitPolymorph",incapacitation:"PF2E.TraitIncapacitation",plant:"PF2E.TraitPlant",teleportation:"PF2E.TraitTeleportation",visual:"PF2E.TraitVisual",emotion:"PF2E.TraitEmotion",light:"PF2E.TraitLight",darkness:"PF2E.TraitDarkness",death:"PF2E.TraitDeath",scrying:"PF2E.TraitScrying",detection:"PF2E.TraitDetection",composition:"PF2E.TraitComposition",water:"PF2E.TraitWater",healing:"PF2E.TraitHealing",cantrip:"PF2E.TraitCantrip",nonlethal:"PF2E.TraitNonlethal",earth:"PF2E.TraitEarth",curse:"PF2E.TraitCurse",misfortune:"PF2E.TraitMisfortune",fungus:"PF2E.TraitFungus",linguistic:"PF2E.TraitLinguistic",morph:"PF2E.TraitMorph",air:"PF2E.TraitAir",auditory:"PF2E.TraitAuditory",aura:"PF2E.TraitAura",concentrate:"PF2E.TraitConcentrate",extradimensional:"PF2E.TraitExtradimensional",fear:"PF2E.TraitFear",fortune:"PF2E.TraitFortune",litany:"PF2E.TraitLitany",metamagic:"PF2E.TraitMetamagic",move:"PF2E.TraitMove",possession:"PF2E.TraitPossession",prediction:"PF2E.TraitPrediction",revelation:"PF2E.TraitRevelation",shadow:"PF2E.TraitShadow",sleep:"PF2E.TraitSleep",stance:"PF2E.TraitStance",cursebound:"PF2E.TraitCursebound",hex:"PF2E.TraitHex"},mergeObject(exports.CONFIG.spellTraits,exports.CONFIG.damageTypes),mergeObject(exports.CONFIG.spellTraits,exports.CONFIG.spellTraditions),mergeObject(exports.CONFIG.spellTraits,exports.CONFIG.magicalSchools),mergeObject(exports.CONFIG.spellTraits,exports.CONFIG.classTraits),exports.CONFIG.featTraits={move:"PF2E.TraitMove",manipulate:"PF2E.TraitManipulate",concentrate:"PF2E.TraitConcentrate",rage:"PF2E.TraitRage",general:"PF2E.TraitGeneral",skill:"PF2E.TraitSkill",fortune:"PF2E.TraitFortune",downtime:"PF2E.TraitDowntime",secret:"PF2E.TraitSecret",additive1:"PF2E.TraitAdditive1",additive2:"PF2E.TraitAdditive2",additive3:"PF2E.TraitAdditive3",air:"PF2E.TraitAir",archetype:"PF2E.TraitArchetype",auditory:"PF2E.TraitAuditory",dedication:"PF2E.TraitDedication",detection:"PF2E.TraitDetection",emotion:"PF2E.TraitEmotion",exploration:"PF2E.TraitExploration",fear:"PF2E.TraitFear",flourish:"PF2E.TraitFlourish",instinct:"PF2E.TraitInstinct",magical:"PF2E.TraitMagical",metamagic:"PF2E.TraitMetamagic",multiclass:"PF2E.TraitMulticlass",oath:"PF2E.TraitOath",open:"PF2E.TraitOpen",press:"PF2E.TraitPress",stance:"PF2E.TraitStance",stamina:"PF2E.TraitStamina",alchemical:"PF2E.TraitAlchemical",interact:"PF2E.TraitInteract",aura:"PF2E.TraitAura",olfactory:"PF2E.TraitOlfactory",finisher:"PF2E.TraitFinisher",lineage:"PF2E.TraitLineage",vigilante:"PF2E.TraitVigilante"},mergeObject(exports.CONFIG.featTraits,exports.CONFIG.ancestryTraits),mergeObject(exports.CONFIG.featTraits,exports.CONFIG.classTraits),mergeObject(exports.CONFIG.featTraits,exports.CONFIG.spellTraditions),mergeObject(exports.CONFIG.featTraits,exports.CONFIG.magicalSchools),mergeObject(exports.CONFIG.featTraits,exports.CONFIG.damageTypes),mergeObject(exports.CONFIG.featTraits,exports.CONFIG.spellTraits),exports.CONFIG.monsterTraits={couatl:"PF2E.TraitCouatl",dream:"PF2E.TraitDream",fetchling:"PF2E.TraitFetchling",ifrit:"PF2E.TraitIfrit",oni:"PF2E.TraitOni",oread:"PF2E.TraitOread",petitioner:"PF2E.TraitPetitioner",qlippoth:"PF2E.TraitQlippoth",serpentfolk:"PF2E.TraitSerpentfolk",shadow:"PF2E.TraitShadow",skulk:"PF2E.TraitSkulk",spriggan:"PF2E.TraitSpriggan",suli:"PF2E.TraitSuli",sylph:"PF2E.TraitSylph",tane:"PF2E.TraitTane",time:"PF2E.TraitTime",undine:"PF2E.TraitUndine",urdefhan:"PF2E.TraitUrdefhan",aberration:"PF2E.TraitAberration",acid:"PF2E.TraitAcid",aeon:"PF2E.TraitAeon",air:"PF2E.TraitAir",alchemical:"PF2E.TraitAlchemical",amphibious:"PF2E.TraitAmphibious",anadi:"PF2E.TraitAnadi",angel:"PF2E.TraitAngel",animal:"PF2E.TraitAnimal",aquatic:"PF2E.TraitAquatic",archon:"PF2E.TraitArchon",astral:"PF2E.TraitAstral",azata:"PF2E.TraitAzata",beast:"PF2E.TraitBeast",boggard:"PF2E.TraitBoggard",caligni:"PF2E.TraitCaligni",celestial:"PF2E.TraitCelestial","charau-ka":"PF2E.TraitCharauKa",cold:"PF2E.TraitCold",construct:"PF2E.TraitConstruct",daemon:"PF2E.TraitDaemon",demon:"PF2E.TraitDemon",dero:"PF2E.TraitDero",devil:"PF2E.TraitDevil",dhampir:"PF2E.TraitDhampir",dinosaur:"PF2E.TraitDinosaur",dragon:"PF2E.TraitDragon",drow:"PF2E.TraitDrow",duergar:"PF2E.TraitDuergar",duskwalker:"PF2E.TraitDuskwalker",earth:"PF2E.TraitEarth",elemental:"PF2E.TraitElemental",ethereal:"PF2E.TraitEthereal",fey:"PF2E.TraitFey",fiend:"PF2E.TraitFiend",fungus:"PF2E.TraitFungus",genie:"PF2E.TraitGenie",ghost:"PF2E.TraitGhost",ghoul:"PF2E.TraitGhoul",giant:"PF2E.TraitGiant",gnoll:"PF2E.TraitGnoll",golem:"PF2E.TraitGolem",gremlin:"PF2E.TraitGremlin",grippli:"PF2E.TraitGrippli",hag:"PF2E.TraitHag",humanoid:"PF2E.TraitHumanoid",incorporeal:"PF2E.TraitIncorporeal",inevitable:"PF2E.TraitInevitable",kobold:"PF2E.TraitKobold",merfolk:"PF2E.TraitMerfolk",mindless:"PF2E.TraitMindless",minion:"PF2E.TraitMinion",monitor:"PF2E.TraitMonitor",mummy:"PF2E.TraitMummy",mutant:"PF2E.TraitMutant",nymph:"PF2E.TraitNymph",ooze:"PF2E.TraitOoze",orc:"PF2E.TraitOrc",plant:"PF2E.TraitPlant",protean:"PF2E.TraitProtean",psychopomp:"PF2E.TraitPsychopomp",rakshasa:"PF2E.TraitRakshasa",ratfolk:"PF2E.TraitRatfolk","sea devil":"PF2E.TraitSeaDevil",skeleton:"PF2E.TraitSkeleton",soulbound:"PF2E.TraitSoulbound",spirit:"PF2E.TraitSpirit",sprite:"PF2E.TraitSprite",swarm:"PF2E.TraitSwarm",tengu:"PF2E.TraitTengu",troll:"PF2E.TraitTroll",undead:"PF2E.TraitUndead",vampire:"PF2E.TraitVampire",velstrac:"PF2E.TraitVelstrac",water:"PF2E.TraitWater",werecreature:"PF2E.TraitWerecreature",wight:"PF2E.TraitWight",wraith:"PF2E.TraitWraith",xulgath:"PF2E.TraitXulgath",zombie:"PF2E.TraitZombie"},mergeObject(exports.CONFIG.monsterTraits,exports.CONFIG.ancestryTraits),mergeObject(exports.CONFIG.monsterTraits,exports.CONFIG.damageTypes),exports.CONFIG.hazardTraits={auditory:"PF2E.TraitAuditory",environmental:"PF2E.TraitEnvironmental",haunt:"PF2E.TraitHaunt",magical:"PF2E.TraitMagical",mechanical:"PF2E.TraitMechanical"},mergeObject(exports.CONFIG.hazardTraits,exports.CONFIG.damageTypes),mergeObject(exports.CONFIG.hazardTraits,exports.CONFIG.magicalSchools),mergeObject(exports.CONFIG.hazardTraits,exports.CONFIG.damageTypes),mergeObject(exports.CONFIG.hazardTraits,exports.CONFIG.rarityTraits),exports.CONFIG.traitsDescriptions={common:"PF2E.TraitDescriptionCommon",uncommon:"PF2E.TraitDescriptionUncommon",rare:"PF2E.TraitDescriptionRare",unique:"PF2E.TraitDescriptionUnique",agile:"PF2E.TraitDescriptionAgile",attached:"PF2E.TraitDescriptionAttached",backstabber:"PF2E.TraitDescriptionBackstabber",backswing:"PF2E.TraitDescriptionBackswing",bomb:"PF2E.TraitDescriptionBomb","deadly-d6":"PF2E.TraitDescriptionDeadlyD6","deadly-d8":"PF2E.TraitDescriptionDeadlyD8","deadly-d10":"PF2E.TraitDescriptionDeadlyD10","deadly-d12":"PF2E.TraitDescriptionDeadlyD12",disarm:"PF2E.TraitDescriptionDisarm",dwarf:"PF2E.TraitDescriptionDwarf",elf:"PF2E.TraitDescriptionElf","fatal-d8":"PF2E.TraitDescriptionFatalD8","fatal-d10":"PF2E.TraitDescriptionFatalD10","fatal-d12":"PF2E.TraitDescriptionFatalD12",finesse:"PF2E.TraitDescriptionFinesse",forceful:"PF2E.TraitDescriptionForceful","free-hand":"PF2E.TraitDescriptionFreeHand",gnome:"PF2E.TraitDescriptionGnome",goblin:"PF2E.TraitDescriptionGoblin",grapple:"PF2E.TraitDescriptionGrapple",halfling:"PF2E.TraitDescriptionHalfling","jousting-d6":"PF2E.TraitDescriptionJoustingD6",nonlethal:"PF2E.TraitDescriptionNonlethal",orc:"PF2E.TraitDescriptionOrc",parry:"PF2E.TraitDescriptionParry",propulsive:"PF2E.TraitDescriptionPropulsive",range:"PF2E.TraitDescriptionRange","ranged-trip":"PF2E.TraitDescriptionRangedTrip",reach:"PF2E.TraitDescriptionReach","reach-10":"PF2E.TraitDescriptionReach10","reach-15":"PF2E.TraitDescriptionReach15","reach-20":"PF2E.TraitDescriptionReach20","reach-25":"PF2E.TraitDescriptionReach25",shove:"PF2E.TraitDescriptionShove",sweep:"PF2E.TraitDescriptionSweep",tethered:"PF2E.TraitDescriptionTethered","thrown-10":"PF2E.TraitDescriptionThrown10","thrown-20":"PF2E.TraitDescriptionThrown20","thrown-30":"PF2E.TraitDescriptionThrown30","thrown-40":"PF2E.TraitDescriptionThrown40",trip:"PF2E.TraitDescriptionTrip",twin:"PF2E.TraitDescriptionTwin","two-hand-d8":"PF2E.TraitDescriptionTwoHandD8","two-hand-d10":"PF2E.TraitDescriptionTwoHandD10","two-hand-d12":"PF2E.TraitDescriptionTwoHandD12",unarmed:"PF2E.TraitDescriptionUnarmed","versatile-s":"PF2E.TraitDescriptionVersatileS","versatile-p":"PF2E.TraitDescriptionVersatileP","versatile-b":"PF2E.TraitDescriptionVersatileB","volley-30":"PF2E.TraitDescriptionVolley30",attack:"PF2E.TraitDescriptionAttack",consumable:"PF2E.TraitDescriptionConsumable",death:"PF2E.TraitDescriptionDeath",disease:"PF2E.TraitDescriptionDisease",downtime:"PF2E.TraitDescriptionDowntime",drug:"PF2E.TraitDescriptionDrug",environement:"PF2E.TraitDescriptionEnvironement",extradimensional:"PF2E.TraitDescriptionExtradimensional",focused:"PF2E.TraitDescriptionFocused",fortune:"PF2E.TraitDescriptionFortune",general:"PF2E.TraitDescriptionGeneral",haunt:"PF2E.TraitDescriptionHaunt",healing:"PF2E.TraitDescriptionHealing",incorporeal:"PF2E.TraitDescriptionIncorporeal",infused:"PF2E.TraitDescriptionInfused",light:"PF2E.TraitDescriptionLight",linguistic:"PF2E.TraitDescriptionLinguistic",litany:"PF2E.TraitDescriptionLitany",mechanical:"PF2E.TraitDescriptionMechanical",mental:"PF2E.TraitDescriptionMental",minion:"PF2E.TraitDescriptionMinion",misfortune:"PF2E.TraitDescriptionMisfortune",move:"PF2E.TraitDescriptionMove",possession:"PF2E.TraitDescriptionPossession",precious:"PF2E.TraitDescriptionPrecious",prediction:"PF2E.TraitDescriptionPrediction",reload:"PF2E.TraitDescriptionReload",revelation:"PF2E.TraitDescriptionRevelation",scrying:"PF2E.TraitDescriptionScrying",shadow:"PF2E.TraitDescriptionShadow",sleep:"PF2E.TraitDescriptionSleep",splash:"PF2E.TraitDescriptionSplash",summoned:"PF2E.TraitDescriptionSummoned",tattoo:"PF2E.TraitDescriptionTattoo",teleportation:"PF2E.TraitDescriptionTeleportation",trap:"PF2E.TraitDescriptionTrap",virulent:"PF2E.TraitDescriptionVirulent",skill:"PF2E.TraitDescriptionSkill","half-elf":"PF2E.TraitDescriptionHalfElf","half-orc":"PF2E.TraitDescriptionHalfOrc",human:"PF2E.TraitDescriptionHuman",manipulate:"PF2E.TraitDescriptionManipulate",additive1:"PF2E.TraitDescriptionAdditive1",additive2:"PF2E.TraitDescriptionAdditive2",additive3:"PF2E.TraitDescriptionAdditive3",alchemical:"PF2E.TraitDescriptionAlchemical",archetype:"PF2E.TraitDescriptionArchetype",auditory:"PF2E.TraitDescriptionAuditory",aura:"PF2E.TraitDescriptionAura",cantrip:"PF2E.TraitDescriptionCantrip",companion:"PF2E.TraitDescriptionCompanion",composition:"PF2E.TraitDescriptionComposition",concentrate:"PF2E.TraitDescriptionConcentrate",consecration:"PF2E.TraitDescriptionConsecration",contact:"PF2E.TraitDescriptionContact",curse:"PF2E.TraitDescriptionCurse",darkness:"PF2E.TraitDescriptionDarkness",dedication:"PF2E.TraitDescriptionDedication",detection:"PF2E.TraitDescriptionDetection",emotion:"PF2E.TraitDescriptionEmotion",exploration:"PF2E.TraitDescriptionExploration",fear:"PF2E.TraitDescriptionFear",flourish:"PF2E.TraitDescriptionFlourish",incapacitation:"PF2E.TraitDescriptionIncapacitation",instinct:"PF2E.TraitDescriptionInstinct",magical:"PF2E.TraitDescriptionMagical",metamagic:"PF2E.TraitDescriptionMetamagic",morph:"PF2E.TraitDescriptionMorph",multiclass:"PF2E.TraitDescriptionMulticlass",oath:"PF2E.TraitDescriptionOath",open:"PF2E.TraitDescriptionOpen",polymorph:"PF2E.TraitDescriptionPolymorph",press:"PF2E.TraitDescriptionPress",rage:"PF2E.TraitDescriptionRage",secret:"PF2E.TraitDescriptionSecret",stance:"PF2E.TraitDescriptionStance",visual:"PF2E.TraitDescriptionVisual",chaotic:"PF2E.TraitDescriptionChaotic",evil:"PF2E.TraitDescriptionEvil",good:"PF2E.TraitDescriptionGood",lawful:"PF2E.TraitDescriptionLawful",arcane:"PF2E.TraitDescriptionArcane",divine:"PF2E.TraitDescriptionDivine",occult:"PF2E.TraitDescriptionOccult",primal:"PF2E.TraitDescriptionPrimal",air:"PF2E.TraitDescriptionAir",earth:"PF2E.TraitDescriptionEarth",fire:"PF2E.TraitDescriptionFire",water:"PF2E.TraitDescriptionWater",abjuration:"PF2E.TraitDescriptionAbjuration",conjuration:"PF2E.TraitDescriptionConjuration",divination:"PF2E.TraitDescriptionDivination",enchantment:"PF2E.TraitDescriptionEnchantment",evocation:"PF2E.TraitDescriptionEvocation",illusion:"PF2E.TraitDescriptionIllusion",necromancy:"PF2E.TraitDescriptionNecromancy",transmutation:"PF2E.TraitDescriptionTransmutation",acid:"PF2E.TraitDescriptionAcid",cold:"PF2E.TraitDescriptionCold",electricity:"PF2E.TraitDescriptionElectricity",force:"PF2E.TraitDescriptionForce",positive:"PF2E.TraitDescriptionPositive",sonic:"PF2E.TraitDescriptionSonic",negative:"PF2E.TraitDescriptionNegative",complex:"PF2E.TraitDescriptionComplex",alchemist:"PF2E.TraitDescriptionAlchemist",barbarian:"PF2E.TraitDescriptionBarbarian",bard:"PF2E.TraitDescriptionBard",champion:"PF2E.TraitDescriptionChampion",cleric:"PF2E.TraitDescriptionCleric",druid:"PF2E.TraitDescriptionDruid",fighter:"PF2E.TraitDescriptionFighter",monk:"PF2E.TraitDescriptionMonk",oracle:"PF2E.TraitDescriptionOracle",ranger:"PF2E.TraitDescriptionRanger",rogue:"PF2E.TraitDescriptionRogue",sorcerer:"PF2E.TraitDescriptionSorcerer",witch:"PF2E.TraitDescriptionWitch",wizard:"PF2E.TraitDescriptionWizard",bulwark:"PF2E.TraitDescriptionBulwark",comfort:"PF2E.TraitDescriptionComfort",flexible:"PF2E.TraitDescriptionFlexible",noisy:"PF2E.TraitDescriptionNoisy",ingested:"PF2E.TraitDescriptionIngested",inhaled:"PF2E.TraitDescriptionInhaled",injury:"PF2E.TraitDescriptionInjury",poison:"PF2E.TraitDescriptionPoison",finisher:"PF2E.TraitDescriptionFinisher",cursebound:"PF2E.TraitDescriptionCursebound",hex:"PF2E.TraitDescriptionHex"},exports.CONFIG.weaponHands={1:"PF2E.WeaponHands1","1+":"PF2E.WeaponHands1Plus",2:"PF2E.WeaponHands2"},exports.CONFIG.itemBonuses={"-2":"PF2E.ItemBonusMinus2",0:"PF2E.ItemBonus0",1:"PF2E.ItemBonus1",2:"PF2E.ItemBonus2",3:"PF2E.ItemBonus3"},exports.CONFIG.damageDice={0:"0",1:"1",2:"2",3:"3",4:"4"},exports.CONFIG.damageDie={d4:"PF2E.DamageDieD4",d6:"PF2E.DamageDieD6",d8:"PF2E.DamageDieD8",d10:"PF2E.DamageDieD10",d12:"PF2E.DamageDieD12"},exports.CONFIG.weaponRange={melee:"PF2E.WeaponRangeMelee",reach:"PF2E.WeaponRangeReach",10:"PF2E.WeaponRange10",20:"PF2E.WeaponRange20",30:"PF2E.WeaponRange30",40:"PF2E.WeaponRange40",50:"PF2E.WeaponRange50",60:"PF2E.WeaponRange60",80:"PF2E.WeaponRange80",100:"PF2E.WeaponRange100",120:"PF2E.WeaponRange120",140:"PF2E.WeaponRange140"},exports.CONFIG.weaponMAP={1:"-1/-2",2:"-2/-4",3:"-3/-6",4:"-4/-8",5:"-5/-10"},exports.CONFIG.weaponReload={"-":"-",0:"0",1:"1",2:"2",3:"3"},exports.CONFIG.armorTypes={unarmored:"PF2E.ArmorTypeUnarmored",light:"PF2E.ArmorTypeLight",medium:"PF2E.ArmorTypeMedium",heavy:"PF2E.ArmorTypeHeavy",shield:"PF2E.ArmorTypeShield"},exports.CONFIG.armorGroups={leather:"PF2E.ArmorGroupLeather",composite:"PF2E.ArmorGroupComposite",chain:"PF2E.ArmorGroupChain",plate:"PF2E.ArmorGroupPlate"},exports.CONFIG.consumableTypes={ammo:"PF2E.ConsumableTypeAmmo",bomb:"PF2E.ConsumableTypeBomb",potion:"PF2E.ConsumableTypePotion",oil:"PF2E.ConsumableTypeOil",scroll:"PF2E.ConsumableTypeScroll",talasman:"PF2E.ConsumableTypeTalisman",snare:"PF2E.ConsumableTypeSnare",drug:"PF2E.ConsumableTypeDrug",elixir:"PF2E.ConsumableTypeElixir",mutagen:"PF2E.ConsumableTypeMutagen",other:"PF2E.ConsumableTypeOther",poison:"PF2E.ConsumableTypePoison",tool:"PF2E.ConsumableTypeTool"},exports.CONFIG.preparationType={prepared:"PF2E.PreparationTypePrepared",spontaneous:"PF2E.PreparationTypeSpontaneous",innate:"PF2E.PreparationTypeInnate"},exports.CONFIG.areaTypes={burst:"PF2E.AreaTypeBurst",cone:"PF2E.AreaTypeCone",emanation:"PF2E.AreaTypeEmanation",line:"PF2E.AreaTypeLine"},exports.CONFIG.areaSizes={5:"PF2E.AreaSize5",10:"PF2E.AreaSize10",15:"PF2E.AreaSize15",20:"PF2E.AreaSize20",30:"PF2E.AreaSize30",40:"PF2E.AreaSize40",50:"PF2E.AreaSize50",60:"PF2E.AreaSize60",120:"PF2E.AreaSize120"},exports.CONFIG.alignment={LG:"PF2E.AlignmentLG",NG:"PF2E.AlignmentNG",CG:"PF2E.AlignmentCG",LN:"PF2E.AlignmentLN",N:"PF2E.AlignmentN",CN:"PF2E.AlignmentCN",LE:"PF2E.AlignmentLE",NE:"PF2E.AlignmentNE",CE:"PF2E.AlignmentCE"},exports.CONFIG.skillList={acrobatics:"PF2E.SkillAcrobatics",arcana:"PF2E.SkillArcana",athletics:"PF2E.SkillAthletics",crafting:"PF2E.SkillCrafting",deception:"PF2E.SkillDeception",diplomacy:"PF2E.SkillDiplomacy",intimidation:"PF2E.SkillIntimidation",medicine:"PF2E.SkillMedicine",nature:"PF2E.SkillNature",occultism:"PF2E.SkillOccultism",performance:"PF2E.SkillPerformance",religion:"PF2E.SkillReligion",society:"PF2E.SkillSociety",stealth:"PF2E.SkillStealth",survival:"PF2E.SkillSurvival",thievery:"PF2E.SkillThievery",lore:"PF2E.SkillLore"},exports.CONFIG.spellComponents={V:"PF2E.SpellComponentV",S:"PF2E.SpellComponentS",M:"PF2E.SpellComponentM"},exports.CONFIG.spellCategories={spell:"PF2E.SpellCategorySpell",focus:"PF2E.SpellCategoryFocus",ritual:"PF2E.SpellCategoryRitual"},exports.CONFIG.spellTypes={attack:"PF2E.SpellTypeAttack",save:"PF2E.SpellTypeSave",heal:"PF2E.SpellTypeHeal",utility:"PF2E.SpellTypeUtility",focus:"PF2E.SpellTypeFocus",ritual:"PF2E.SpellTypeRitual"},exports.CONFIG.spellLevels={0:"PF2E.SpellLevel0",1:"PF2E.SpellLevel1",2:"PF2E.SpellLevel2",3:"PF2E.SpellLevel3",4:"PF2E.SpellLevel4",5:"PF2E.SpellLevel5",6:"PF2E.SpellLevel6",7:"PF2E.SpellLevel7",8:"PF2E.SpellLevel8",9:"PF2E.SpellLevel9",10:"PF2E.SpellLevel10"},exports.CONFIG.featTypes={bonus:"PF2E.FeatTypeBonus",ancestry:"PF2E.FeatTypeAncestry",skill:"PF2E.FeatTypeSkill",general:"PF2E.FeatTypeGeneral",class:"PF2E.FeatTypeClass",classfeature:"PF2E.FeatTypeClassfeature",archetype:"PF2E.FeatTypeArchetype",ancestryfeature:"PF2E.FeatTypeAncestryfeature",pfsboon:"PF2E.FeatPFSBoonHeader",deityboon:"PF2E.FeatDeityBoonHeader",curse:"PF2E.FeatCurseHeader"},exports.CONFIG.featActionTypes={passive:"PF2E.FeatActionTypePassive",action:"PF2E.FeatActionTypeAction",reaction:"PF2E.FeatActionTypeReaction",free:"PF2E.FeatActionTypeFree"},exports.CONFIG.actionTypes={action:"PF2E.ActionTypeAction",reaction:"PF2E.ActionTypeReaction",free:"PF2E.ActionTypeFree",passive:"PF2E.ActionTypePassive"},exports.CONFIG.actionsNumber={1:"PF2E.ActionNumber1",2:"PF2E.ActionNumber2",3:"PF2E.ActionNumber3"},exports.CONFIG.actionCategories={interaction:"PF2E.ActionCategoryInteraction",defensive:"PF2E.ActionCategoryDefensive",offensive:"PF2E.ActionCategoryOffensive"},exports.CONFIG.proficiencyLevels={0:"PF2E.ProficiencyLevel0",1:"PF2E.ProficiencyLevel1",2:"PF2E.ProficiencyLevel2",3:"PF2E.ProficiencyLevel3",4:"PF2E.ProficiencyLevel4"},exports.CONFIG.heroPointLevels={0:"PF2E.HeroPointLevel0",1:"PF2E.HeroPointLevel1",2:"PF2E.HeroPointLevel2",3:"PF2E.HeroPointLevel3"},exports.CONFIG.actorSizes={tiny:"PF2E.ActorSizeTiny",sm:"PF2E.ActorSizeSmall",med:"PF2E.ActorSizeMedium",lg:"PF2E.ActorSizeLarge",huge:"PF2E.ActorSizeHuge",grg:"PF2E.ActorSizeGargantuan"},exports.CONFIG.speedTypes={swim:"PF2E.SpeedTypesSwim",climb:"PF2E.SpeedTypesClimb",fly:"PF2E.SpeedTypesFly",burrow:"PF2E.SpeedTypesBurrow"},exports.CONFIG.senses={darkvision:"PF2E.SensesDarkvision",greaterDarkvision:"PF2E.SensesGreaterDarkvision",lowLightVision:"PF2E.SensesLowLightVision",scent:"PF2E.SensesScent",Tremorsense:"PF2E.SensesTremorsense"},exports.CONFIG.bulkTypes={L:"PF2E.BulkTypeLight",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",10:"10",11:"11",12:"12",13:"13",14:"14",15:"15",16:"16",17:"17",18:"18",19:"19",20:"20",21:"21",22:"22",23:"23",24:"24",25:"25",26:"26",27:"27",28:"28",29:"29",30:"30",31:"31",32:"32",33:"33",34:"34",35:"35",36:"36",37:"37",38:"38",39:"39",40:"40",41:"41",42:"42",43:"43",44:"44",45:"45",46:"46",47:"47",48:"48",49:"49",50:"50"},exports.CONFIG.conditionTypes={blinded:"PF2E.ConditionTypeBlinded",broken:"PF2E.ConditionTypeBroken",clumsy:"PF2E.ConditionTypeClumsy",concealed:"PF2E.ConditionTypeConcealed",confused:"PF2E.ConditionTypeConfused",controlled:"PF2E.ConditionTypeControlled",dazzled:"PF2E.ConditionTypeDazzled",deafened:"PF2E.ConditionTypeDeafened",doomed:"PF2E.ConditionTypeDoomed",drained:"PF2E.ConditionTypeDrained",dying:"PF2E.ConditionTypeDying",encumbered:"PF2E.ConditionTypeEncumbered",enfeebled:"PF2E.ConditionTypeEnfeebled",fascinated:"PF2E.ConditionTypeFascinated",fatigued:"PF2E.ConditionTypeFatigued","flat-footed":"PF2E.ConditionTypeFlatFooted",fleeing:"PF2E.ConditionTypeFleeing",friendly:"PF2E.ConditionTypeFriendly",frightened:"PF2E.ConditionTypeFrightened",grabbed:"PF2E.ConditionTypeGrabbed",helpful:"PF2E.ConditionTypeHelpful",hidden:"PF2E.ConditionTypeHidden",hostile:"PF2E.ConditionTypeHostile",immobilized:"PF2E.ConditionTypeImmobilized",indifferent:"PF2E.ConditionTypeIndifferent",invisible:"PF2E.ConditionTypeInvisible",observed:"PF2E.ConditionTypeObserved",paralyzed:"PF2E.ConditionTypeParalyzed",persistent:"PF2E.ConditionTypePersistent",petrified:"PF2E.ConditionTypePetrified",prone:"PF2E.ConditionTypeProne",quickened:"PF2E.ConditionTypeQuickened",restrained:"PF2E.ConditionTypeRestrained",sickened:"PF2E.ConditionTypeSickened",slowed:"PF2E.ConditionTypeSlowed",stunned:"PF2E.ConditionTypeStunned",stupefied:"PF2E.ConditionTypeStupefied",unconscious:"PF2E.ConditionTypeUnconscious",undetected:"PF2E.ConditionTypeUndetected",unfriendly:"PF2E.ConditionTypeUnfriendly",unnoticed:"PF2E.ConditionTypeUnnoticed",wounded:"PF2E.ConditionTypeWounded"},exports.CONFIG.pfsFactions={EA:"PF2E.PFS.Factions.EA",GA:"PF2E.PFS.Factions.GA",HH:"PF2E.PFS.Factions.HH",VS:"PF2E.PFS.Factions.VS",RO:"PF2E.PFS.Factions.RO",VW:"PF2E.PFS.Factions.VW"},exports.CONFIG.pfsSchools={none:"PF2E.PFS.School.None",scrolls:"PF2E.PFS.School.Scrolls",spells:"PF2E.PFS.School.Spells",swords:"PF2E.PFS.School.Swords"},exports.CONFIG.immunityTypes={"death effects":"PF2E.ImmunityTypeDeathEffects","fear effects":"PF2E.ImmunityTypeFearEffects","critical-hits":"PF2E.ImmunityTypeCriticalHits","object-immunities":"PF2E.ImmunityTypeObjectImmunities","precision-damage":"PF2E.ImmunityTypePrecisionDamage",magic:"PF2E.ImmunityTypeMagic",sleep:"PF2E.ImmunityTypeSleep","swarm-mind":"PF2E.ImmunityTypeSwarmMind",visual:"PF2E.ImmunityTypeVisual",spellDeflection:"PF2E.ImmunityTypeSpellDeflection","nonlethal attacks":"PF2E.ImmunityTypeNonlethalAttacks",disease:"PF2E.ImmunityTypeDisease",necromancy:"PF2E.ImmunityTypeNecromancy",healing:"PF2E.ImmunityTypeHealing",blinded:"PF2E.ConditionTypeBlinded",broken:"PF2E.ConditionTypeBroken",clumsy:"PF2E.ConditionTypeClumsy",concealed:"PF2E.ConditionTypeConcealed",confused:"PF2E.ConditionTypeConfused",controlled:"PF2E.ConditionTypeControlled",dazzled:"PF2E.ConditionTypeDazzled",deafened:"PF2E.ConditionTypeDeafened",doomed:"PF2E.ConditionTypeDoomed",drained:"PF2E.ConditionTypeDrained",dying:"PF2E.ConditionTypeDying",encumbered:"PF2E.ConditionTypeEncumbered",enfeebled:"PF2E.ConditionTypeEnfeebled",fascinated:"PF2E.ConditionTypeFascinated",fatigued:"PF2E.ConditionTypeFatigued","flat-footed":"PF2E.ConditionTypeFlatFooted",fleeing:"PF2E.ConditionTypeFleeing",friendly:"PF2E.ConditionTypeFriendly",frightened:"PF2E.ConditionTypeFrightened",grabbed:"PF2E.ConditionTypeGrabbed",helpful:"PF2E.ConditionTypeHelpful",hidden:"PF2E.ConditionTypeHidden",hostile:"PF2E.ConditionTypeHostile",immobilized:"PF2E.ConditionTypeImmobilized",indifferent:"PF2E.ConditionTypeIndifferent",invisible:"PF2E.ConditionTypeInvisible",observed:"PF2E.ConditionTypeObserved",paralyzed:"PF2E.ConditionTypeParalyzed",persistent:"PF2E.ConditionTypePersistent",petrified:"PF2E.ConditionTypePetrified",prone:"PF2E.ConditionTypeProne",quickened:"PF2E.ConditionTypeQuickened",restrained:"PF2E.ConditionTypeRestrained",sickened:"PF2E.ConditionTypeSickened",slowed:"PF2E.ConditionTypeSlowed",stunned:"PF2E.ConditionTypeStunned",stupefied:"PF2E.ConditionTypeStupefied",unconscious:"PF2E.ConditionTypeUnconscious",undetected:"PF2E.ConditionTypeUndetected",unfriendly:"PF2E.ConditionTypeUnfriendly",unnoticed:"PF2E.ConditionTypeUnnoticed",wounded:"PF2E.ConditionTypeWounded",acid:"PF2E.DamageTypeAcid",bludgeoning:"PF2E.DamageTypeBludgeoning",cold:"PF2E.DamageTypeCold",fire:"PF2E.DamageTypeFire",force:"PF2E.DamageTypeForce",electricity:"PF2E.DamageTypeElectricity",sonic:"PF2E.DamageTypeSonic",negative:"PF2E.DamageTypeNegative",piercing:"PF2E.DamageTypePiercing",poison:"PF2E.DamageTypePoison",positive:"PF2E.DamageTypePositive",bleed:"PF2E.DamageTypeBleed",mental:"PF2E.DamageTypeMental",precision:"PF2E.DamageTypePrecision",slashing:"PF2E.DamageTypeSlashing",chaotic:"PF2E.DamageTypeChaotic",lawful:"PF2E.DamageTypeLawful",good:"PF2E.DamageTypeGood",evil:"PF2E.DamageTypeEvil",light:"PF2E.DamageTypeLight",curse:"PF2E.DamageTypeCurse",olfactory:"PF2E.DamageTypeOlfactory",confusion:"PF2E.DamageTypeConfusion","swarm attacks":"PF2E.DamageTypeSwarmAttacks",emotion:"PF2E.DamageTypeEmotion",possession:"PF2E.DamageTypePosession"},exports.CONFIG.languages={common:"PF2E.LanguageCommon",draconic:"PF2E.LanguageDraconic",dwarven:"PF2E.LanguageDwarven",elven:"PF2E.LanguageElven",gnomish:"PF2E.LanguageGnomish",goblin:"PF2E.LanguageGoblin",halfling:"PF2E.LanguageHalfling",jotun:"PF2E.LanguageJotun",orcish:"PF2E.LanguageOrcish",sylvan:"PF2E.LanguageSylvan",undercommon:"PF2E.LanguageUndercommon",ysoki:"PF2E.LanguageYsoki",abyssal:"PF2E.LanguageAbyssal",aklo:"PF2E.LanguageAklo",algollthu:"PF2E.LanguageAlghollthu",amurrun:"PF2E.LanguageAmurrun",anadi:"PF2E.LanguageAnadi",aquan:"PF2E.LanguageAquan",arboreal:"PF2E.LanguageArboreal",auran:"PF2E.LanguageAuran",azlanti:"PF2E.LanguageAzlanti",boggard:"PF2E.LanguageBoggard",caligni:"PF2E.LanguageCaligni",celestial:"PF2E.LanguageCelestial",cyclops:"PF2E.LanguageCyclops",daemonic:"PF2E.LanguageDaemonic",destrachan:"PF2E.LanguageDestrachan",dziriak:"PF2E.LanguageDziriak",erutaki:"PF2E.LanguageErutaki",garundi:"PF2E.LanguageGarundi",gnoll:"PF2E.LanguageGnoll",grippli:"PF2E.LanguageGrippli",hallit:"PF2E.LanguageHallit",ignan:"PF2E.LanguageIgnan",infernal:"PF2E.LanguageInfernal",iruxi:"PF2E.LanguageIruxi",jistkan:"PF2E.LanguageJistkan",jyoti:"PF2E.LanguageJyoti",kelish:"PF2E.LanguageKelish",mwangi:"PF2E.LanguageMwangi",necril:"PF2E.LanguageNecril",osiriani:"PF2E.LanguageOsiriani",protean:"PF2E.LanguageProtean",requian:"PF2E.LanguageRequian",shadowtongue:"PF2E.LanguageShadowtongue",shoanti:"PF2E.LanguageShoanti",shoony:"PF2E.LanguageShoony",skald:"PF2E.LanguageSkald",sphinx:"PF2E.LanguageSphinx",strix:"PF2E.LanguageStrix",tengu:"PF2E.LanguageTengu",terran:"PF2E.LanguageTerran",thassilonian:"PF2E.LanguageThassilonian",tien:"PF2E.LanguageTien",utopian:"PF2E.LanguageUtopian",varisian:"PF2E.LanguageVarisian",varki:"PF2E.LanguageVarki",vudrani:"PF2E.LanguageVudrani",druidic:"PF2E.LanguageDruidic"},exports.CONFIG.spellScalingModes={none:"PF2E.SpellScalingModeNone",level1:"PF2E.SpellScalingModeLevel1",level2:"PF2E.SpellScalingModeLevel2",level3:"PF2E.SpellScalingModeLevel3",level4:"PF2E.SpellScalingModeLevel4",levelsecond:"PF2E.SpellScalingModeLevelsecond",levelthird:"PF2E.SpellScalingModeLevelthird",levelfourth:"PF2E.SpellScalingModeLevelfourth",levelfifth:"PF2E.SpellScalingModeLevelfifth",levelsixth:"PF2E.SpellScalingModeLevelsixth",levelseventh:"PF2E.SpellScalingModeLevelseventh",leveleighth:"PF2E.SpellScalingModeLeveleighth",levelninth:"PF2E.SpellScalingModeLevelninth",leveltenth:"PF2E.SpellScalingModeLeveltenth"},exports.CONFIG.attackEffects={Grab:"PF2E.AttackEffectGrab","Improved Grab":"PF2E.AttackEffectImprovedGrab",Constrict:"PF2E.AttackEffectConstrict","Greater Constrict":"PF2E.AttackEffectGreaterConstrict",Knockdown:"PF2E.AttackEffectKnockdown","Improved Knockdown":"PF2E.AttackEffectImprovedKnockdown",Push:"PF2E.AttackEffectPush","Improved Push":"PF2E.AttackEffectImprovedPush",Trip:"PF2E.AttackEffectTrip"},exports.CONFIG.monsterAbilities=()=>({"All-Around Vision":{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 342</i></a><br>This monster can see in all directions simultaneously, and therefore can’t be flanked.'},"Aquatic Ambush":{actionType:"action",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 342</i></a><br><b>Requirements</b> The monster is hiding in water and a creature that hasn’t detected it is within the listed number of feet. <b>Effect</b> The monster moves up to its swim Speed + 10 feet toward the triggering creature, traveling on water and on land. Once the creature is in reach, the monster makes a Strike against it. The creature is <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=16">flat-footed</a> against this Strike.'},"Attack of Opportunity":{actionType:"reaction",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 342</i></a><br><b>Trigger</b> A creature within the monster’s reach uses a manipulate action or a move action, makes a ranged attack, or leaves a square during a move action it’s using. <b>Effect</b> The monster attempts a melee Strike against the triggering creature. If the attack is a critical hit and the trigger was a manipulate action, the monster disrupts that action. This Strike doesn’t count toward the monster’s multiple attack penalty, and its multiple attack penalty doesn’t apply to this Strike.'},"At-Will Spells":{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 342</i></a><br>The monster can cast its at-will spells any number of times without using up spell slots.'},Aura:{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 342</i></a><br>A monster’s aura automatically affects everything within a specified emanation around that monster. The monster doesn’t need to spend actions on the aura; rather, the aura’s effects are applied at specific times, such as when a creature ends its turn in the aura or when creatures enter the aura.<br><br> If an aura does nothing but deal damage, its entry lists only the radius, damage, and saving throw. Such auras deal this damage to a creature when the creature enters the aura and when a creature starts its turn in the aura. A creature can take damage from the aura only once per round.<br><br> The GM might determine that a monster’s aura doesn’t affect its own allies. For example, a creature might be immune to a monster’s frightful presence if they have been around each other for a long time.'},Buck:{actionType:"reaction",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 342</i></a><br>Most monsters that serve as mounts can attempt to\nbuck off unwanted or annoying riders, but most mounts\nwill not use this reaction against a trusted creature unless\nthe mounts are spooked or mistreated. <b>Trigger</b> A creature\nMounts or uses the Command an Animal action while riding\nthe monster. <b>Effect</b> The triggering creature must succeed\nat a Reflex saving throw against the listed DC or fall off the\ncreature and land prone. If the save is a critical failure, the\ntriggering creature also takes 1d6 bludgeoning damage in\naddition to the normal damage for the fall.'},"Catch Rock":{actionType:"reaction",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 342</i></a><br><b>Requirements</b> The monster must have a free hand but can Release anything it’s holding as part of this reaction. <b>Trigger</b> The monster is targeted with a thrown rock Strike or a rock would fall on the monster. <b>Effect</b> The monster gains a +4 circumstance bonus to its AC against the triggering attack or to any defense against the falling rock. If the attack misses or the monster successfully defends against the falling rock, the monster catches the rock, takes no damage, and is now holding the rock.'},"Change Shape":{actionType:"action",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 342</i></a><br>(<a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=32">concentrate</a>, [magical tradition], <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=127">polymorph</a>, <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=157">transmutation</a>) The monster changes its shape indefinitely. It can use this action again to return to its natural shape or adopt a new shape. Unless otherwise noted, a monster cannot use Change Shape to appear as a specific individual. Using Change Shape counts as creating a disguise for the Impersonate use of Deception. The monster’s transformation automatically defeats Perception DCs to determine whether the creature is a member of the ancestry or creature type into which it transformed, and it gains a +4 status bonus to its Deception DC to prevent others from seeing through its disguise. Change Shape abilities specify what shapes the monster can adopt. The monster doesn’t gain any special abilities of the new shape, only its physical form. For example, in each shape, it replaces its normal Speeds and Strikes, and might potentially change its senses or size. Any changes are listed in its stat block.'},"Constant Spells":{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 342</i></a><br>A constant spell affects the monster without the monster needing to cast it, and its duration is unlimited. If a constant spell gets counteracted, the monster can reactivate it by spending the normal spellcasting actions the spellrequires.'},Constrict:{actionType:"action",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 342</i></a><br>The monster deals the listed amount of damage to any number of creatures grabbed or restrained by it. Each of those creatures can attempt a basic Fortitude save with the listed DC.'},Coven:{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 342</i></a><br>(<a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=47">divination</a>, <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=106">mental</a>, <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=120">occult</a>) This monster can form a coven with two or more other creatures who also have the coven ability. This involves performing an 8-hour ceremony with all prospective coven members. After the coven is formed, each of its members gains elite adjustments (page 6), adjusting their levels accordingly. Coven members can sense other members’ locations and conditions by spending a single action, which has the concentrate trait, and can sense what another coven member is sensing as a two-action activity, which has the concentrate trait as well.<br><br> Covens also grant spells and rituals to their members, but these can be cast only in cooperation between three coven members who are all within 30 feet of one another. A coven member can contribute to a coven spell with a single-action spellcasting activity that has a single verbal component. If two coven members have contributed these actions within the last round, a third member can cast a coven spell on her turn by spending the normal spellcasting actions. A coven can cast its coven spells an unlimited number of times but can cast only one coven spell each round. All covens grant the 8th-level <i><a style="text-decoration:underline" href="https://2e.aonprd.com/Spells.aspx?ID=17">baleful polymorph</a></i> spell and all the following spells, which the coven can cast at any level up to 5th: <i><a style="text-decoration:underline" href="https://2e.aonprd.com/Spells.aspx?ID=15">augury</a></i>, <i><a style="text-decoration:underline" href="https://2e.aonprd.com/Spells.aspx?ID=34">charm</a></i>, <i><a style="text-decoration:underline" href="https://2e.aonprd.com/Spells.aspx?ID=39">clairaudience</a></i>, <i><a style="text-decoration:underline" href="https://2e.aonprd.com/Spells.aspx?ID=40">clairvoyance</a></i>, <i><a style="text-decoration:underline" href="https://2e.aonprd.com/Spells.aspx?ID=90">dream message</a></i>, <i><a style="text-decoration:underline" href="https://2e.aonprd.com/Spells.aspx?ID=159">illusory disguise</a></i>, <i><a style="text-decoration:underline" href="https://2e.aonprd.com/Spells.aspx?ID=161">illusory scene</a></i>, <i><a style="text-decoration:underline" href="https://2e.aonprd.com/Spells.aspx?ID=239">prying eye</a></i>, and <i><a style="text-decoration:underline" href="https://2e.aonprd.com/Spells.aspx?ID=329">talking corpse</a></i>. Individual creatures with the coven ability also grant additional spells to any coven they join. A coven can also cast the <i><a style="text-decoration:underline" href="https://2e.aonprd.com/Rituals.aspx?ID=9">control weather</a></i> ritual, with a DC of 23 instead of the standard DC.<br><br> If a coven member leaving the coven or the death of a coven member brings the coven below three members, the remaining members keep their elite adjustments for 24 hours, but without enough members to contribute the necessary actions, they can’t cast coven spells.'},Darkvision:{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>A monster with darkvision can see perfectly well in areas of darkness and dim light, though such vision is in black and white only. Some forms of magical darkness, such as a 4th-level <i><a style="text-decoration:underline" href="https://2e.aonprd.com/Spells.aspx?ID=59">darkness</a></i> spell, block normal darkvision. A monster with greater darkvision, however, can see through even these forms of magical darkness.'},Disease:{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>When a creature is exposed to a monster’s disease, it attempts a Fortitude save or succumbs to the disease. The level of a disease is the level of the monster in icting the disease. The disease follows the <a style="text-decoration:underline" href="https://2e.aonprd.com/Rules.aspx?ID=361">rules for afflictions</a>.'},Engulf:{actionType:"action",actionCost:2,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>The monster Strides up to double its Speed and can move through the spaces of any creatures in its path. Any creature of the monster’s size or smaller whose space the monster moves through can attempt a Reflex save with the listed DC to avoid being engulfed. A creature unable to act automatically critically fails this save. If a creature succeeds at its save, it can choose to be either pushed aside (out of the monster’s path) or pushed in front of the monster to the end of the monster’s movement. The monster can attempt to Engulf the same creature only once in a single use of Engulf. The monster can contain as many creatures as can fit in its space.<br><br> A creature that fails its save is pulled into the monster’s body. It is grabbed, is <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=35">slowed 1</a>, and has to hold its breath or start suffocating. The creature takes the listed amount of damage when first engulfed and at the end of each of its turns while it’s engulfed. An engulfed creature can get free by Escaping against the listed escape DC. An engulfed creature can attack the monster engulfing it, but only with unarmed attacks or with weapons of light Bulk or less. The engulfing creature is <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=16">flat-footed</a> against the attack. If the monster takes piercing or slashing damage equaling or exceeding the listed Rupture value from a single attack or spell, the engulfed creature cuts itself free. A creature that gets free by either method can immediately breathe and exits the swallowing monster’s space.<br><br> If the monster dies, all creatures it has engulfed are automatically released as the monster’s form loses cohesion.'},"Fast Healing":{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>A monster with this ability regains the given number of Hit Points each round at the beginning of its turn.'},Ferocity:{actionType:"reaction",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br><b>Trigger</b> The monster is reduced to 0 HP. <b>Effect</b> The monster avoids being knocked out and remains at 1 HP, but its <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=42">wounded</a> value increases by 1. When it is <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=42">wounded 3</a>, it can no longer use this ability.'},"Frightful Presence":{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>(<a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=206">aura</a>, <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=60">emotion</a>, <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=68">fear</a>, <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=106">mental</a>) A creature that first enters the area must attempt a Will save. Regardless of the result of the saving throw, the creature is temporarily immune to this monster’s Frightful Presence for 1 minute.<br><br> <b>Critical Success</b> The creature is unaffected by the presence.<br> <b>Success</b> The creature is <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=19">frightened 1</a>.<br> <b>Failure</b> The creature is <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=19">frightened 2</a>.<br> <b>Critical Failure</b> The creature is <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=19">frightened 4</a>.'},Grab:{actionType:"action",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br><b>Requirements</b> The monster’s last action was a success with a Strike that lists Grab in its damage entry, or it has a creature grabbed using this action. <b>Effect</b> The monster automatically Grabs the target until the end of the monster’s next turn. The creature is grabbed by whichever body part the monster attacked with, and that body part can’t be used to Strike creatures until the grab is ended.<br><br> Using Grab extends the duration of the monster’s Grab until the end of its next turn for all creatures grabbed by it. A grabbed creature can use the <a style="text-decoration:underline" href="https://2e.aonprd.com/Actions.aspx?ID=79">Escape</a> action to get out of the grab, and the Grab ends for a grabbed creatures if the monster moves away from it.'},"Greater Constrict":{actionType:"action",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>The monster deals the listed amount of damage to any number of creatures grabbed or restrained by it. Each of those creatures can attempt a basic Fortitude save with the listed DC. A creature that fails this save falls <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=38">unconscious</a>, and a creature that succeeds is then temporarily immune to falling <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=38">unconscious</a> from Greater Constrict for 1 minute.'},"Improved Grab":{actionType:"free",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>The monster can use Grab as a free action triggered by a hit with its initial attack. A monster with Improved Grab still needs to spend an action to extend the duration for creatures it already has grabbed.'},"Improved Knockdown":{actionType:"free",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>The monster can use Knockdown as a free action triggered by a hit with its initial attack.'},"Improved Push":{actionType:"free",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>The monster can use Push as a free action triggered by a hit with its initial attack.'},Knockdown:{actionType:"action",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br><b>Requirements</b> The monster’s last action was a success with a Strike that lists Knockdown in its damage entry. <b>Effect</b> The monster knocks the target prone.'},Lifesense:{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>Lifesense allows a monster to sense the vital essence of living and undead creatures within the listed range. The sense can distinguish between the positive energy animating living creatures and the negative energy animating undead creatures, much as sight distinguishes colors.'},"Light Blindness":{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>When first exposed to bright light, the monster is <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=1">blinded</a> until the end of its next turn. After this exposure, light doesn’t blind the monster again until after it spends 1 hour in darkness. However, as long as the monster is in an area of bright light, it’s <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=7">dazzled</a>.'},"Low-Light Vision":{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>The monster can see in dim light as though it were bright light, so it ignores the <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=4">concealed</a> condition due to dim light.'},Poison:{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>When a creature is exposed to a monster’s poison, it attempts a Fortitude save to avoid becoming poisoned. The level of a poison is the level of the monster inflicting the poison. The poison follows the <a style="text-decoration:underline" href="https://2e.aonprd.com/Rules.aspx?ID=361">rules for afflictions</a>.'},Push:{actionType:"action",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br><b>Requirements</b> The monster’s last action was a success with a Strike that lists Push in its damage entry. <b>Effect</b> The monster automatically knocks the target away from the monster. Unless otherwise noted in the ability description, the creature is pushed 5 feet. If the attack was a critical hit, this distance is doubled.'},Regeneration:{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 343</i></a><br>This monster regains the listed number of Hit Points each round at the beginning of its turn. Its <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=11">dying</a> condition never increases beyond <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=11">dying 3</a> as long as its regeneration is active. However, if it takes damage of a type listed in the regeneration entry, its regeneration deactivates until the end of its next turn. Deactivate the regeneration before applying any damage of a listed type, since that damage might kill the monster by bringing it to <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=11">dying 4</a>.'},Rend:{actionType:"action",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 344</i></a><br>A Rend entry lists a Strike the monster has. <b>Requirements</b> The monster hit the same enemy with two consecutive Strikes of the listed type in the same round. <b>Effect</b> The monster automatically deals that Strike’s damage again to the enemy.'},"Retributive Strike":{actionType:"reaction",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 344</i></a><br><b>Trigger</b> An enemy damages the monster’s ally, and both are within 15 feet of the monster. <b>Effect</b> The ally gains resistance to all damage against the triggering damage equal to 2 + the monster’s level. If the foe is within reach, the monster makes a melee Strike against it.'},Scent:{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 344</i></a><br>Scent involves sensing creatures or objects by smell, and is usually a vague sense. The range is listed in the ability, and it functions only if the creature or object being detected emits an aroma (for instance, incorporeal creatures usually do not exude an aroma).<br><br> If a creature emits a heavy aroma or is upwind, the GM can double or even triple the range of scent abilities used to detect that creature, and the GM can reduce the range if a creature is downwind.'},"Shield Block":{actionType:"reaction",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 344</i></a><br><b>Trigger</b> The monster has its shield raised and takes damage from a physical attack. <b>Effect</b> The monster snaps its shield into place to deflect a blow. The shield prevents the monster from taking an amount of damage up to the shield’s Hardness. The monster and the shield each take any remaining damage, possibly breaking or destroying the shield.'},"Sneak Attack":{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 344</i></a><br>When the monster Strikes a creature that has the <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=16">flat-footed</a> condition with an <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=170">agile</a> or <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=179">finesse</a> melee weapon, an <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=170">agile</a> or <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=179">finesse</a> unarmed attack, or a ranged weapon attack, it also deals the listed precision damage. For a ranged attack with a thrown weapon, that weapon must also be an <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=170">agile</a> or <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=179">finesse</a> weapon.'},"Swallow Whole":{actionType:"action",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 344</i></a><br>(<a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=15">attack</a>) The monster attempts to swallow a creature of the listed size or smaller that it has grabbed in its jaws or mouth. If a swallowed creature is of the maximum size listed, the monster can’t use Swallow Whole again. If the creature is smaller than the maximum, the monster can usually swallow more creatures; the GM determines the maximum. The monster attempts an <a style="text-decoration:underline" href="https://2e.aonprd.com/Skills.aspx?ID=3">Athletics</a> check opposed by the grabbed creature’s Reflex DC. If it succeeds, it swallows the creature. The monster’s mouth or jaws no longer grab a creature it has swallowed, so the monster is free to use them to Strike or Grab once again. The monster can’t attack creatures it has swallowed.<br><br> A swallowed creature is <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=20">grabbed</a>, is <a style="text-decoration:underline" href="https://2e.aonprd.com/Conditions.aspx?ID=35">slowed 1</a>, and has to hold its breath or start suffocating. The swallowed creature takes the listed amount of damage when first swallowed and at the end of each of its turns while it’s swallowed. If the victim Escapes this ability’s grabbed condition, it exits through the monster’s mouth. This frees any other creature grabbed in the monster’s mouth or jaws. A swallowed creature can attack the monster that has swallowed it, but only with unarmed attacks or with weapons of light Bulk or less. The engulfing creature is flat-footed against the attack. If the monster takes piercing or slashing damage equaling or exceeding the listed Rupture value from a single attack or spell, the engulfed creature cuts itself free. A creature that gets free by either Escaping or cutting itself free can immediately breathe and exits the swallowing monster’s space.<br><br> If the monster dies, a swallowed creature can be freed by creatures adjacent to the corpse if they spend a combined total of 3 actions cutting the monster open with a weapon or unarmed attack that deals piercing or slashing damage.'},"Swarm Mind":{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 344</i></a><br>This monster doesn’t have a single mind (typically because it’s a swarm of smaller creatures), and is immune to mental effects that target only a specific number of creatures. It is still subject to mental effects that affect all creatures in an area.'},Telepathy:{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 344</i></a><br>(<a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=206">aura</a>, <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=47">divination</a>, <a style="text-decoration:underline" href="https://2e.aonprd.com/Traits.aspx?ID=103">magical</a>) A monster with telepathy can communicate mentally with any creatures within the listed radius, as long as they share a language. This doesn’t give any special access to their thoughts, and communicates no more information than normal speech would.'},"Throw Rock":{actionType:"action",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 344</i></a><br>The monster picks up a rock within reach or retrieves a stowed rock and throws it, making a ranged Strike.'},Trample:{actionType:"action",actionCost:3,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 344</i></a><br>The monster Strides up to double its Speed and can move through the spaces of creatures of the listed size, Trampling each creature whose space it enters. The monster can attempt to Trample the same creature only once in a single use of Trample. The monster deals the damage of the listed Strike, but trampled creatures can attempt a basic Reflex save at the listed DC (no damage on a critical success, half damage on a success, double damage on a critical failure).'},Tremorsense:{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 344</i></a><br>Tremorsense allows a monster to feel the vibrations through a solid surface caused by movement. It is an imprecise sense with a limited range (listed in the ability). Tremorsense functions only if the monster is on the same surface as the subject, and only if the subject is moving along (or burrowing through) the surface.'},Wavesense:{actionType:"passive",actionCost:1,description:'<b>Source</b> <a href="https://paizo.com/products/btq01y0m?Pathfinder-Bestiary" target="_blank" class="external-link"><i>Bestiary pg. 344</i></a><br>This sense allows a monster to feel vibrations caused by movement through a liquid. It’s an imprecise sense with a limited range (listed in the ability). Wavesense functions only if monster and the subject are in the same body of liquid, and only if the subject is moving through the liquid.'}})},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const compendium_browser_1=__webpack_require__(12);exports.default=function(){game.settings.register("pf2e","worldSchemaVersion",{name:"Actor Schema Version",hint:"Records the schema version for PF2e system actor data. (don't modify this unless you know what you are doing)",scope:"world",config:!0,default:0,type:Number}),game.settings.register("pf2e","defaultTokenSettings",{name:"Default Prototype Token Settings",hint:"Automatically set advised prototype token settings to newly created Actors.",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("pf2e","ignoreCoinBulk",{name:"Coins are weightless",hint:"Toggle on to ignore currency weight.",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("pf2e","ignoreContainerOverflow",{name:"Do not combine stacks from different containers when calculating bulk",hint:"When enabled, a backpack and belt pouch with each 999 coins will add up to 0 bulk. When disabled, the above example will combine all stacks from all containers together and add up to 1 bulk.",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("pf2e","staminaVariant",{name:"Stamina Variant Rules",hint:"Play with the stamina variant from Gamemastery Guide pg 200",scope:"world",config:!0,default:0,type:Number,choices:{0:"Do not use Stamina",1:"Use Stamina"}}),game.settings.register("pf2e","proficiencyVariant",{name:"Proficiency without Level Variant Rules",hint:"Play with the proficiency without level variant from Gamemastery Guide pg 198.",scope:"world",config:!0,default:"ProficiencyWithLevel",type:String,choices:{ProficiencyWithLevel:"Use Default rules",ProficiencyWithoutLevel:"Use Variant rules"}}),game.settings.register("pf2e","proficiencyUntrainedModifier",{name:"Untrained proficiency modifier",hint:"Adjust to your liking to compliment the proficiency without level variant rules, recommended with variant rules is -2. Requires recalculation by reload or modifying a value per actor.",scope:"world",config:!0,default:0,type:Number}),game.settings.register("pf2e","proficiencyTrainedModifier",{name:"Trained proficiency modifier",hint:"Adjust to your liking to compliment the proficiency without level variant rules. Requires recalculation by reload or modifying a value per actor.",scope:"world",config:!0,default:2,type:Number}),game.settings.register("pf2e","proficiencyExpertModifier",{name:"Expert proficiency modifier",hint:"Adjust to your liking to compliment the proficiency without level variant rules. Requires recalculation by reload or modifying a value per actor.",scope:"world",config:!0,default:4,type:Number}),game.settings.register("pf2e","proficiencyMasterModifier",{name:"Master proficiency modifier",hint:"Adjust to your liking to compliment the proficiency without level variant rules. Requires recalculation by reload or modifying a value per actor.",scope:"world",config:!0,default:6,type:Number}),game.settings.register("pf2e","proficiencyLegendaryModifier",{name:"Legendary proficiency modifier",hint:"Adjust to your liking to compliment the proficiency without level variant rules. Requires recalculation by reload or modifying a value per actor.",scope:"world",config:!0,default:8,type:Number}),game.settings.register("pf2e","critRule",{name:"Critical Damage Rule",hint:"Use a different rule for doubling damage on a critical hit",scope:"world",config:!0,default:"doubledamage",type:String,choices:{doubledamage:"Double the damage",doubledice:"Double the number of dice"}}),game.settings.register("pf2e","compendiumBrowserPacks",{name:"Compendium Browser Packs",hint:"Settings to exclude packs from loading",default:"{}",type:String,scope:"world",onChange:settings=>{compendium_browser_1.compendiumBrowser.loadSettings()}}),game.settings.register(game.system.id,"enabledRulesUI",{name:"Advanced Rule Element UI",hint:"When enabled, show the advanced rule element UI on items. Be very careful with this, as it can break theactors and items if you are not sure what you are doing or make a mistake.",scope:"world",config:!0,default:!1,type:Boolean})}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.default=class{constructor({steps:steps=1}={}){this._steps=steps,this._counter=-1,this._label=""}advance(label){this._counter+=1,this._label=label,this._updateUI()}close(label=null){label&&(this._label=label),this._counter=this._steps,this._updateUI()}_updateUI(){const loader=document.getElementById("loading"),pct=Math.clamped(100*this._counter/this._steps,0,100);loader.querySelector("#context").textContent=this._label,loader.querySelector("#loading-bar").style.width=pct+"%",loader.querySelector("#progress").textContent=`${this._counter} / ${this._steps}`,loader.style.display="block",this._counter!==this._steps||loader.hidden||$(loader).fadeOut(2e3)}}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(){return loadTemplates(["systems/pf2e/templates/actors/crb-style/partials/modifiers-tooltip.html","systems/pf2e/templates/actors/crb-style/sidebar/actor-armorclass.html","systems/pf2e/templates/actors/crb-style/sidebar/actor-class-dc.html","systems/pf2e/templates/actors/crb-style/sidebar/actor-health.html","systems/pf2e/templates/actors/crb-style/sidebar/actor-stamina.html","systems/pf2e/templates/actors/crb-style/sidebar/actor-resistances.html","systems/pf2e/templates/actors/crb-style/sidebar/actor-perception.html","systems/pf2e/templates/actors/crb-style/sidebar/actor-initiative.html","systems/pf2e/templates/actors/crb-style/sidebar/actor-saves.html","systems/pf2e/templates/actors/crb-style/sidebar/actor-ability-scores.html","systems/pf2e/templates/actors/crb-style/actor-header.html","systems/pf2e/templates/actors/crb-style/tabs/actor-character.html","systems/pf2e/templates/actors/crb-style/tabs/actor-actions.html","systems/pf2e/templates/actors/crb-style/tabs/actor-biography.html","systems/pf2e/templates/actors/crb-style/tabs/actor-effects.html","systems/pf2e/templates/actors/crb-style/tabs/actor-feats.html","systems/pf2e/templates/actors/crb-style/tabs/actor-inventory.html","systems/pf2e/templates/actors/crb-style/tabs/actor-pfs.html","systems/pf2e/templates/actors/crb-style/tabs/actor-skills.html","systems/pf2e/templates/actors/crb-style/tabs/actor-spellbook.html","systems/pf2e/templates/actors/crb-style/tabs/item-line.html","systems/pf2e/templates/actors/crb-style/character-traits.html","systems/pf2e/templates/actors/crb-style/character-abilities.html","systems/pf2e/templates/items/rules-panel.html","systems/pf2e/templates/items/action-details.html","systems/pf2e/templates/items/action-sidebar.html","systems/pf2e/templates/items/armor-details.html","systems/pf2e/templates/items/armor-sidebar.html","systems/pf2e/templates/items/backpack-details.html","systems/pf2e/templates/items/backpack-sidebar.html","systems/pf2e/templates/items/treasure-sidebar.html","systems/pf2e/templates/items/class-sidebar.html","systems/pf2e/templates/items/consumable-details.html","systems/pf2e/templates/items/consumable-sidebar.html","systems/pf2e/templates/items/condition-details.html","systems/pf2e/templates/items/condition-sidebar.html","systems/pf2e/templates/items/effect-sidebar.html","systems/pf2e/templates/items/equipment-details.html","systems/pf2e/templates/items/equipment-sidebar.html","systems/pf2e/templates/items/feat-details.html","systems/pf2e/templates/items/feat-sidebar.html","systems/pf2e/templates/items/kit-details.html","systems/pf2e/templates/items/kit-sidebar.html","systems/pf2e/templates/items/lore-sidebar.html","systems/pf2e/templates/items/spell-details.html","systems/pf2e/templates/items/spell-sidebar.html","systems/pf2e/templates/items/tool-sidebar.html","systems/pf2e/templates/items/melee-details.html","systems/pf2e/templates/items/weapon-details.html","systems/pf2e/templates/items/weapon-sidebar.html","systems/pf2e/templates/actors/loot/loot-avatar.html","systems/pf2e/templates/actors/loot/loot-inventory.html","systems/pf2e/templates/actors/vehicle/vehicle-sheet.html","systems/pf2e/templates/actors/vehicle/vehicle-header.html","systems/pf2e/templates/actors/vehicle/sidebar/vehicle-health.html","systems/pf2e/templates/actors/vehicle/sidebar/vehicle-armorclass.html","systems/pf2e/templates/actors/vehicle/sidebar/vehicle-saves.html","systems/pf2e/templates/actors/vehicle/sidebar/vehicle-resistances.html","systems/pf2e/templates/actors/vehicle/tabs/vehicle-details.html","systems/pf2e/templates/actors/vehicle/tabs/vehicle-actions.html","systems/pf2e/templates/actors/vehicle/tabs/vehicle-inventory.html","systems/pf2e/templates/actors/vehicle/tabs/vehicle-description.html","systems/pf2e/templates/packs/action-browser.html","systems/pf2e/templates/packs/bestiary-browser.html","systems/pf2e/templates/packs/inventory-browser.html","systems/pf2e/templates/packs/feat-browser.html","systems/pf2e/templates/packs/hazard-browser.html","systems/pf2e/templates/packs/spell-browser.html","systems/pf2e/templates/packs/browser-settings.html"])}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.initiativeFormula=combatant=>{var _a,_b,_c,_d;const{actor:actor}=combatant;if(!actor)return"1d20";const actorType=actor.data.type,data=actor?actor.data.data:{};let bonus;const modifierEnabledInit=null===(_b=null===(_a=data.attributes)||void 0===_a?void 0:_a.initiative)||void 0===_b?void 0:_b.totalModifier;bonus="hazard"===actorType?data.attributes.stealth.value:void 0!==modifierEnabledInit?modifierEnabledInit:data.attributes.perception.value;const parts=["1d20",bonus||0];return((data.attributes.initiative||{}).circumstance||0)+((data.attributes.initiative||{}).status||0)!==0&&parts.push(((null===(_c=data.attributes.initiative)||void 0===_c?void 0:_c.circumstance)||0)+((null===(_d=data.attributes.initiative)||void 0===_d?void 0:_d.status)||0)),actor.isPC||parts.push(.5),parts.join("+")}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(){Handlebars.registerHelper("add",(a,b)=>a+b),Handlebars.registerHelper("if_all",(...args)=>{const opts=args.pop();let{fn:fn}=opts;for(let i=0;i<args.length;++i)if(!args[i]){fn=opts.inverse;break}return fn(this)}),Handlebars.registerHelper("lower",str=>String.prototype.toLowerCase.call(null!=str?str:"")),Handlebars.registerHelper("multiply",(a,b)=>a*b),Handlebars.registerHelper("percentage",(value,max)=>max/100*value),Handlebars.registerHelper("strip_tags",(value,options)=>function(input,allowed){allowed=((""+(allowed||"")).toLowerCase().match(/<[a-z][a-z0-9]*>/g)||[]).join("");const tags=/<\/?([a-z0-9]*)\b[^>]*>?/gi,commentsAndPhpTags=/<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;let after=(phpValue=>{switch(typeof phpValue){case"boolean":return phpValue?"1":"";case"string":return phpValue;case"number":return Number.isNaN(phpValue)?"NAN":Number.isFinite(phpValue)?""+phpValue:(phpValue<0?"-":"")+"INF";case"undefined":return"";case"object":return Array.isArray(phpValue)?"Array":null!==phpValue?"Object":"";case"function":default:throw new Error("Unsupported value type")}})(input);for(after="<"===after.substring(after.length-1)?after.substring(0,after.length-1):after;;){const before=after;if(after=before.replace(commentsAndPhpTags,"").replace(tags,($0,$1)=>allowed.indexOf(`<${$1.toLowerCase()}>`)>-1?$0:""),before===after)return after}}(String(value))),Handlebars.registerHelper("enrichHTML",html=>TextEditor.enrichHTML(html)),Handlebars.registerHelper("json",html=>JSON.stringify(html))}},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const spellcastingEntry_1=__importDefault(__webpack_require__(29)),character_1=__importDefault(__webpack_require__(30));exports.default=class{constructor(data,scope={}){this.data=data,this.castingActor=null==scope?void 0:scope.castingActor,this._castLevel=(null==scope?void 0:scope.castLevel)||this.spellLevel}get spellcastingEntryId(){return this.data.data.location.value}get spellcastingEntry(){var _a;return this._spellcastingEntry||(this._spellcastingEntry=new spellcastingEntry_1.default(null===(_a=this.castingActor)||void 0===_a?void 0:_a.getOwnedItem(this.spellcastingEntryId).data)),this._spellcastingEntry}get spellLevel(){return this.data.data.level.value}get character(){return this._character||(this._character=new character_1.default(this.castingActor.data.data)),this._character}get damage(){return this.data.data.damage}get damageValue(){return this.damage.value&&""!==this.damage.value&&"0"!==this.damage.value?this.damage.value:null}get damageParts(){var _a;const parts=[];if(this.damageValue&&parts.push(this.damage.value),this.damage.applyMod&&parts.push(this.character.abilities[this.spellcastingEntry.ability].mod),""===this.data.data.duration.value&&(null===(_a=this.castingActor)||void 0===_a?void 0:_a.items)){null===this.castingActor.items.find(it=>"Dangerous Sorcery"===it.name)||this.isFocusSpell||0===this.spellLevel||(console.log("PF2e System | Adding Dangerous Sorcery spell damage for "+this.data.name),parts.push(this.castLevel))}return parts.concat(this.heightenedParts)}get scaling(){var _a;return(null===(_a=this.data.data)||void 0===_a?void 0:_a.scaling)||{}}get castLevel(){return this.autoScalingSpell?Math.ceil(this.character.level/2):this._castLevel}get autoScalingSpell(){return 0===this.spellLevel||11===this.spellLevel||this.isFocusSpell}get isFocusSpell(){return this.traditions.includes("focus")}get traditions(){var _a,_b;return(null===(_b=null===(_a=this.data.data)||void 0===_a?void 0:_a.traditions)||void 0===_b?void 0:_b.value)||[]}get heighteningModes(){return{level1:1,level2:2,level3:3,level4:4}}get heightenedParts(){let parts=[];if(""!==this.scaling.formula){const heighteningDivisor=this.heighteningModes[this.scaling.mode];if(heighteningDivisor){let effectiveSpellLevel=1;this.spellLevel>0&&this.spellLevel<11&&(effectiveSpellLevel=this.spellLevel);let partCount=this.castLevel-effectiveSpellLevel;partCount=Math.floor(partCount/heighteningDivisor),parts=Array(partCount).fill(this.scaling.formula)}}return parts}}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.default=class{constructor(data){this.data=data}get ability(){return this.data.data.ability.value||"int"}}},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const armor_1=__importDefault(__webpack_require__(31));exports.default=class{constructor(data,items){this.data=data,this._items=items}get level(){return parseInt(this.data.details.level.value,10)}get maxExp(){return this.data.details.xp.max}get exp(){return this.data.details.xp.value}get xpPercent(){return Math.min(Math.round(100*this.exp/this.maxExp),99.5)}get items(){return this._items||[]}get abilities(){return this.data.abilities}get martial(){return this.data.martial}get ac(){const armorProficiency=this.martial[this.equippedArmor.armorType].value,dexBonus=this.equippedArmor.wornDexBonus(this),{armorBonus:armorBonus}=this.equippedArmor;return 10+armorProficiency+dexBonus+armorBonus}get skillCheckPenalty(){return this.abilities.str.value<this.equippedArmor.strengthRequirement?this.equippedArmor.checkPenalty:0}get equippedArmor(){const equippedArmorItem=this.items.find(item=>armor_1.default.isArmor(item.data));return equippedArmorItem?new armor_1.default(equippedArmorItem.data):armor_1.default.unarmored()}}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const runes_1=__webpack_require__(7);class Armor{constructor(data){this.data=data.data}static unarmored(){return new Armor({data:{armorType:{value:"unarmored"},armor:{value:"0"},dex:{value:"100"},strength:{value:"0"},check:{value:"0"}}})}static get armorTypes(){return["light","medium","heavy","unarmored"]}static isArmor(item){return"armor"===item.type&&item.data.equipped.value&&Armor.armorTypes.includes(item.data.armorType.value)}get maxDex(){return this.data.dex.value}get strengthRequirement(){return parseInt(this.data.strength.value,10)}get checkPenalty(){return parseInt(this.data.check.value,10)}get armorType(){return this.data.armorType.value}get armorBonus(){return runes_1.getArmorBonus(this.data)}wornDexBonus(character){return Math.min(character.abilities.dex.mod,this.maxDex)}}exports.default=Armor},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const modifiers_1=__webpack_require__(0),runes_1=__webpack_require__(7),damage_1=__webpack_require__(15);function isNonPhysicalDamage(damageType){return damage_1.DamageCategory.fromDamageType(damageType)!==damage_1.DamageCategory.PHYSICAL&&void 0!==damageType&&""!==damageType}exports.PF2WeaponDamage=class{static calculate(weapon,actor,traits=[],statisticsModifiers,damageDice,proficiencyRank=0,options=[]){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x,_y,_z,_0,_1,_2,_3;let effectDice=null!==(_a=weapon.data.damage.dice)&&void 0!==_a?_a:1;const diceModifiers=[],numericModifiers=[],baseTraits=[];let baseDamageDie=weapon.data.damage.die,baseDamageType=weapon.data.damage.damageType;const twoHandTrait=traits.find(t=>t.name.toLowerCase().startsWith("two-hand-"));twoHandTrait&&options.some(o=>o===twoHandTrait.rollOption)&&(baseDamageDie=twoHandTrait.name.substring(twoHandTrait.name.lastIndexOf("-")+1),baseTraits.push(twoHandTrait.name));const versatileTrait=traits.find(t=>t.name.toLowerCase().startsWith("versatile-"));if(versatileTrait&&options.some(o=>o===versatileTrait.rollOption)){baseDamageType={b:"bludgeoning",p:"piercing",s:"slashing"}[versatileTrait.name.substring(versatileTrait.name.lastIndexOf("-")+1)],baseTraits.push(versatileTrait.name)}const normalDice=null!==(_d=null===(_c=null===(_b=weapon.data)||void 0===_b?void 0:_b.property1)||void 0===_c?void 0:_c.dice)&&void 0!==_d?_d:0,weaponDamageType=baseDamageType;if(normalDice>0){const damageType=null!==(_g=null===(_f=null===(_e=weapon.data)||void 0===_e?void 0:_e.property1)||void 0===_f?void 0:_f.damageType)&&void 0!==_g?_g:weaponDamageType;diceModifiers.push({name:"PF2E.WeaponCustomDamageLabel",diceNumber:normalDice,dieSize:null===(_j=null===(_h=weapon.data)||void 0===_h?void 0:_h.property1)||void 0===_j?void 0:_j.die,damageType:null!=damageType?damageType:weaponDamageType,traits:isNonPhysicalDamage(damageType)?[damageType]:[]})}const critDice=null!==(_m=null===(_l=null===(_k=weapon.data)||void 0===_k?void 0:_k.property1)||void 0===_l?void 0:_l.critDice)&&void 0!==_m?_m:0;if(critDice>0){const damageType=null!==(_q=null===(_p=null===(_o=weapon.data)||void 0===_o?void 0:_o.property1)||void 0===_p?void 0:_p.critDamageType)&&void 0!==_q?_q:weaponDamageType;diceModifiers.push({name:"PF2E.WeaponCustomDamageLabel",diceNumber:critDice,dieSize:null===(_s=null===(_r=weapon.data)||void 0===_r?void 0:_r.property1)||void 0===_s?void 0:_s.critDie,damageType:null!=damageType?damageType:weaponDamageType,critical:!0,traits:isNonPhysicalDamage(damageType)?[damageType]:[]})}const strikingDice=runes_1.getStrikingDice(weapon.data);let ability;strikingDice>0&&(effectDice+=strikingDice,diceModifiers.push({name:CONFIG.PF2E.weaponStrikingRunes[weapon.data.strikingRune.value],diceNumber:strikingDice,enabled:!0,traits:["magical"]})),runes_1.getPropertyRuneModifiers(weapon).forEach(modifier=>diceModifiers.push(modifier)),"Cinderclaw Gauntlet"===weapon.name&&diceModifiers.push({name:weapon.name,diceNumber:1,dieSize:"d6",damageType:"fire",critical:!0,traits:["fire"]}),actor.items.some(i=>"feat"===i.type&&"Mystic Strikes"===i.name)&&traits.some(t=>t.name.startsWith("unarmed"))&&diceModifiers.push({name:"PF2E.MysticStrikes",enabled:!0,traits:["magical"],predicate:{not:["suppress-mystic-strike"]}}),actor.items.some(i=>"feat"===i.type&&"Metal Strikes"===i.name)&&traits.some(t=>t.name.startsWith("unarmed"))&&diceModifiers.push({name:"PF2E.MetalStrikes",enabled:!0,traits:["silver","coldiron"],predicate:{not:["suppress-metal-strike"]}}),actor.items.some(i=>"feat"===i.type&&"Adamantine Strikes"===i.name)&&traits.some(t=>t.name.startsWith("unarmed"))&&diceModifiers.push({name:"PF2E.AdamantineStrikes",enabled:!0,traits:["adamantine"],predicate:{not:["suppress-adamantine-strike"]}}),runes_1.hasGhostTouchRune(weapon)&&diceModifiers.push({name:"PF2E.WeaponPropertyRuneGhostTouch",enabled:!0,traits:["ghostTouch"]}),traits.filter(t=>t.name.startsWith("deadly-")).forEach(t=>{diceModifiers.push({name:CONFIG.weaponTraits[t.name],diceNumber:strikingDice>1?strikingDice:1,dieSize:t.name.substring(t.name.indexOf("-")+1),critical:!0,enabled:!0})}),traits.filter(t=>t.name.startsWith("fatal-")).forEach(t=>{const dieSize=t.name.substring(t.name.indexOf("-")+1);diceModifiers.push({name:CONFIG.weaponTraits[t.name],diceNumber:1,dieSize:dieSize,critical:!0,enabled:!0,override:{dieSize:dieSize}})});{let modifier;const melee=["melee","reach",""].includes(null===(_v=null===(_u=null===(_t=weapon.data)||void 0===_t?void 0:_t.range)||void 0===_u?void 0:_u.value)||void 0===_v?void 0:_v.trim())||traits.some(t=>t.name.startsWith("thrown"));if(melee?(ability="str",modifier=Math.floor((actor.data.abilities.str.value-10)/2),options.push("melee")):options.push("ranged"),traits.some(t=>"propulsive"===t.name)){ability="str";const strengthModifier=Math.floor((actor.data.abilities.str.value-10)/2);modifier=strengthModifier<0?strengthModifier:Math.floor(strengthModifier/2),baseTraits.push("propulsive")}actor.items.some(i=>"feat"===i.type&&"Thief Racket"===i.name)&&!traits.some(t=>"unarmed"===t.name)&&traits.some(t=>"finesse"===t.name)&&melee&&Math.floor((actor.data.abilities.dex.value-10)/2)>modifier&&(ability="dex",modifier=Math.floor((actor.data.abilities.dex.value-10)/2)),ability&&numericModifiers.push(new modifiers_1.PF2Modifier(CONFIG.abilities[ability],modifier,modifiers_1.PF2ModifierType.ABILITY));const weaponSpecializationDamage=proficiencyRank>1?proficiencyRank:0;weaponSpecializationDamage>0&&(actor.items.some(i=>"feat"===i.type&&i.name.startsWith("Greater Weapon Specialization"))?numericModifiers.push(new modifiers_1.PF2Modifier("PF2E.GreaterWeaponSpecialization",2*weaponSpecializationDamage,modifiers_1.PF2ModifierType.UNTYPED)):actor.items.some(i=>"feat"===i.type&&i.name.startsWith("Weapon Specialization"))&&numericModifiers.push(new modifiers_1.PF2Modifier("PF2E.WeaponSpecialization",weaponSpecializationDamage,modifiers_1.PF2ModifierType.UNTYPED)));const splashDamage=null!==(_y=null===(_x=null===(_w=weapon.data)||void 0===_w?void 0:_w.splashDamage)||void 0===_x?void 0:_x.value)&&void 0!==_y?_y:0;splashDamage>0&&numericModifiers.push(new modifiers_1.PF2Modifier("PF2E.WeaponSplashDamageLabel",splashDamage,modifiers_1.PF2ModifierType.UNTYPED));const bonusDamage=null!==(_1=null===(_0=null===(_z=weapon.data)||void 0===_z?void 0:_z.bonusDamage)||void 0===_0?void 0:_0.value)&&void 0!==_1?_1:0;bonusDamage>0&&numericModifiers.push(new modifiers_1.PF2Modifier("PF2E.WeaponBonusDamageLabel",bonusDamage,modifiers_1.PF2ModifierType.UNTYPED))}{const stats=[];(null===(_3=null===(_2=weapon.data)||void 0===_2?void 0:_2.group)||void 0===_3?void 0:_3.value)&&stats.push(weapon.data.group.value.toLowerCase()+"-weapon-group-damage"),ability&&stats.push(ability+"-damage");const proficiencies=["untrained","trained","expert","master","legendary"];stats.push(proficiencies[proficiencyRank]+"-damage"),stats.push(weapon.name.replace(/\s+/g,"-").toLowerCase()+"-damage"),stats.concat([weapon._id+"-damage","damage"]).forEach(key=>{(statisticsModifiers[key]||[]).map(m=>duplicate(m)).forEach(m=>{var _a;const modifier=new modifiers_1.PF2Modifier(game.i18n.localize(m.name),m.modifier,m.type);m.damageType&&(modifier.damageType=m.damageType),modifier.ignored=!new modifiers_1.PF2ModifierPredicate(null!==(_a=m.predicate)&&void 0!==_a?_a:{}).test(traits.map(t=>t.name).concat(options)),numericModifiers.push(modifier)})})}const damage={name:"Damage Roll: "+weapon.name,base:{diceNumber:weapon.data.damage.dice,dieSize:baseDamageDie,category:damage_1.DamageCategory.fromDamageType(baseDamageType),damageType:baseDamageType,traits:[]},effectDice:effectDice,diceModifiers:diceModifiers,numericModifiers:numericModifiers,traits:baseTraits,formula:{}};traits.some(t=>"nonlethal"===t.name)&&damage.traits.push("nonlethal");{const stats=[];stats.push(weapon.name.replace(/\s+/g,"-").toLowerCase()+"-damage"),stats.concat([weapon._id+"-damage","damage"]).forEach(key=>{(damageDice[key]||[]).map(d=>new modifiers_1.PF2DamageDice(d)).forEach(d=>{d.enabled=d.predicate.test(traits.map(t=>t.name).concat(options)),diceModifiers.push(d)})})}return diceModifiers.forEach(d=>{var _a;d.name=game.i18n.localize(d.name),d.diceNumber>0&&d.dieSize?d.name+=` +${d.diceNumber}${d.dieSize}`:d.diceNumber>0?d.name+=` +${d.diceNumber}${damage.base.dieSize}`:d.dieSize&&(d.name+=" "+d.dieSize),!d.category||!(d.diceNumber>0||d.dieSize)||d.damageType&&d.damageType!==damage.base.damageType||(d.name+=" "+d.category),d.enabled=new modifiers_1.PF2ModifierPredicate(null!==(_a=d.predicate)&&void 0!==_a?_a:{}).test(traits.map(t=>t.name).concat(options)),d.ignored=!d.enabled}),damage.formula.success=this.getFormula(damage,!1),damage.formula.criticalSuccess=this.getFormula(damage,!0),damage}static getFormula(damage,critical){const base=duplicate(damage.base);let overrideDieSize=null,overrideDamageType=null;damage.diceModifiers.filter(dm=>dm.enabled).filter(dm=>dm.override).forEach(dm=>{var _a,_b,_c,_d;critical&&dm.critical?(overrideDieSize=null!==(_a=dm.override.dieSize)&&void 0!==_a?_a:overrideDieSize,overrideDamageType=null!==(_b=dm.override.damageType)&&void 0!==_b?_b:overrideDamageType):dm.critical||(overrideDieSize=null!==(_c=dm.override.dieSize)&&void 0!==_c?_c:overrideDieSize,overrideDamageType=null!==(_d=dm.override.damageType)&&void 0!==_d?_d:overrideDamageType)}),base.dieSize=null!=overrideDieSize?overrideDieSize:base.dieSize,base.damageType=null!=overrideDamageType?overrideDamageType:base.damageType;const dicePool={},critPool={};dicePool[base.damageType]={base:!0,dice:{[base.dieSize]:base.diceNumber}},damage.diceModifiers.filter(dm=>dm.enabled).filter(dm=>!dm.critical||critical).forEach(dm=>{var _a,_b,_c,_d,_e,_f;critical&&dm.critical?(dm.diceNumber&&this.addDice(critPool,null!==(_a=dm.damageType)&&void 0!==_a?_a:base.damageType,null!==(_b=dm.dieSize)&&void 0!==_b?_b:base.dieSize,dm.diceNumber),(null!==(_c=dm.traits)&&void 0!==_c?_c:[]).filter(t=>!damage.traits.includes(t)).forEach(t=>{damage.traits.push(t)})):dm.critical||(dm.diceNumber&&this.addDice(dicePool,null!==(_d=dm.damageType)&&void 0!==_d?_d:base.damageType,null!==(_e=dm.dieSize)&&void 0!==_e?_e:base.dieSize,dm.diceNumber),(null!==(_f=dm.traits)&&void 0!==_f?_f:[]).filter(t=>!damage.traits.includes(t)).forEach(t=>{damage.traits.push(t)}))});{const modifiers=[];damage.numericModifiers.filter(nm=>nm.enabled).filter(nm=>!nm.critical||critical).forEach(nm=>{critical&&nm.critical?modifiers.push(nm):nm.critical||modifiers.push(nm)}),Object.entries(modifiers.reduce((accumulator,current)=>{var _a,_b;const dmg=null!==(_a=current.damageType)&&void 0!==_a?_a:base.damageType;return accumulator[dmg]=(null!==(_b=accumulator[dmg])&&void 0!==_b?_b:[]).concat(current),accumulator},{})).map(([damageType,damageTypeModifiers])=>new modifiers_1.PF2StatisticModifier(damageType+"-damage-stacking-rules",damageTypeModifiers).modifiers).flatMap(nm=>nm).filter(nm=>nm.enabled).filter(nm=>!nm.critical||critical).forEach(nm=>{var _a,_b,_c,_d;let pool=dicePool[null!==(_a=nm.damageType)&&void 0!==_a?_a:base.damageType];pool||(pool={},dicePool[null!==(_b=nm.damageType)&&void 0!==_b?_b:base.damageType]=pool),pool.modifier=(null!==(_c=pool.modifier)&&void 0!==_c?_c:0)+nm.modifier,(null!==(_d=nm.traits)&&void 0!==_d?_d:[]).filter(t=>!damage.traits.includes(t)).forEach(t=>{damage.traits.push(t)})})}let formula=this.buildFormula(dicePool);if(critical){formula=this.doubleFormula(formula);const critFormula=this.buildFormula(critPool);critFormula&&(formula+=" + "+critFormula)}return formula}static addDice(pool,damageType,dieSize,count){var _a;pool[damageType]=pool[damageType]||{};const damagePool=pool[damageType];return damagePool.dice=damagePool.dice||{},damagePool.dice[dieSize]=(null!==(_a=damagePool.dice[dieSize])&&void 0!==_a?_a:0)+count,pool}static buildFormula(pool){var _a;const parts=[];let minValue=0;for(const info of Object.values(pool)){for(const[dieSize,count]of Object.entries(null!==(_a=info.dice)&&void 0!==_a?_a:{}))minValue+=count,parts.push(`${count}${dieSize}`);info.modifier&&(minValue+=info.modifier,parts.push(info.modifier.toString()))}if(0===parts.length)return"";const formula=[parts[0]].concat(parts.slice(1).flatMap(part=>part.startsWith("-")?["-",part.substring(1)]:["+",part])).join(" ");return minValue<=0?`{${formula}, 1}kh`:formula}static doubleFormula(formula){if("doubledamage"===game.settings.get("pf2e","critRule"))return`2 * (${formula})`;return new Roll(formula,{}).alter(0,2).formula.replace(/\b\d+\b/g,match=>""+2*parseInt(match,10))}}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const modifiers_1=__webpack_require__(0);class CheckModifiersDialog extends Application{constructor(check,context,callback){var _a;super({title:check.name,template:"systems/pf2e/templates/chat/check-modifiers-dialog.html",classes:["dice-checks","dialog"],popOut:!0,width:380}),this.check=check,this.context=null!=context?context:{},this.callback=callback,this.context.secret?this.context.rollMode="blindroll":this.context.rollMode=null!==(_a=game.settings.get("core","rollMode"))&&void 0!==_a?_a:"roll"}static async roll(check,context,callback){var _a,_b,_c,_d,_e;const options=[],ctx=null!==(_a=context)&&void 0!==_a?_a:{};let speaker,dice="1d20";"misfortune"===ctx.fate?(dice="2d20kl",options.push("PF2E.TraitMisfortune")):"fortune"===ctx.fate&&(dice="2d20kh",options.push("PF2E.TraitFortune")),ctx.actor&&(speaker=ctx.actor,ctx.actor=ctx.actor._id),ctx.token&&(ctx.token=ctx.token._id),ctx.user&&(ctx.user=ctx.user._id),ctx.item&&(ctx.item=ctx.item._id),ctx.rollMode=null!==(_d=null!==(_c=null!==(_b=ctx.rollMode)&&void 0!==_b?_b:ctx.secret?"blindroll":void 0)&&void 0!==_c?_c:game.settings.get("core","rollMode"))&&void 0!==_d?_d:"roll";const modifierBreakdown=check.modifiers.filter(m=>m.enabled).map(m=>`<span class="tag tag_secondary">${game.i18n.localize(m.name)} ${m.modifier<0?"":"+"}${m.modifier}</span>`).join(""),optionBreakdown=options.map(o=>`<span style="white-space: nowrap; margin: 0 2px 2px 0; padding: 0 3px; font-size: 10px; line-height: 16px; border: 1px solid #000000; border-radius: 3px; color: white; background: var(--secondary);">${game.i18n.localize(o)}</span>`).join(""),totalModifierPart=0===check.totalModifier?"":"+"+check.totalModifier,roll=new Roll(`${dice}${totalModifierPart}`,check).roll();await roll.toMessage({speaker:ChatMessage.getSpeaker({actor:speaker}),flavor:`<b>${check.name}</b><div class="tags">${modifierBreakdown}${optionBreakdown}</div>`,flags:{pf2e:{canReroll:!ctx.fate,context:ctx}}},{rollMode:null!==(_e=ctx.rollMode)&&void 0!==_e?_e:"roll"}),callback&&callback(roll)}getData(){var _a,_b;const fortune="fortune"===(null===(_a=null==this?void 0:this.context)||void 0===_a?void 0:_a.fate),misfortune="misfortune"===(null===(_b=null==this?void 0:this.context)||void 0===_b?void 0:_b.fate),none=fortune===misfortune;return{check:this.check,rollModes:CONFIG.Dice.rollModes,rollMode:this.context.rollMode,fortune:fortune,none:none,misfortune:misfortune}}activateListeners(html){html.find(".roll").click(event=>{this.context.fate=html.find("input[type=radio][name=fate]:checked").val(),CheckModifiersDialog.roll(this.check,this.context,this.callback),this.close()}),html.find(".modifier-container").on("click","input[type=checkbox]",event=>{const index=Number(event.currentTarget.getAttribute("data-modifier-index"));this.check.modifiers[index].ignored=event.currentTarget.checked,this.check.applyStackingRules(),this.render()}),html.find(".add-modifier-panel").on("click",".add-modifier",event=>this.onAddModifier(event)),html.find("[name=rollmode]").change(event=>this.onChangeRollMode(event))}onAddModifier(event){const parent=$(event.currentTarget).parents(".add-modifier-panel"),value=Number(parent.find(".add-modifier-value").val()),type=""+parent.find(".add-modifier-type").val();let name=""+parent.find(".add-modifier-name").val();const errors=[];Number.isNaN(value)?errors.push("Modifier value must be a number."):0===value&&errors.push("Modifier value must not be zero."),type&&type.trim().length||errors.push("Modifier type is required."),name&&name.trim()||(name=game.i18n.localize(value<0?"PF2E.PenaltyLabel."+type:"PF2E.BonusLabel."+type)),errors.length>0?ui.notifications.error(errors.join(" ")):(this.check.push(new modifiers_1.PF2Modifier(name,value,type)),this.render())}onChangeRollMode(event){var _a;this.context.rollMode=null!==(_a=$(event.currentTarget).val())&&void 0!==_a?_a:"roll"}}exports.CheckModifiersDialog=CheckModifiersDialog},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const dice_1=__webpack_require__(4);class DamageRollModifiersDialog extends Application{constructor(damage,context,callback){super({title:damage.name,template:"systems/pf2e/templates/chat/check-modifiers-dialog.html",classes:["dice-checks","dialog"],popOut:!0,width:380}),this.damage=damage,this.context=context,this.callback=callback}static roll(damage,context,callback){var _a,_b,_c,_d,_e,_f,_g;const options=null!==(_a=damage.traits)&&void 0!==_a?_a:[],ctx=null!=context?context:{};ctx.rollMode=null!==(_d=null!==(_c=null!==(_b=ctx.rollMode)&&void 0!==_b?_b:ctx.secret?"blindroll":void 0)&&void 0!==_c?_c:game.settings.get("core","rollMode"))&&void 0!==_d?_d:"roll";const baseBreakdown=`<span style="white-space: nowrap; margin: 0 2px 2px 0; padding: 0 3px; font-size: 10px; line-height: 16px; border: 1px solid #999; border-radius: 3px; color: white; background: rgba(0, 0, 0, 0.45);">${game.i18n.localize("Base")} ${damage.base.diceNumber}${damage.base.dieSize} ${damage.base.damageType}</span>`,modifierBreakdown=[].concat(damage.diceModifiers).concat(damage.numericModifiers).filter(m=>m.enabled).filter(m=>!m.critical||"criticalSuccess"===context.outcome).map(m=>{const modifier=void 0===m.modifier||Number.isNaN(m.modifier)?"":` ${m.modifier<0?"":"+"}${m.modifier}`,damageType=m.damageType&&m.damageType!==damage.base.damageType?" "+m.damageType:"";return`<span style="white-space: nowrap; margin: 0 2px 2px 0; padding: 0 3px; font-size: 10px; line-height: 16px; border: 1px solid #999; border-radius: 3px; background: rgba(0, 0, 0, 0.05);">${game.i18n.localize(m.name)}${modifier}${damageType}</span>`}).join(""),optionBreakdown=options.map(o=>`<span style="white-space: nowrap; margin: 0 2px 2px 0; padding: 0 3px; font-size: 10px; line-height: 16px; border: 1px solid #000000; border-radius: 3px; color: white; background: var(--secondary);">${game.i18n.localize(CONFIG.weaponTraits[o])}</span>`).join(""),formula=damage.formula[null!==(_e=context.outcome)&&void 0!==_e?_e:"success"],roll=new dice_1.FormulaPreservingRoll(formula,damage).roll();roll.toMessage({speaker:ChatMessage.getSpeaker(),flavor:`<b>${damage.name}</b> (${null!==(_f=context.outcome)&&void 0!==_f?_f:"success"})<div style="display: flex; flex-wrap: wrap;">${baseBreakdown}${modifierBreakdown}${optionBreakdown}</div>`},{rollMode:null!==(_g=ctx.rollMode)&&void 0!==_g?_g:"roll"}),callback&&callback(roll)}getData(){return{damage:this.damage}}}exports.DamageRollModifiersDialog=DamageRollModifiersDialog},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const rule_element_1=__webpack_require__(1);exports.PF2RuleElement=rule_element_1.PF2RuleElement;const flatmodifier_1=__webpack_require__(36),mage_armor_1=__webpack_require__(37),fixed_proficiency_1=__webpack_require__(38),temphp_1=__webpack_require__(39),dexterity_modifier_cap_1=__webpack_require__(40),damage_dice_1=__webpack_require__(41),toggle_property_1=__webpack_require__(42),token_image_1=__webpack_require__(43),token_size_1=__webpack_require__(44),base_speed_1=__webpack_require__(45),sense_1=__webpack_require__(46);class PF2RuleElements{static fromOwnedItem(item){var _a,_b;return this.fromRuleElementData(null!==(_b=null===(_a=item.data)||void 0===_a?void 0:_a.rules)&&void 0!==_b?_b:[],item)}static fromRuleElementData(ruleData,item){var _a;const rules=[];for(const data of ruleData){const rule=null!==(_a=this.custom[data.key])&&void 0!==_a?_a:this.builtin[data.key];rule?rules.push(rule(data,item)):console.warn("PF2E | Unknown rule element "+data.key)}return rules}}exports.PF2RuleElements=PF2RuleElements,PF2RuleElements.builtin=Object.freeze({"PF2E.RuleElement.FlatModifier":(ruleData,item)=>new flatmodifier_1.PF2FlatModifierRuleElement(ruleData,item),"PF2E.RuleElement.MageArmor":(ruleData,item)=>new mage_armor_1.PF2MageArmorRuleElement(ruleData,item),"PF2E.RuleElement.DexterityModifierCap":(ruleData,item)=>new dexterity_modifier_cap_1.PF2DexterityModifierCapRuleElement(ruleData,item),"PF2E.RuleElement.FixedProficiency":(ruleData,item)=>new fixed_proficiency_1.PF2FixedProficiencyRuleElement(ruleData,item),"PF2E.RuleElement.TempHP":(ruleData,item)=>new temphp_1.PF2TempHPRuleElement(ruleData,item),"PF2E.RuleElement.DamageDice":(ruleData,item)=>new damage_dice_1.PF2DamageDiceRuleElement(ruleData,item),"PF2E.RuleElement.ToggleProperty":(ruleData,item)=>new toggle_property_1.PF2TogglePropertyRuleElement(ruleData,item),"PF2E.RuleElement.TokenImage":(ruleData,item)=>new token_image_1.PF2TokenImageRuleElement(ruleData,item),"PF2E.RuleElement.TokenSize":(ruleData,item)=>new token_size_1.PF2TokenSizeRuleElement(ruleData,item),"PF2E.RuleElement.BaseSpeed":(ruleData,item)=>new base_speed_1.PF2BaseSpeedRuleElement(ruleData,item),"PF2E.RuleElement.Sense":(ruleData,item)=>new sense_1.PF2SenseRuleElement(ruleData,item)}),PF2RuleElements.custom={}},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const rule_element_1=__webpack_require__(1),modifiers_1=__webpack_require__(0),actor_1=__importDefault(__webpack_require__(2));class PF2FlatModifierRuleElement extends rule_element_1.PF2RuleElement{constructor(ruleData,item){super(),this.ruleData=ruleData,this.item=item}onBeforePrepareData(actorData,statisticsModifiers,damageDice){var _a,_b;const value=super.resolveValue(this.ruleData.value,this.ruleData,this.item,actorData),label=super.getDefaultLabel(this.ruleData,this.item);if(this.ruleData.selector&&label&&value){const modifier=new modifiers_1.PF2Modifier(label,value,null!==(_a=this.ruleData.type)&&void 0!==_a?_a:modifiers_1.PF2ModifierType.UNTYPED);this.ruleData.predicate&&(modifier.predicate=new modifiers_1.PF2ModifierPredicate(this.ruleData.predicate),modifier.ignored=!modifiers_1.PF2ModifierPredicate.test(modifier.predicate,actor_1.default.getRollOptions(actorData.flags,null!==(_b=this.ruleData["roll-options"])&&void 0!==_b?_b:[]))),statisticsModifiers[this.ruleData.selector]=(statisticsModifiers[this.ruleData.selector]||[]).concat(modifier)}else console.warn("PF2E | Flat modifier requires at least a selector field, a label field or item name, and a non-zero value field")}}exports.PF2FlatModifierRuleElement=PF2FlatModifierRuleElement},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const modifiers_1=__webpack_require__(0),rule_element_1=__webpack_require__(1);class PF2MageArmorRuleElement extends rule_element_1.PF2RuleElement{constructor(ruleData,item){super(),this.ruleData=ruleData,this.item=item}onBeforePrepareData(actorData,statisticsModifiers,damageDice){var _a,_b,_c,_d,_e,_f;const label=null!==(_a=this.ruleData.label)&&void 0!==_a?_a:this.item.name,level=null!==(_e=null!==(_d=null===(_c=null===(_b=this.item.data)||void 0===_b?void 0:_b.level)||void 0===_c?void 0:_c.value)&&void 0!==_d?_d:this.ruleData.level)&&void 0!==_e?_e:1;if(label){let ac,save=0;level>=10?(ac=3,save=3):level>=8?(ac=2,save=2):level>=6?(ac=2,save=1):level>=4?(ac=1,save=1):ac=1,statisticsModifiers.ac=(statisticsModifiers.ac||[]).concat(new modifiers_1.PF2Modifier(label,ac,modifiers_1.PF2ModifierType.ITEM)),save>0&&(statisticsModifiers["saving-throw"]=(statisticsModifiers["saving-throw"]||[]).concat(new modifiers_1.PF2Modifier(label,save,modifiers_1.PF2ModifierType.ITEM))),actorData.data.attributes.dexCap=(null!==(_f=actorData.data.attributes.dexCap)&&void 0!==_f?_f:[]).concat({value:5,source:label})}else console.warn("PF2E | Mage armor requires at least a label field or item name")}}exports.PF2MageArmorRuleElement=PF2MageArmorRuleElement},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const actor_1=__webpack_require__(2),modifiers_1=__webpack_require__(0),rule_element_1=__webpack_require__(1),KNOWN_TARGETS={ac:{ability:"dex",shortform:"ac"}};class PF2FixedProficiencyRuleElement extends rule_element_1.PF2RuleElement{constructor(ruleData,item){super(),this.ruleData=ruleData,this.item=item}onBeforePrepareData(actorData,statisticsModifiers,damageDice){var _a,_b,_c,_d;const{selector:selector}=this.ruleData;let value=this.resolveValue(this.ruleData.value,this.ruleData,this.item,actorData);"ac"===selector&&(value-=10);const label=this.getDefaultLabel(this.ruleData,this.item),ability=null!==(_c=null!==(_a=this.ruleData.ability)&&void 0!==_a?_a:null===(_b=KNOWN_TARGETS[selector])||void 0===_b?void 0:_b.ability)&&void 0!==_c?_c:null===(_d=actor_1.SKILL_EXPANDED[selector])||void 0===_d?void 0:_d.ability;if(ability)if(value){const modifier=new modifiers_1.PF2Modifier(label,value-actorData.data.abilities[ability].mod,modifiers_1.PF2ModifierType.PROFICIENCY);statisticsModifiers[selector]=(statisticsModifiers[selector]||[]).concat(modifier)}else console.warn("PF2E | Fixed modifier requires at least a non-zero value or formula field.");else console.warn("PF2E | Fixed modifier requires an ability field, or a known selector.")}onAfterPrepareData(actorData,statisticsModifiers,damageDice){var _a,_b,_c;const{selector:selector}=this.ruleData,{data:data}=actorData,skill=null!==(_b=null===(_a=actor_1.SKILL_EXPANDED[selector])||void 0===_a?void 0:_a.shortform)&&void 0!==_b?_b:selector,target=null!==(_c=data.skills[skill])&&void 0!==_c?_c:data.attributes[skill];if(target){for(const modifier of target.modifiers)modifier.type===modifiers_1.PF2ModifierType.ITEM&&modifier.modifier>0&&(modifier.ignored=!0);target.applyStackingRules(),target.value=target.totalModifier+("ac"===skill?10:0)}}}exports.PF2FixedProficiencyRuleElement=PF2FixedProficiencyRuleElement},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const rule_element_1=__webpack_require__(1);class PF2TempHPRuleElement extends rule_element_1.PF2RuleElement{constructor(ruleData,item){super(),this.ruleData=ruleData,this.item=item}onCreate(actorData,item,updates){const updatedActorData=mergeObject(actorData,updates,{inplace:!1}),value=this.resolveValue(this.ruleData.value,this.ruleData,this.item,updatedActorData);value||console.warn("PF2E | Temporary HP requires a non-zero value field or a formula field"),getProperty(updatedActorData,"data.attributes.hp.temp")<value&&mergeObject(updates,{"data.attributes.hp.temp":value,"data.attributes.hp.tempsource":item._id})}onDelete(actorData,item,updates){const updatedActorData=mergeObject(actorData,updates,{inplace:!1});getProperty(updatedActorData,"data.attributes.hp.tempsource")===item._id&&mergeObject(updates,{"data.attributes.hp.temp":0,"data.attributes.hp.-=tempsource":null})}}exports.PF2TempHPRuleElement=PF2TempHPRuleElement},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const rule_element_1=__webpack_require__(1);class PF2DexterityModifierCapRuleElement extends rule_element_1.PF2RuleElement{constructor(ruleData,item){super(),this.ruleData=ruleData,this.item=item}onBeforePrepareData(actorData,statisticsModifiers,damageDice){var _a;const label=super.getDefaultLabel(this.ruleData,this.item),value=super.resolveValue(this.ruleData.value,this.ruleData,this.item,actorData);label&&void 0!==value?actorData.data.attributes.dexCap=(null!==(_a=actorData.data.attributes.dexCap)&&void 0!==_a?_a:[]).concat({value:value,source:label}):console.warn("PF2E | Dexterity modifier cap requires at least a label field or item name, and a value")}}exports.PF2DexterityModifierCapRuleElement=PF2DexterityModifierCapRuleElement},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const rule_element_1=__webpack_require__(1),modifiers_1=__webpack_require__(0);class PF2DamageDiceRuleElement extends rule_element_1.PF2RuleElement{constructor(ruleData,item){super(),this.ruleData=ruleData,this.item=item}onBeforePrepareData(actorData,statisticsModifiers,damageDice){const value=duplicate(this.ruleData);if(delete value.key,this.ruleData.value){const bracketed=super.resolveValue(this.ruleData.value,this.ruleData,this.item,actorData,{});mergeObject(value,bracketed,{inplace:!0,overwrite:!0}),delete value.value}if(value.name=super.getDefaultLabel(value,this.item),this.ruleData.selector&&value.name&&value){const dice=new modifiers_1.PF2DamageDice(value);damageDice[value.selector]=(damageDice[value.selector]||[]).concat(dice)}else console.warn("PF2E | Damage dice requires at least a selector field, and a label field or item name")}}exports.PF2DamageDiceRuleElement=PF2DamageDiceRuleElement},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const rule_element_1=__webpack_require__(1);class PF2TogglePropertyRuleElement extends rule_element_1.PF2RuleElement{constructor(ruleData,item){super(),this.ruleData=ruleData,this.item=item}onBeforePrepareData(actorData,statisticsModifiers,damageDice){const label=super.getDefaultLabel(this.ruleData,this.item);label&&this.ruleData.property?actorData.data.toggles.actions.push({label:label,inputName:this.ruleData.property,checked:getProperty(actorData,this.ruleData.property)}):console.warn("PF2E | Toggle flag requires at least a label field or item name, and a property field with the name of the property")}}exports.PF2TogglePropertyRuleElement=PF2TogglePropertyRuleElement},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const rule_element_1=__webpack_require__(1);class PF2TokenImageRuleElement extends rule_element_1.PF2RuleElement{constructor(ruleData,item){super(),this.ruleData=ruleData,this.item=item}onCreate(actorData,item,updates){const value=this.ruleData.value;value||console.warn("PF2E | Token Image requires a non-empty value field"),mergeObject(updates,{"token.img":value,"flags.pf2e.token.imgsource":item._id}),getProperty(actorData,"flags.pf2e.token.img")||mergeObject(updates,{"flags.pf2e.token.img":getProperty(actorData,"token.img")})}onDelete(actorData,item,updates){getProperty(actorData,"flags.pf2e.token.imgsource")===item._id&&mergeObject(updates,{"token.img":getProperty(actorData,"flags.pf2e.token.img"),"flags.pf2e.token.-=img":null,"flags.pf2e.token.-=imgsource":null})}}exports.PF2TokenImageRuleElement=PF2TokenImageRuleElement},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const rule_element_1=__webpack_require__(1),SIZES={tiny:.6,small:.8,medium:1,large:2,huge:3,gargantuan:4};class PF2TokenSizeRuleElement extends rule_element_1.PF2RuleElement{constructor(ruleData,item){super(),this.ruleData=ruleData,this.item=item}onCreate(actorData,item,updates){var _a;const value=null!==(_a=SIZES[this.ruleData.value])&&void 0!==_a?_a:this.resolveValue(this.ruleData.value,this.ruleData,this.item,actorData);value||console.warn("PF2E | Token Image requires a non-empty value field"),mergeObject(updates,{"token.width":value,"token.height":value,"flags.pf2e.token.sizesource":item._id}),getProperty(actorData,"flags.pf2e.token.size")||mergeObject(updates,{"flags.pf2e.token.size":{height:getProperty(actorData,"token.height"),width:getProperty(actorData,"token.width")}})}onDelete(actorData,item,updates){getProperty(actorData,"flags.pf2e.token.sizesource")===item._id&&mergeObject(updates,{"token.height":getProperty(actorData,"flags.pf2e.token.size.height"),"token.width":getProperty(actorData,"flags.pf2e.token.size.width"),"flags.pf2e.token.-=sizesource":null,"flags.pf2e.token.-=size":null})}}exports.PF2TokenSizeRuleElement=PF2TokenSizeRuleElement},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const rule_element_1=__webpack_require__(1);class PF2BaseSpeedRuleElement extends rule_element_1.PF2RuleElement{constructor(ruleData,item){super(),this.ruleData=ruleData,this.item=item}onBeforePrepareData(actorData,statisticsModifiers,damageDice){const value=super.resolveValue(this.ruleData.value,this.ruleData,this.item,actorData),label=super.getDefaultLabel(this.ruleData,this.item);if(this.ruleData.selector&&label&&value){const selector=this.ruleData.selector.endsWith("-speed")?this.ruleData.selector.substring(-6):this.ruleData.selector,existing=actorData.data.attributes.speed.otherSpeeds.find(speed=>speed.type===selector);existing?existing.value<value&&(existing.value=value):actorData.data.attributes.speed.otherSpeeds.push({label:selector.charAt(0).toUpperCase()+selector.slice(1),type:selector,value:value})}else console.warn("PF2E | Base speed requires at least a selector field, a label field or item name, and a non-zero value field")}}exports.PF2BaseSpeedRuleElement=PF2BaseSpeedRuleElement},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const rule_element_1=__webpack_require__(1);class PF2SenseRuleElement extends rule_element_1.PF2RuleElement{constructor(ruleData,item){super(),this.ruleData=ruleData,this.item=item}onBeforePrepareData(actorData,statisticsModifiers,damageDice){const label=super.getDefaultLabel(this.ruleData,this.item),range=super.resolveValue(this.ruleData.range,this.ruleData,this.item,actorData);if(this.ruleData.selector&&label){if(!actorData.data.traits.senses.some(s=>s.type===this.ruleData.selector)){const sense={label:label,type:this.ruleData.selector};range&&(sense.value=range),this.ruleData.acuity&&(sense.acuity=this.ruleData.acuity),actorData.data.traits.senses.push(sense)}}else console.warn("PF2E | Sense requires at least a selector field and a label field or item name")}}exports.PF2SenseRuleElement=PF2SenseRuleElement},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class PlayerConfigPF2e extends FormApplication{constructor(){super({}),this.settings=getProperty(game.user.data.flags,"PF2e.settings")}static get DEFAULTS(){return{color:"blue",quickD20roll:!0}}static init(){console.log("PF2e System | Initializing Player Config");let settings=getProperty(game.user.data.flags,"PF2e.settings"),newDefaults=!1;if(void 0===settings)console.log("PF2e System | New player without saved PF2e Player Settings | Setting defaults"),settings=PlayerConfigPF2e.DEFAULTS,game.user.update({flags:{PF2e:{settings:settings}}});else{for(const defaultSetting in PlayerConfigPF2e.DEFAULTS)void 0===settings[defaultSetting]&&(settings[defaultSetting]=PlayerConfigPF2e.DEFAULTS[defaultSetting],newDefaults=!0);newDefaults&&(console.log("PF2e System | Saving new default settings to the PF2e Player Settings"),game.user.update({flags:{PF2e:{settings:settings}}}))}}static activateColorScheme(){console.log("PF2e System | Activating Player Configured color scheme");let color=getProperty(game.user.data.flags,"PF2e.settings.color");void 0===color&&(color=PlayerConfigPF2e.DEFAULTS.color);const cssLink=`<link id="pf2e-color-scheme" href="systems/pf2e/styles/user/color-scheme-${color}.css" rel="stylesheet" type="text/css">`;$("head").append(cssLink)}static hookOnRenderSettings(){Hooks.on("renderSettings",(app,html)=>{console.log("PF2e System | Player Config hooked on settings tab"),PlayerConfigPF2e._createSidebarButton(html)})}static _createSidebarButton(html){console.log("PF2e System | Player Config creation sidebar button");const configButton=$(`<button id="pf2e-player-config" data-action="pf2e-player-config">\n                <i class="fas fa-cogs"></i> ${PlayerConfigPF2e.defaultOptions.title}\n            </button>`);html.find(".game-system, #settings-game").first().prepend(configButton),configButton.click(ev=>{(new PlayerConfigPF2e).render(!0)})}static get defaultOptions(){return console.log("PF2e System | Player Config retrieving default options"),mergeObject(super.defaultOptions,{id:"pf2e-player-config-panel",title:"PF2e Player Settings",template:"systems/pf2e/templates/user/player-config.html",classes:["sheet"],width:500,height:"auto",resizable:!0})}async _updateObject(event,formdata){var _a;console.log("PF2e System | Player Config updating settings"),PlayerConfigPF2e.highlightDataUri=null!==(_a=formdata.highlightDataUri)&&void 0!==_a&&_a,this.addRemoveHighlight(PlayerConfigPF2e.highlightDataUri),game.user.update({flags:{PF2e:{settings:formdata}}}),document.getElementById("pf2e-color-scheme").href=`systems/pf2e/styles/user/color-scheme-${formdata.color}.css`}addRemoveHighlight(add){add?$("style.pf2e-data-highlight").length||$("<style></style>",{class:"pf2e-data-highlight"}).text('[src^="data:"], [style*="data:"] { border: 3px solid red !important; }').appendTo("head"):$("style.pf2e-data-highlight").remove()}activateListeners(html){console.log("PF2e System | Player Config activating listeners"),super.activateListeners(html)}getData(){return console.log("PF2e System | Player Config getting data"),this.settings=getProperty(game.user.data.flags,"PF2e.settings"),mergeObject(this.settings,{highlightDataUri:PlayerConfigPF2e.highlightDataUri})}}exports.PlayerConfigPF2e=PlayerConfigPF2e,PlayerConfigPF2e.highlightDataUri=!1},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const db_1=__webpack_require__(49);__webpack_require__(50);exports.PF2eSystem=class{constructor(){console.log("PF2e System | Initializing static content database");let translated=game.i18n.translations.PF2E;void 0!==game.i18n._fallback.PF2E&&(translated=mergeObject(game.i18n._fallback.PF2E,translated)),this.DB=mergeObject(db_1.DB,translated),this.CONFIG=CONFIG.PF2E}}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.DB={condition:{_groups:{detection:["observed","hidden","undetected","unnoticed"],senses:["blinded","concealed","dazzled","deafened","invisible"],death:["doomed","dying","unconscious","wounded"],attitudes:["hostile","unfriendly","indifferent","friendly","helpful"],loweredAbilities:["clumsy","drained","enfeebled","stupefied"]},blinded:{overrides:["dazzled"]},clumsy:{hasValue:!0},confused:{alsoSets:["flatFooted"]},doomed:{hasValue:!0},drained:{hasValue:!0},dying:{hasValue:!0},encumbered:{alsoSets:["clumsy:1"]},enfeebled:{hasValue:!0},friendly:{overrides:["helpful","hostile","indifferent","unfriendly"]},frightened:{hasValue:!0},grabbed:{alsoSets:["flatFooted","immobilized"]},helpful:{overrides:["friendly","hostile","indifferent","unfriendly"]},hidden:{alsoSets:["flatFooted"]},hostile:{overrides:["friendly","helpful","indifferent","unfriendly"]},indifferent:{overrides:["friendly","helpful","hostile","unfriendly"]},invisible:{alsoSets:["undetected"]},paralyzed:{alsoSets:["flatFooted"]},prone:{alsoSets:["flatFooted"]},restrained:{alsoSets:["flatFooted","immobilized"],overrides:["grabbed"]},sickened:{hasValue:!0},slowed:{hasValue:!0},stunned:{hasValue:!0},stupefied:{hasValue:!0},unconscious:{alsoSets:["blinded","flatFooted"]},undetected:{alsoSets:["flatFooted"]},unfriendly:{overrides:["friendly","helpful","hostile","indifferent"]},wounded:{hasValue:!0}},status:{shieldBlock:{name:"Shield Block"}}}},function(module,exports){function degtorad(degrees){return degrees*Math.PI/180}TemplateLayer.prototype._onDragLeftStart=function(event){PlaceablesLayer.prototype._onDragLeftStart.call(this,event);const tool=game.activeTool,origin=event.data.origin;let pos;pos=(["cone","circle"].includes(tool),canvas.grid.getSnappedPosition(origin.x,origin.y,2)),origin.x=pos.x,origin.y=pos.y;const data={user:game.user._id,t:tool,x:pos.x,y:pos.y,distance:0,direction:0,fillColor:game.user.data.color||"#FF0000"};"cone"===tool?data.angle=90:"ray"===tool&&(data.width=5);const template=new MeasuredTemplate(data);event.data.preview=this.preview.addChild(template),template.draw()},TemplateLayer.prototype._onDragLeftMove=function(event){if(PlaceablesLayer.prototype._onDragLeftMove.call(this,event),event.data.createState>=1){const dest=event.data.destination,{x:x,y:y}=canvas.grid.getSnappedPosition(dest.x,dest.y,2);dest.x=x,dest.y=y;const template=event.data.preview,ray=new Ray(event.data.origin,event.data.destination),ratio=canvas.dimensions.size/canvas.dimensions.distance;if(["cone","circle"].includes(template.data.t)){const direction=ray.angle;template.data.direction=toDegrees(Math.floor((direction+.125*Math.PI)/(.25*Math.PI))*(.25*Math.PI));const distance=ray.distance/ratio;template.data.distance=Math.floor(distance/canvas.dimensions.distance)*canvas.dimensions.distance}else template.data.direction=toDegrees(ray.angle),template.data.distance=ray.distance/ratio;template.refresh(),event.data.createState=2}};const MeasuredTemplateHighlightGrid=MeasuredTemplate.prototype.highlightGrid;MeasuredTemplate.prototype.highlightGrid=function(){if(!["circle","cone"].includes(this.data.t))return void MeasuredTemplateHighlightGrid.call(this);const grid=canvas.grid,d=canvas.dimensions,bc=this.borderColor,fc=this.fillColor;if(!this.id||!this.shape)return;const hl=grid.getHighlightLayer("Template."+this.id);hl.clear();const nr=Math.ceil(1.5*this.data.distance/d.distance/(d.size/grid.h)),nc=Math.ceil(1.5*this.data.distance/d.distance/(d.size/grid.w)),x=this.data.x,y=this.data.y,[cx,cy]=grid.getCenter(x,y),[col0,row0]=grid.grid.getGridPositionFromPixels(cx,cy),minAngle=(360+(this.data.direction-.5*this.data.angle)%360)%360,maxAngle=(360+(this.data.direction+.5*this.data.angle)%360)%360,measureDistance=(p0,p1)=>{const gs=canvas.dimensions.size,ray=new Ray(p0,p1),nx=Math.ceil(Math.abs(ray.dx/gs)),ny=Math.ceil(Math.abs(ray.dy/gs)),nDiagonal=Math.min(nx,ny),nStraight=Math.abs(ny-nx);return Math.floor(1.5*nDiagonal+nStraight)*canvas.dimensions.distance},originOffset={x:0,y:0};if("cone"===this.data.t){const dir=(this.data.direction>=0?360-this.data.direction:-this.data.direction)%360,xOffset=this.data.x%d.size!=0?Math.sign(1*Math.round(100*Math.cos(degtorad(dir)))/100)/2:0,yOffset=this.data.y%d.size!=0?-Math.sign(1*Math.round(100*Math.sin(degtorad(dir)))/100)/2:0;originOffset.x=xOffset,originOffset.y=yOffset}let origin={x:this.data.x+originOffset.x*d.size,y:this.data.y+originOffset.y*d.size};for(let a=-nc;a<nc;a++)for(let b=-nr;b<nr;b++){const[gx,gy]=canvas.grid.grid.getPixelsFromGridPosition(col0+a,row0+b),[cellCenterX,cellCenterY]=[gx+.5*d.size,gy+.5*d.size];origin={x:this.data.x,y:this.data.y},origin.x+=originOffset.x*d.size,origin.y+=originOffset.y*d.size;const ray=new Ray(origin,{x:cellCenterX,y:cellCenterY}),rayAngle=(360+ray.angle/(Math.PI/180)%360)%360;if("cone"===this.data.t&&ray.distance>0&&(value=(360+(value=rayAngle)%360)%360,!((min=(360+(min=minAngle)%360)%360)<(max=(360+(max=maxAngle)%360)%360)?value>=min&&value<=max:value>=min||value<=max)))continue;measureDistance({x:cellCenterX,y:cellCenterY},origin)<=this.data.distance&&grid.grid.highlightGridPosition(hl,{x:gx,y:gy,color:fc,border:bc})}var min,max,value}},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const character_1=__importDefault(__webpack_require__(52)),npc_1=__importDefault(__webpack_require__(20)),updatednpcsheet_1=__importDefault(__webpack_require__(56)),hazard_1=__importDefault(__webpack_require__(57)),loot_1=__importDefault(__webpack_require__(58)),familiar_1=__importDefault(__webpack_require__(59)),vehicle_1=__importDefault(__webpack_require__(60));exports.default=function(){Actors.unregisterSheet("core",ActorSheet),Actors.registerSheet("pf2e",character_1.default,{types:["character"],makeDefault:!0}),Actors.registerSheet("pf2e",npc_1.default,{types:["npc"],makeDefault:!1}),Actors.registerSheet("pf2e",updatednpcsheet_1.default,{types:["npc"],makeDefault:!0}),Actors.registerSheet("pf2e",hazard_1.default,{types:["hazard"],makeDefault:!0}),Actors.registerSheet("pf2e",loot_1.default,{types:["loot"],makeDefault:!0}),Actors.registerSheet("pf2e",familiar_1.default,{types:["familiar"],makeDefault:!0}),Actors.registerSheet("pf2e",vehicle_1.default,{types:["vehicle"],makeDefault:!0})}},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const creature_1=__importDefault(__webpack_require__(18)),bulk_1=__webpack_require__(6),encumbrance_1=__webpack_require__(55),container_1=__webpack_require__(9),modifiers_1=__webpack_require__(0),conditions_1=__webpack_require__(5);class CRBStyleCharacterActorSheetPF2E extends creature_1.default{static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["default","sheet","actor","pc"],width:700,height:800,tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-content",initial:"character"}],showUnpreparedSpells:!1})}get template(){let style="crb-style";return!game.user.isGM&&this.actor.limited&&(style="limited"),`systems/pf2e/templates/actors/${style}/actor-sheet.html`}async _updateObject(event,formData){var _a;const equippedShieldId=null===(_a=this.getEquippedShield(this.actor.data.items))||void 0===_a?void 0:_a._id;if(void 0!==equippedShieldId){const shieldEntity=this.actor.getOwnedItem(equippedShieldId);await shieldEntity.update({"data.hp.value":formData["data.attributes.shield.hp.value"]})}await super._updateObject(event,formData)}getData(){const sheetData=super.getData(),{hp:hp}=sheetData.data.attributes;0===hp.temp&&delete hp.temp,0===hp.tempmax&&delete hp.tempmax,sheetData.data.attributes.heroPoints.icon=this._getHeroPointsIcon(sheetData.data.attributes.heroPoints.rank),sheetData.data.attributes.heroPoints.hover=CONFIG.PF2E.heroPointLevels[sheetData.data.attributes.heroPoints.rank],sheetData.data.attributes.classDC.icon=this._getProficiencyIcon(sheetData.data.attributes.classDC.rank),sheetData.data.attributes.classDC.hover=CONFIG.PF2E.proficiencyLevels[sheetData.data.attributes.classDC.rank],sheetData.magicTraditions=CONFIG.PF2E.magicTraditions,sheetData.preparationType=CONFIG.PF2E.preparationType,sheetData.showUnpreparedSpells=sheetData.options.showUnpreparedSpells,sheetData.data.attributes.dying.containerWidth=`width: ${13*sheetData.data.attributes.dying.max}px;`,sheetData.data.attributes.dying.icon=this._getDyingIcon(sheetData.data.attributes.dying.value),sheetData.data.attributes.wounded.icon=this._getWoundedIcon(sheetData.data.attributes.wounded.value),sheetData.data.attributes.wounded.max=sheetData.data.attributes.dying.max-1,sheetData.data.attributes.doomed.icon=this._getDoomedIcon(sheetData.data.attributes.doomed.value),sheetData.data.attributes.doomed.max=sheetData.data.attributes.dying.max-1,sheetData.uid=this.id,sheetData.data.attributes.perception.rankName=game.i18n.format("PF2E.ProficiencyLevel"+sheetData.data.attributes.perception.rank);for(const save of Object.values(sheetData.data.saves))save.rankName=game.i18n.format("PF2E.ProficiencyLevel"+save.rank);sheetData.data.attributes.classDC.rankName=game.i18n.format("PF2E.ProficiencyLevel"+sheetData.data.attributes.classDC.rank);for(const save of Object.values(sheetData.data.saves))save.short=game.i18n.format(`PF2E.Saves${save.label}Short`);return sheetData.data.effects={},sheetData.data.effects.conditions=conditions_1.PF2eConditionManager.getFlattenedConditions(sheetData.actor.items.filter(i=>{var _a;return(null===(_a=i.flags.pf2e)||void 0===_a?void 0:_a.condition)&&"condition"===i.type})),sheetData.hasStamina=game.settings.get("pf2e","staminaVariant")>0,sheetData}_prepareItems(actorData){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x,_y,_z,_0;const inventory={weapon:{label:game.i18n.localize("PF2E.InventoryWeaponsHeader"),items:[]},armor:{label:game.i18n.localize("PF2E.InventoryArmorHeader"),items:[]},equipment:{label:game.i18n.localize("PF2E.InventoryEquipmentHeader"),items:[],investedItemCount:0},consumable:{label:game.i18n.localize("PF2E.InventoryConsumablesHeader"),items:[]},treasure:{label:game.i18n.localize("PF2E.InventoryTreasureHeader"),items:[]},backpack:{label:game.i18n.localize("PF2E.InventoryBackpackHeader"),items:[]}},tempSpellbook=[],spellcastingEntriesList=[],spellbooks=[];spellbooks.unassigned={};const spellcastingEntries=[],feats={ancestry:{label:"PF2E.FeatAncestryHeader",feats:[]},ancestryfeature:{label:"PF2E.FeaturesAncestryHeader",feats:[]},archetype:{label:"PF2E.FeatArchetypeHeader",feats:[]},bonus:{label:"PF2E.FeatBonusHeader",feats:[]},class:{label:"PF2E.FeatClassHeader",feats:[]},classfeature:{label:"PF2E.FeaturesClassHeader",feats:[]},skill:{label:"PF2E.FeatSkillHeader",feats:[]},general:{label:"PF2E.FeatGeneralHeader",feats:[]},pfsboon:{label:"PF2E.FeatPFSBoonHeader",feats:[]},deityboon:{label:"PF2E.FeatDeityBoonHeader",feats:[]},curse:{label:"PF2E.FeatCurseHeader",feats:[]}},actions={action:{label:game.i18n.localize("PF2E.ActionsActionsHeader"),actions:[]},reaction:{label:game.i18n.localize("PF2E.ActionsReactionsHeader"),actions:[]},free:{label:game.i18n.localize("PF2E.ActionsFreeActionsHeader"),actions:[]}},readonlyActions={interaction:{label:"Interaction Actions",actions:[]},defensive:{label:"Defensive Actions",actions:[]},offensive:{label:"Offensive Actions",actions:[]}},readonlyEquipment=[],attacks={weapon:{label:"Compendium Weapon",items:[],type:"weapon"}},lores=[],martialSkills=[],bulkConfig={ignoreCoinBulk:game.settings.get("pf2e","ignoreCoinBulk"),ignoreContainerOverflow:game.settings.get("pf2e","ignoreContainerOverflow")},bulkItems=bulk_1.itemsFromActorData(actorData),indexedBulkItems=bulk_1.indexBulkItemsById(bulkItems),containers=container_1.getContainerMap(actorData.items,indexedBulkItems,bulk_1.stacks,bulkConfig);let investedCount=0;for(const i of actorData.items){if(i.img=i.img||CONST.DEFAULT_TOKEN,i.containerData=containers.get(i._id),i.isContainer=i.containerData.isContainer,i.isNotInContainer=i.containerData.isNotInContainer,"armor"!==i.type&&"equipment"!==i.type&&"consumable"!==i.type&&"backpack"!==i.type||(readonlyEquipment.push(i),actorData.hasEquipment=!0),i.canBeEquipped=i.isNotInContainer,i.isEquipped=null!==(_c=null===(_b=null===(_a=i.data)||void 0===_a?void 0:_a.equipped)||void 0===_b?void 0:_b.value)&&void 0!==_c&&_c,i.isSellableTreasure="treasure"===i.type&&"coins"!==(null===(_e=null===(_d=i.data)||void 0===_d?void 0:_d.stackGroup)||void 0===_e?void 0:_e.value),i.hasInvestedTrait=null!==(_j=null===(_h=null===(_g=null===(_f=i.data)||void 0===_f?void 0:_f.traits)||void 0===_g?void 0:_g.value)||void 0===_h?void 0:_h.includes("invested"))&&void 0!==_j&&_j,i.isInvested=null!==(_m=null===(_l=null===(_k=i.data)||void 0===_k?void 0:_k.invested)||void 0===_l?void 0:_l.value)&&void 0!==_m&&_m,i.isInvested&&(investedCount+=1),Object.keys(inventory).includes(i.type)){i.data.quantity.value=i.data.quantity.value||0,i.data.weight.value=i.data.weight.value||0;const[approximatedBulk]=bulk_1.calculateBulk([indexedBulkItems.get(i._id)],bulk_1.stacks,!1,bulkConfig);i.totalWeight=bulk_1.formatBulk(approximatedBulk),i.hasCharges="consumable"===i.type&&i.data.charges.max>0,i.isTwoHanded="weapon"===i.type&&!!(i.data.traits.value||[]).find(x=>x.startsWith("two-hand")),i.wieldedTwoHanded="weapon"===i.type&&(i.data.hands||{}).value,"weapon"===i.type&&attacks.weapon.items.push(i),inventory[i.type].items.push(i)}else if("spell"===i.type){let item;try{item=this.actor.getOwnedItem(i._id),i.spellInfo=item.getSpellInfo()}catch(err){console.log("PF2e System | Character Sheet | Could not load item "+i.name)}tempSpellbook.push(i)}else if("spellcastingEntry"===i.type){spellcastingEntriesList.push(i._id);const spellRank=(null===(_o=i.data.proficiency)||void 0===_o?void 0:_o.value)||0,spellProficiency=modifiers_1.ProficiencyModifier.fromLevelAndRank(actorData.data.details.level.value,spellRank).modifier,spellAbl=i.data.ability.value||"int",spellAttack=actorData.data.abilities[spellAbl].mod+spellProficiency+i.data.item.value;if(i.data.spelldc.value!==spellAttack){const updatedItem={_id:i._id,data:{spelldc:{value:spellAttack,dc:spellAttack+10,mod:actorData.data.abilities[spellAbl].mod}}};this.actor.updateEmbeddedEntity("OwnedItem",updatedItem)}i.data.spelldc.mod=actorData.data.abilities[spellAbl].mod,i.data.spelldc.breakdown=`10 + ${spellAbl} modifier(${actorData.data.abilities[spellAbl].mod}) + proficiency(${spellProficiency}) + item bonus(${i.data.item.value})`,i.data.spelldc.icon=this._getProficiencyIcon(i.data.proficiency.value),i.data.spelldc.hover=CONFIG.PF2E.proficiencyLevels[i.data.proficiency.value],i.data.tradition.title=CONFIG.PF2E.magicTraditions[i.data.tradition.value],i.data.prepared.title=CONFIG.PF2E.preparationType[i.data.prepared.value],"prepared"===(i.data.prepared||{}).value?i.data.prepared.preparedSpells=!0:i.data.prepared.preparedSpells=!1,"ritual"===(i.data.tradition||{}).value?i.data.tradition.ritual=!0:i.data.tradition.ritual=!1,"focus"===(i.data.tradition||{}).value?(i.data.tradition.focus=!0,void 0===i.data.focus&&(i.data.focus={points:1,pool:1}),i.data.focus.icon=this._getFocusIcon(i.data.focus)):i.data.tradition.focus=!1,spellcastingEntries.push(i)}else if("feat"===i.type){const featType=i.data.featType.value||"bonus",actionType=i.data.actionType.value||"passive";if(feats[featType].feats.push(i),Object.keys(actions).includes(actionType)){i.feat=!0;let actionImg=0;if("action"===actionType?actionImg=parseInt((i.data.actions||{}).value,10)||1:"reaction"===actionType?actionImg="reaction":"free"===actionType&&(actionImg="free"),i.img=this._getActionImg(actionImg),actions[actionType].actions.push(i),i.data.actionCategory&&i.data.actionCategory.value)switch(i.data.actionCategory.value){case"interaction":readonlyActions.interaction.actions.push(i),actorData.hasInteractionActions=!0;break;case"defensive":readonlyActions.defensive.actions.push(i),actorData.hasDefensiveActions=!0;break;default:readonlyActions.offensive.actions.push(i),actorData.hasOffensiveActions=!0}else readonlyActions.offensive.actions.push(i),actorData.hasOffensiveActions=!0}}else if("lore"===i.type){i.data.icon=this._getProficiencyIcon((i.data.proficient||{}).value),i.data.hover=CONFIG.PF2E.proficiencyLevels[(i.data.proficient||{}).value];const rank=(null===(_p=i.data.proficient)||void 0===_p?void 0:_p.value)||0,proficiency=modifiers_1.ProficiencyModifier.fromLevelAndRank(actorData.data.details.level.value,rank).modifier,modifier=actorData.data.abilities.int.mod,itemBonus=Number((i.data.item||{}).value||0);i.data.itemBonus=itemBonus,i.data.value=modifier+proficiency+itemBonus,i.data.breakdown=`int modifier(${modifier}) + proficiency(${proficiency}) + item bonus(${itemBonus})`,lores.push(i)}else if("martial"===i.type){i.data.icon=this._getProficiencyIcon((i.data.proficient||{}).value),i.data.hover=CONFIG.PF2E.proficiencyLevels[(i.data.proficient||{}).value];const rank=(null===(_q=i.data.proficient)||void 0===_q?void 0:_q.value)||0,proficiency=modifiers_1.ProficiencyModifier.fromLevelAndRank(actorData.data.details.level.value,rank).modifier;i.data.value=proficiency,i.data.breakdown=`proficiency(${proficiency})`,martialSkills.push(i)}if("action"===i.type){const actionType=i.data.actionType.value||"action";let actionImg=0;if("action"===actionType?actionImg=parseInt(i.data.actions.value,10)||1:"reaction"===actionType?actionImg="reaction":"free"===actionType?actionImg="free":"passive"===actionType&&(actionImg="passive"),i.img=this._getActionImg(actionImg),"passive"===actionType?actions.free.actions.push(i):actions[actionType].actions.push(i),i.data.actionCategory&&i.data.actionCategory.value)switch(i.data.actionCategory.value){case"interaction":readonlyActions.interaction.actions.push(i),actorData.hasInteractionActions=!0;break;case"defensive":readonlyActions.defensive.actions.push(i),actorData.hasDefensiveActions=!0;break;case"offensive":readonlyActions.offensive.actions.push(i),actorData.hasOffensiveActions=!0;break;default:readonlyActions.offensive.actions.push(i),actorData.hasOffensiveActions=!0}else readonlyActions.offensive.actions.push(i),actorData.hasOffensiveActions=!0}}inventory.equipment.investedItemCount=investedCount;const embeddedEntityUpdate=[];for(const i of tempSpellbook)if(spellcastingEntriesList.includes(i.data.location.value)){const location=i.data.location.value;spellbooks[location]=spellbooks[location]||{},this._prepareSpell(actorData,spellbooks[location],i)}else if(1===spellcastingEntriesList.length){const location=spellcastingEntriesList[0];spellbooks[location]=spellbooks[location]||{},embeddedEntityUpdate.push({_id:i._id,"data.location.value":spellcastingEntriesList[0]}),this._prepareSpell(actorData,spellbooks[location],i)}else this._prepareSpell(actorData,spellbooks.unassigned,i);embeddedEntityUpdate.length&&(console.log("PF2e System | Prepare Actor Data | Updating location for the following embedded entities: ",embeddedEntityUpdate),this.actor.updateEmbeddedEntity("OwnedItem",embeddedEntityUpdate)),Object.values(actions).flatMap(section=>section.actions).forEach(action=>{action.downtime=action.data.traits.value.includes("downtime"),action.exploration=action.data.traits.value.includes("exploration"),action.encounter=!(action.downtime||action.exploration)}),actorData.inventory=inventory,Object.keys(spellbooks.unassigned).length&&(actorData.orphanedSpells=!0,actorData.orphanedSpellbook=spellbooks.unassigned),actorData.feats=feats,actorData.attacks=attacks,actorData.actions=actions,actorData.readonlyActions=readonlyActions,actorData.readonlyEquipment=readonlyEquipment,actorData.lores=lores,actorData.martialSkills=martialSkills;for(const entry of spellcastingEntries)entry.data.prepared.preparedSpells&&spellbooks[entry._id]&&this._preparedSpellSlots(entry,spellbooks[entry._id]),entry.spellbook=spellbooks[entry._id];actorData.spellcastingEntries=spellcastingEntries;const equippedShield=this.getEquippedShield(actorData.items);void 0===equippedShield?(actorData.data.attributes.shield={hp:{value:0},maxHp:{value:0},armor:{value:0},hardness:{value:0},brokenThreshold:{value:0}},actorData.data.attributes.shieldBroken=!1):(actorData.data.attributes.shield=duplicate(equippedShield.data),actorData.data.attributes.shieldBroken=(null===(_s=null===(_r=null==equippedShield?void 0:equippedShield.data)||void 0===_r?void 0:_r.hp)||void 0===_s?void 0:_s.value)<=(null===(_u=null===(_t=null==equippedShield?void 0:equippedShield.data)||void 0===_t?void 0:_t.brokenThreshold)||void 0===_u?void 0:_u.value));const featNames=new Set(actorData.items.filter(item=>"feat"===item.type).map(item=>item.name));let bonusEncumbranceBulk=null!==(_v=actorData.data.attributes.bonusEncumbranceBulk)&&void 0!==_v?_v:0,bonusLimitBulk=null!==(_w=actorData.data.attributes.bonusLimitBulk)&&void 0!==_w?_w:0;featNames.has("Hefty Hauler")&&(bonusEncumbranceBulk+=2,bonusLimitBulk+=2);void 0!==actorData.items.find(item=>"Lifting Belt"===item.name&&item.data.equipped.value)&&(bonusEncumbranceBulk+=1,bonusLimitBulk+=1);const[bulk]=bulk_1.calculateBulk(bulkItems,bulk_1.stacks,!1,bulkConfig);actorData.data.attributes.encumbrance=encumbrance_1.calculateEncumbrance(actorData.data.abilities.str.mod,bonusEncumbranceBulk,bonusLimitBulk,bulk,null!==(_0=null===(_z=null===(_y=null===(_x=actorData.data)||void 0===_x?void 0:_x.traits)||void 0===_y?void 0:_y.size)||void 0===_z?void 0:_z.value)&&void 0!==_0?_0:"med")}getEquippedShield(items){return items.find(item=>"armor"===item.type&&item.data.equipped.value&&"shield"===item.data.armorType.value)}activateListeners(html){super.activateListeners(html);{const title=$(".sheet-navigation .active").data("tabTitle");title&&html.find(".navigation-title").text(title)}html.find(".sheet-navigation").on("mouseover",".item",event=>{const title=event.currentTarget.dataset.tabTitle;title&&$(event.currentTarget).parents(".sheet-navigation").find(".navigation-title").text(title)}),html.find(".sheet-navigation").on("mouseout",".item",event=>{const parent=$(event.currentTarget).parents(".sheet-navigation"),title=parent.find(".item.active").data("tabTitle");title&&parent.find(".navigation-title").text(title)}),html.find(".actions-nav").on("click",".tab:not(.tab-active)",event=>{const target=$(event.currentTarget),nav=target.parents(".actions-nav");nav.children(".tab-active").removeClass("tab-active"),nav.siblings(".actions-panels").children(".actions-panel.active").removeClass("active"),target.addClass("tab-active"),nav.siblings(".actions-panels").children("#"+target.data("panel")).addClass("active")}),html.find(".crb-trait-selector").click(ev=>this._onCrbTraitSelector(ev)),html.find(".strikes-list [data-action-index]").on("click",".action-name",event=>{$(event.currentTarget).parents(".expandable").toggleClass("expanded")}),html.find(".strikes-list .damage-strike").click(event=>{if("character"!==this.actor.data.type)throw Error("This sheet only works for characters");event.preventDefault(),event.stopPropagation();const actionIndex=$(event.currentTarget).parents("[data-action-index]").attr("data-action-index"),opts=this.actor.getRollOptions(["all","damage-roll"]);this.actor.data.data.actions[Number(actionIndex)].damage(event,opts)}),html.find(".strikes-list .critical-strike").click(event=>{if("character"!==this.actor.data.type)throw Error("This sheet only works for characters");event.preventDefault(),event.stopPropagation();const actionIndex=$(event.currentTarget).parents("[data-action-index]").attr("data-action-index"),opts=this.actor.getRollOptions(["all","damage-roll"]);this.actor.data.data.actions[Number(actionIndex)].critical(event,opts)}),html.find(".actions-list").on("click",'[data-roll-option]:not([data-roll-option=""])',event=>{this.actor.toggleRollOption(event.currentTarget.dataset.rollName,event.currentTarget.dataset.rollOption)}),html.find(".add-modifier").on("click",".fas.fa-plus-circle",event=>this.onIncrementModifierValue(event)),html.find(".add-modifier").on("click",".fas.fa-minus-circle",event=>this.onDecrementModifierValue(event)),html.find(".add-modifier").on("click",".add-modifier-submit",event=>this.onAddCustomModifier(event)),html.find(".modifier-list").on("click",".remove-modifier",event=>this.onRemoveCustomModifier(event)),html.find(".hover").tooltipster({animation:"fade",delay:200,trigger:"click",arrow:!1,contentAsHTML:!0,debug:!0,interactive:!0,side:["right","bottom"],theme:"crb-hover",minWidth:120})}_getFocusIcon(focus){const icons={};for(let i=0;i<=focus.pool;i++){let iconHtml="";for(let iconColumn=1;iconColumn<=focus.pool;iconColumn++)iconHtml+=iconColumn<=i?'<i class="fas fa-dot-circle"></i>':'<i class="far fa-circle"></i>';icons[i]=iconHtml}return icons[focus.points]}onIncrementModifierValue(event){$(event.currentTarget).parents(".add-modifier").find(".add-modifier-value input[type=number]")[0].stepUp()}onDecrementModifierValue(event){$(event.currentTarget).parents(".add-modifier").find(".add-modifier-value input[type=number]")[0].stepDown()}onAddCustomModifier(event){const parent=$(event.currentTarget).parents(".add-modifier"),stat=$(event.currentTarget).attr("data-stat"),modifier=Number(parent.find(".add-modifier-value input[type=number]").val()),name=""+parent.find(".add-modifier-name").val(),type=""+parent.find(".add-modifier-type").val(),errors=[];stat&&stat.trim()||errors.push("Statistic is required."),modifier&&!Number.isNaN(modifier)||errors.push("Modifier value must be a number."),name&&name.trim()||errors.push("Name is required."),type&&type.trim().length||errors.push("Type is required."),errors.length>0?ui.notifications.error(errors.join(" ")):this.actor.addCustomModifier(stat,name,modifier,type)}onRemoveCustomModifier(event){const stat=$(event.currentTarget).attr("data-stat"),name=$(event.currentTarget).attr("data-name"),errors=[];stat&&stat.trim()||errors.push("Statistic is required."),name&&name.trim()||errors.push("Name is required."),errors.length>0?ui.notifications.error(errors.join(" ")):this.actor.removeCustomModifier(stat,name)}_onSubmit(event){var _a,_b,_c,_d,_e,_f,_g;return"data.attributes.sp.value"===(null===(_a=null==event?void 0:event.currentTarget)||void 0===_a?void 0:_a.name)&&(event.currentTarget.value=Math.clamped(Number(event.currentTarget.value),Number(null!==(_d=null===(_c=null===(_b=this.actor.data.data.attributes)||void 0===_b?void 0:_b.sp)||void 0===_c?void 0:_c.min)&&void 0!==_d?_d:0),Number(null!==(_g=null===(_f=null===(_e=this.actor.data.data.attributes)||void 0===_e?void 0:_e.sp)||void 0===_f?void 0:_f.max)&&void 0!==_g?_g:0))),super._onSubmit(event)}}exports.default=CRBStyleCharacterActorSheetPF2E},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const treasure_1=__webpack_require__(8);class AddCoinsPopup extends FormApplication{static get defaultOptions(){const options=super.defaultOptions;return options.id="add-coins",options.classes=[],options.title="Add Coins",options.template="systems/pf2e/templates/actors/add-coins.html",options.width="auto",options}activateListeners(html){super.activateListeners(html)}async _updateObject(event,formData){const actor=this.object;treasure_1.addCoins({coins:{pp:formData.pp,gp:formData.gp,sp:formData.sp,cp:formData.cp},updateItemQuantity:async(item,quantity)=>{var _a,_b;const currentQuantity=(null===(_b=null===(_a=null==item?void 0:item.data)||void 0===_a?void 0:_a.quantity)||void 0===_b?void 0:_b.value)||0,ownedItem=actor.getOwnedItem(item._id);await ownedItem.update({"data.quantity.value":currentQuantity+quantity})},addFromCompendium:async(compendiumId,quantity)=>{const pack=game.packs.find(p=>"pf2e.equipment-srd"===p.collection),item=await pack.getEntity(compendiumId);item.data.data.quantity.value=quantity,await actor.createOwnedItem(item.data)},combineStacks:formData.combineStacks,items:actor.data.items||[]})}getData(){return{}}}exports.AddCoinsPopup=AddCoinsPopup},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class MoveLootPopup extends FormApplication{constructor(object,options,callback){super(object,options),this.onSubmitCallback=callback}static get defaultOptions(){const options=super.defaultOptions;return options.id="MoveLootPopup",options.classes=[],options.title=game.i18n.localize("PF2E.loot.MoveLootPopupTitle"),options.template="systems/pf2e/templates/popups/loot/move-loot-popup.html",options.width="auto",options}activateListeners(html){super.activateListeners(html)}async _updateObject(event,formData){this.onSubmitCallback&&this.onSubmitCallback(formData.quantity)}}exports.MoveLootPopup=MoveLootPopup},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const bulk_1=__webpack_require__(6);class InventoryWeight{constructor(combinedBulk,encumberedAt,limit){this.combinedBulk=combinedBulk,this.encumberedAt=encumberedAt,this.limit=limit}get encumberedPercentage(){const totalTimes10=this.combinedBulk.toLightBulk(),encumberedAtTimes10=10*this.encumberedAt+10;return Math.floor(totalTimes10/encumberedAtTimes10*100)}get limitPercentage(){const totalTimes10=this.combinedBulk.toLightBulk(),limitTimes10=10*this.limit+10;return Math.floor(totalTimes10/limitTimes10*100)}get limitPercentageMax100(){return this.limitPercentage>100?100:this.limitPercentage}get isEncumbered(){return this.combinedBulk.normal>this.encumberedAt}get isOverLimit(){return this.combinedBulk.normal>this.limit}get bulk(){return this.combinedBulk.normal}}exports.InventoryWeight=InventoryWeight,exports.calculateEncumbrance=function(strengthModifier,bonusBulkEncumbrance,bonusBulkLimit,combinedBulk,actorSize="med"){const bulkFactor=bulk_1.bulkConversions[actorSize].bulkLimitFactor,encumberedAt=Math.floor((strengthModifier+bonusBulkEncumbrance+5)*bulkFactor),limit=Math.floor((strengthModifier+bonusBulkLimit+10)*bulkFactor);return new InventoryWeight(combinedBulk,encumberedAt,limit)}},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const npc_1=__importDefault(__webpack_require__(20)),dice_1=__webpack_require__(4),modifiers_1=__webpack_require__(0);class UpdatedNPCActorPF2ESheet extends npc_1.default{get template(){const path="systems/pf2e/templates/actors/";return this.actor.getFlag("pf2e","editNPC.value")?path+"npc-sheet.html":path+"npc-sheet-no-edit.html"}static get defaultOptions(){const options=super.defaultOptions;return mergeObject(options,{classes:options.classes.concat(["pf2e","actor","npc-sheet","updatedNPCSheet"]),width:650,height:680,showUnpreparedSpells:!0}),options}getData(){var _a;const sheetData=super.getData();sheetData.flags=sheetData.actor.flags,void 0===sheetData.flags.pf2e_updatednpcsheet&&(sheetData.flags.pf2e_updatednpcsheet={}),void 0===sheetData.flags.pf2e_updatednpcsheet.editNPC&&(sheetData.flags.pf2e_updatednpcsheet.editNPC={value:!1}),void 0===sheetData.flags.pf2e_updatednpcsheet.allSaveDetail&&(sheetData.flags.pf2e_updatednpcsheet.allSaveDetail={value:""}),sheetData.npcEliteActive=this.npcIsElite()?" active":"",sheetData.npcWeakActive=this.npcIsWeak()?" active":"",sheetData.npcEliteHidden=this.npcIsWeak()?" hidden":"",sheetData.npcWeakHidden=this.npcIsElite()?" hidden":"",sheetData.actorRarities=CONFIG.PF2E.rarityTraits,sheetData.actorRarity=sheetData.actorRarities[sheetData.data.traits.rarity.value],sheetData.isNotCommon="common"!==sheetData.data.traits.rarity.value,sheetData.actorSize=sheetData.actorSizes[sheetData.data.traits.size.value],sheetData.actorTraits=(sheetData.data.traits.traits||{}).value,sheetData.actorAlignment=sheetData.data.details.alignment.value,sheetData.hasLanguages=!1,sheetData.data.traits.languages.value&&Array.isArray(sheetData.data.traits.languages.value)&&sheetData.actor.data.traits.languages.value.length>0&&(sheetData.hasLanguages=!0),sheetData.hasSkills=sheetData.actor.lores.length>0,sheetData.hasACDetails=sheetData.data.attributes.ac.details&&""!==sheetData.data.attributes.ac.details,sheetData.hasHPDetails=sheetData.data.attributes.hp.details&&""!==sheetData.data.attributes.hp.details,sheetData.hasFortDetails=sheetData.data.saves.fortitude.saveDetail&&""!==sheetData.data.saves.fortitude.saveDetail,sheetData.hasRefDetails=sheetData.data.saves.reflex.saveDetail&&""!==sheetData.data.saves.reflex.saveDetail,sheetData.hasWillDetails=sheetData.data.saves.will.saveDetail&&""!==sheetData.data.saves.will.saveDetail,sheetData.hasAllSaveDetails=(sheetData.data.attributes.allSaves||{}).value&&""!==(sheetData.data.attributes.allSaves||{}).value,sheetData.hasImmunities=!!sheetData.data.traits.di.value.length&&sheetData.data.traits.di.value,sheetData.hasResistances=!!sheetData.data.traits.dr.length&&Array.isArray(sheetData.data.traits.dr),sheetData.hasWeaknesses=!!sheetData.data.traits.dv.length&&Array.isArray(sheetData.data.traits.dv),sheetData.data.attributes.speed&&sheetData.data.attributes.speed.otherSpeeds&&(sheetData.hasSpeedDetails=!!sheetData.data.attributes.speed.otherSpeeds.length&&sheetData.data.attributes.speed.otherSpeeds),sheetData.hasSpells=!!sheetData.actor.spellcastingEntries.length&&sheetData.actor.spellcastingEntries;const equipment=[],reorgActions={interaction:{label:"Interaction Actions",actions:{action:{label:"Actions",actions:[]},reaction:{label:"Reactions",actions:[]},free:{label:"Free Actions",actions:[]},passive:{label:"Passive Actions",actions:[]}}},defensive:{label:"Defensive Actions",actions:{action:{label:"Actions",actions:[]},reaction:{label:"Reactions",actions:[]},free:{label:"Free Actions",actions:[]},passive:{label:"Passive Actions",actions:[]}}},offensive:{label:"Offensive Actions",actions:{action:{label:"Actions",actions:[]},reaction:{label:"Reactions",actions:[]},free:{label:"Free Actions",actions:[]},passive:{label:"Passive Actions",actions:[]}}}};sheetData.hasInteractionActions=!1,sheetData.hasDefensiveActions=!1,sheetData.hasOffensiveActions=!1,sheetData.hasEquipment=!1;for(const i of sheetData.actor.items)if("weapon"===i.type||"armor"===i.type||"equipment"===i.type||"consumable"===i.type||"treasure"===i.type)1!=i.data.quantity.value&&(i.name+=` (${i.data.quantity.value})`),equipment.push(i),sheetData.hasEquipment=!0;else if("action"===i.type){const actionType=i.data.actionType.value||"action";switch((null===(_a=i.data.actionCategory)||void 0===_a?void 0:_a.value)||"offensive"){case"interaction":reorgActions.interaction.actions[actionType].actions.push(i),sheetData.hasInteractionActions=!0;break;case"defensive":reorgActions.defensive.actions[actionType].actions.push(i),sheetData.hasDefensiveActions=!0;break;default:reorgActions.offensive.actions[actionType].actions.push(i),sheetData.hasOffensiveActions=!0}}else if("melee"===i.type||"ranged"===i.type){const actionImg=1;i.img=this._getActionImg(actionImg)}return sheetData.actor.reorgActions=reorgActions,sheetData.actor.equipment=equipment,sheetData}npcAdjustment(increase){let actorData=duplicate(this.actor.data);const tokenData=null!==this.token?duplicate(this.token.data):duplicate(this.actor.data.token),traits=getProperty(actorData.data,"traits.traits.value")||[];let traitsAdjusted=!1,tokenScale=1,adjustBackToNormal=!1;if(increase){console.log("PF2e System | Adjusting NPC to become more powerful");for(const trait of traits)if("weak"===trait){const index=traits.indexOf(trait);index>-1&&traits.splice(index,1),traitsAdjusted=!0}else"elite"===trait&&(traitsAdjusted=!0);traitsAdjusted?(actorData.name.startsWith("Weak ")&&(actorData.name=actorData.name.slice(5)),tokenData.name.startsWith("Weak ")&&(tokenData.name=tokenData.name.slice(5)),adjustBackToNormal=!0):(traits.push("elite"),actorData.name="Elite "+actorData.name,tokenData.name="Elite "+tokenData.name,tokenScale=1.2)}else{console.log("PF2e System | Adjusting NPC to become less powerful");for(const trait of traits)if("elite"===trait){const index=traits.indexOf(trait);index>-1&&traits.splice(index,1),traitsAdjusted=!0}else"weak"===trait&&(traitsAdjusted=!0);traitsAdjusted?(actorData.name.startsWith("Elite ")&&(actorData.name=actorData.name.slice(6)),tokenData.name.startsWith("Elite ")&&(tokenData.name=tokenData.name.slice(6)),adjustBackToNormal=!0):(traits.push("weak"),actorData.name="Weak "+actorData.name,tokenData.name="Weak "+tokenData.name,tokenScale=.8)}actorData.data.traits.traits.value=traits,actorData=this._applyAdjustmentToData(actorData,increase,adjustBackToNormal),null===this.token?this.actor.update({"token.name":tokenData.name,"token.scale":tokenScale}):this.token.update({name:tokenData.name,scale:tokenScale}),this.actor.update(actorData)}_applyAdjustmentToData(actorData,increase,adjustBackToNormal){var _a,_b;const positive=increase?1:-1,mod=2*positive,customModifiers=null!==(_a=actorData.data.customModifiers)&&void 0!==_a?_a:{};if(customModifiers.all=(null!==(_b=customModifiers.all)&&void 0!==_b?_b:[]).filter(m=>!["Weak","Elite"].includes(m.name)),!adjustBackToNormal){const modifier=new modifiers_1.PF2Modifier(increase?"Elite":"Weak",mod,modifiers_1.PF2ModifierType.UNTYPED);customModifiers.all.push(modifier)}const lvl=parseInt(actorData.data.details.level.value,10),originalLvl=adjustBackToNormal?lvl+positive:lvl,hp=parseInt(actorData.data.attributes.hp.max,10);let hpAdjustment=10;originalLvl>=20?hpAdjustment=30:originalLvl>=5?hpAdjustment=20:originalLvl>=2&&(hpAdjustment=15),actorData.data.attributes.hp.max=hp+hpAdjustment*positive,actorData.data.attributes.hp.value=actorData.data.attributes.hp.max,actorData.data.details.level.value=lvl+positive;for(const item of actorData.items)if("melee"===item.type){const attack=getProperty(item.data,"bonus.value");if(void 0!==attack){item.data.bonus.value=parseInt(attack,10)+mod,item.data.bonus.total=item.data.bonus.value;const dmg=getProperty(item.data.damageRolls[0],"damage");if(void 0!==dmg){const lastTwoChars=dmg.slice(-2);parseInt(lastTwoChars,10)===-1*mod?item.data.damageRolls[0].damage=dmg.slice(0,-2):item.data.damageRolls[0].damage=dmg+(increase?"+":"")+mod}}}else if("spellcastingEntry"===item.type){const spellDc=getProperty(item.data,"spelldc.dc");if(void 0!==spellDc){item.data.spelldc.dc=parseInt(spellDc,10)+mod;const spellAttack=getProperty(item.data,"spelldc.value");item.data.spelldc.value=parseInt(spellAttack,10)+mod}}else if("spell"===item.type){const spellName=item.name.toLowerCase(),spellDamage=getProperty(item.data,"damage.value"),spellLevel=getProperty(item.data,"level.value");let spellDmgAdjustmentMod=1;if(spellDamage){spellDmgAdjustmentMod=0===spellLevel||spellName.includes("at will")?1:2;const lastTwoChars=spellDamage.slice(-2);parseInt(lastTwoChars,10)===mod*spellDmgAdjustmentMod*-1?item.data.damage.value=spellDamage.slice(0,-2):item.data.damage.value=spellDamage+(increase?"+":"")+mod*spellDmgAdjustmentMod}}else if("action"===item.type){let actionDescr=getProperty(item.data,"description.value");void 0!==actionDescr&&(actionDescr=actionDescr.replace(/DC (\d+)+/g,(match,number)=>"DC "+(parseInt(number,10)+mod)),actionDescr=actionDescr.replace(/(\d+)?d(\d+)([+-]\d+)?(\s+[a-z]+[\s.,])?/g,(match,a,b,c,d)=>{const bonus=parseInt(c,10);if("rounds"!==(null==d?void 0:d.substring(1,7)))if(Number.isNaN(bonus))c=(increase?"+":"")+2*mod;else if(bonus===2*mod*-1)c="";else{const newC=bonus+2*mod;c=0===newC?"":`${newC>0?"+":""}${newC}`}else void 0===c&&(c="");return`${a||""}d${b}${c}${d||""}`}),item.data.description.value=actionDescr)}return actorData}npcIsElite(){const actorData=duplicate(this.actor.data),traits=getProperty(actorData.data,"traits.traits.value")||[];for(const trait of traits)if("elite"===trait)return!0;return!1}npcIsWeak(){const actorData=duplicate(this.actor.data),traits=getProperty(actorData.data,"traits.traits.value")||[];for(const trait of traits)if("weak"===trait)return!0;return!1}rollNPCDamageRoll(event,damageRoll,item){const itemData=item.data.data,rollData=duplicate(item.actor.data.data),parts=[damageRoll.die],dtype=CONFIG.PF2E.damageTypes[damageRoll.damageType];let title=item.name+" - Damage";dtype&&(title+=` (${dtype})`),rollData.item=itemData,dice_1.DicePF2e.damageRoll({event:event,parts:parts,actor:item.actor,data:rollData,title:title,speaker:ChatMessage.getSpeaker({actor:item.actor}),dialogOptions:{width:400,top:event.clientY-80,left:window.innerWidth-710}})}expandAttackEffect(attackEffectName,event,triggerItem){const actionList=$(event.currentTarget).parents("form").find(".item.action-item");let toggledAnything=!1;const mAbilities=CONFIG.PF2E.monsterAbilities();if(console.log("PF2e System | mAbilities: ",mAbilities),actionList.each((index,element)=>{$(element).attr("data-item-name").trim().toLowerCase()===attackEffectName.trim().toLowerCase()&&($(element).find("h4").click(),toggledAnything=!0)}),!toggledAnything){const newAbilityInfo=mAbilities[attackEffectName];if(newAbilityInfo){const newAction={name:attackEffectName,type:"action",data:{actionType:{value:newAbilityInfo.actionType},actionCategory:{value:"offensive"},source:{value:""},description:{value:newAbilityInfo.description},traits:{value:[]},actions:{value:newAbilityInfo.actionCost}}},traitRegEx=/(?:Traits.aspx.+?">)(?:<\w+>)*(.+?)(?:<\/\w+>)*(?:<\/a>)/g,matchTraits=[...newAbilityInfo.description.matchAll(traitRegEx)];for(let i=0;i<matchTraits.length;i++)matchTraits[i]&&matchTraits[i].length>=2&&matchTraits[i][1]&&(newAction.data.traits.value.includes(matchTraits[i][1])||newAction.data.traits.value.push(matchTraits[i][1]));triggerItem.actor.createOwnedItem(newAction,{displaySheet:!1})}}}activateListeners(html){super.activateListeners(html),this.options.editable&&(html.find(".npc-detail-text textarea").focusout(async event=>{event.target.style.height="5px",event.target.style.height=event.target.scrollHeight+"px"}),html.find(".npc-detail-text textarea").each((index,element)=>{element.style.height="5px",element.style.height=element.scrollHeight+"px"}),html.find(".isNPCEditable").change(ev=>{this.actor.setFlag("pf2e","editNPC",{value:ev.target.checked})}),html.find("button.npc-damageroll").click(ev=>{ev.preventDefault(),ev.stopPropagation();const itemId=$(ev.currentTarget).parents(".item").attr("data-item-id"),drId=Number($(ev.currentTarget).attr("data-dmgRoll")),item=this.actor.getOwnedItem(itemId),damageRoll=item.data.flags.pf2e_updatednpcsheet.damageRolls[drId];switch(ev.target.dataset.action){case"npcDamageRoll":this.rollNPCDamageRoll(ev,damageRoll,item)}}),html.find("button.npc-attackEffect").click(ev=>{ev.preventDefault(),ev.stopPropagation();const itemId=$(ev.currentTarget).parents(".item").attr("data-item-id"),aId=Number($(ev.currentTarget).attr("data-attackEffect")),item=this.actor.getOwnedItem(itemId);if(null===item||"melee"!==item.data.type)return void console.log("PF2e System | clicked an attackEffect, but item was not a melee");const attackEffect=item.data.data.attackEffects.value[aId];switch(console.log("PF2e System | clicked an attackEffect:",attackEffect,ev),ev.target.dataset.action){case"npcAttackEffect":this.expandAttackEffect(attackEffect,ev,item)}}),html.find("a.npc-elite-adjustment").click(e=>{e.preventDefault(),console.log("PF2e System | Adding Elite adjustment to NPC");const eliteButton=$(e.currentTarget),weakButton=eliteButton.siblings(".npc-weak-adjustment");eliteButton.toggleClass("active"),weakButton.toggleClass("hidden"),this.npcAdjustment(eliteButton.hasClass("active"))}),html.find("a.npc-weak-adjustment").click(e=>{e.preventDefault(),console.log("PF2e System | Adding Weak adjustment to NPC");const weakButton=$(e.currentTarget),eliteButton=weakButton.siblings(".npc-elite-adjustment");weakButton.toggleClass("active"),eliteButton.toggleClass("hidden"),this.npcAdjustment(!weakButton.hasClass("active"))}))}}exports.default=UpdatedNPCActorPF2ESheet},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const base_1=__importDefault(__webpack_require__(11));class ActorSheetPF2eHazard extends base_1.default{static get defaultOptions(){const options=super.defaultOptions;return mergeObject(options,{classes:options.classes.concat(["pf2e","actor","hazard"]),width:650,height:680}),options}get template(){const path="systems/pf2e/templates/actors/";return this.actor.getFlag("pf2e","editHazard.value")?path+"hazard-sheet.html":path+"hazard-sheet-no-edit.html"}getData(){var _a,_b,_c;const sheetData=super.getData();for(const[s,save]of Object.entries(sheetData.data.saves))save.label=CONFIG.PF2E.saves[s];return sheetData.flags=sheetData.actor.flags,void 0===sheetData.flags.editHazard&&(sheetData.flags.editHazard={value:!1}),sheetData.hazardTraits=CONFIG.PF2E.hazardTraits,sheetData.actorTraits=(sheetData.data.traits.traits||{}).value,sheetData.stealthDC=(null!==(_b=null===(_a=sheetData.data.attributes.stealth)||void 0===_a?void 0:_a.value)&&void 0!==_b?_b:0)+10,sheetData.hasStealthDescription=(null===(_c=sheetData.data.attributes.stealth)||void 0===_c?void 0:_c.details)||!1,sheetData.hasImmunities=sheetData.data.traits.di.value!==[],sheetData.hasDescription=sheetData.data.details.description||!1,sheetData.hasDisable=sheetData.data.details.disable||!1,sheetData.hasRoutineDetails=sheetData.data.details.routine||!1,sheetData.hasResetDetails=sheetData.data.details.reset||!1,sheetData.hasHPDetails=sheetData.data.attributes.hp.details||!1,sheetData.hasWillSave=0!==sheetData.data.saves.will.value||!1,sheetData.brokenThreshold=Math.floor(sheetData.data.attributes.hp.max/2),sheetData}_prepareItems(actorData){const attacks={melee:{label:"NPC Melee Attack",items:[],type:"melee"},ranged:{label:"NPC Ranged Attack",items:[],type:"melee"}},actions={action:{label:"Actions",actions:[]},reaction:{label:"Reactions",actions:[]},free:{label:"Free Actions",actions:[]},passive:{label:"Passive Actions",actions:[]}};for(const i of actorData.items)if(i.img=i.img||CONST.DEFAULT_TOKEN,"melee"===i.type){const weaponType=(i.data.weaponType||{}).value||"melee",isAgile=(i.data.traits.value||[]).includes("agile");i.data.bonus.total=parseInt(i.data.bonus.value,10)||0,i.data.isAgile=isAgile;const traits=[];if(0!==(i.data.traits.value||[]).length)for(let j=0;j<i.data.traits.value.length;j++){const traitsObject={label:CONFIG.PF2E.weaponTraits[i.data.traits.value[j]]||i.data.traits.value[j].charAt(0).toUpperCase()+i.data.traits.value[j].slice(1),description:CONFIG.PF2E.traitsDescriptions[i.data.traits.value[j]]||""};traits.push(traitsObject)}i.traits=traits.filter(p=>!!p),attacks[weaponType].items.push(i)}else if("action"===i.type){const actionType=i.data.actionType.value||"action";let actionImg=0;"action"===actionType?actionImg=parseInt((i.data.actions||{}).value,10)||1:"reaction"===actionType?actionImg="reaction":"free"===actionType?actionImg="free":"passive"===actionType&&(actionImg="passive"),i.img=this._getActionImg(actionImg);const traits=[];if(0!==(i.data.traits.value||[]).length)for(let j=0;j<i.data.traits.value.length;j++){const traitsObject={label:CONFIG.PF2E.weaponTraits[i.data.traits.value[j]]||i.data.traits.value[j].charAt(0).toUpperCase()+i.data.traits.value[j].slice(1),description:CONFIG.PF2E.traitsDescriptions[i.data.traits.value[j]]||""};traits.push(traitsObject)}i.data.actionType.value&&traits.push({label:CONFIG.PF2E.weaponTraits[i.data.actionType.value]||i.data.actionType.value.charAt(0).toUpperCase()+i.data.actionType.value.slice(1),description:CONFIG.PF2E.traitsDescriptions[i.data.actionType.value]||""}),i.traits=traits.filter(p=>!!p),actions[actionType].actions.push(i)}actorData.actions=actions,actorData.attacks=attacks}activateListeners(html){super.activateListeners(html),html.find("button").click(ev=>{ev.preventDefault(),ev.stopPropagation();const itemId=$(ev.currentTarget).parents(".item").attr("data-item-id"),item=this.actor.getOwnedItem(itemId);switch(ev.target.dataset.action){case"weaponAttack":item.rollWeaponAttack(ev);break;case"weaponAttack2":item.rollWeaponAttack(ev,2);break;case"weaponAttack3":item.rollWeaponAttack(ev,3);break;case"weaponDamage":item.rollWeaponDamage(ev);break;case"weaponDamageCritical":item.rollWeaponDamage(ev,!0);break;case"npcAttack":item.rollNPCAttack(ev);break;case"npcAttack2":item.rollNPCAttack(ev,2);break;case"npcAttack3":item.rollNPCAttack(ev,3);break;case"npcDamage":item.rollNPCDamage(ev);break;case"npcDamageCritical":item.rollNPCDamage(ev,!0);break;case"spellAttack":item.rollSpellAttack(ev);break;case"spellDamage":item.rollSpellDamage(ev);break;case"consume":item.rollConsumable(ev);break;default:throw new Error("Unknown action type")}}),this.options.editable&&html.find(".isHazardEditable").change(ev=>{this.actor.setFlag("pf2e","editHazard",{value:ev.target.checked})})}}exports.default=ActorSheetPF2eHazard},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const treasure_1=__webpack_require__(8),base_1=__importDefault(__webpack_require__(11)),bulk_1=__webpack_require__(6),container_1=__webpack_require__(9);class ActorSheetPF2eLoot extends base_1.default{static get defaultOptions(){const options=super.defaultOptions;return mergeObject(options,{classes:options.classes.concat(["pf2e","actor","loot"]),width:650,height:680,tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-content",initial:"inventory"}]}),options}get template(){return this.actor.getFlag("pf2e","editLoot.value")&&game.user.isGM?"systems/pf2e/templates/actors/loot-sheet.html":"systems/pf2e/templates/actors/loot-sheet-no-edit.html"}getData(){const sheetData=super.getData();if(void 0!==sheetData.actor.items){const treasure=treasure_1.calculateWealth(sheetData.actor.items);sheetData.totalTreasure={};for(const[denomination,value]of Object.entries(treasure))sheetData.totalTreasure[denomination]={value:value,label:CONFIG.PF2E.currencies[denomination]}}return void 0===this.actor.getFlag("pf2e","editLoot.value")&&this.actor.setFlag("pf2e","editLoot",{value:!1}),sheetData.isLoot="Loot"===sheetData.data.lootSheetType,sheetData.isShop=!sheetData.isLoot,this._prepareItems(sheetData.actor),sheetData.isGM=game.user.isGM,sheetData}_prepareItems(actorData){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m;const inventory={weapon:{label:game.i18n.localize("PF2E.InventoryWeaponsHeader"),items:[]},armor:{label:game.i18n.localize("PF2E.InventoryArmorHeader"),items:[]},equipment:{label:game.i18n.localize("PF2E.InventoryEquipmentHeader"),items:[]},consumable:{label:game.i18n.localize("PF2E.InventoryConsumablesHeader"),items:[]},treasure:{label:game.i18n.localize("PF2E.InventoryTreasureHeader"),items:[]},backpack:{label:game.i18n.localize("PF2E.InventoryBackpackHeader"),items:[]}},bulkConfig={ignoreCoinBulk:game.settings.get("pf2e","ignoreCoinBulk"),ignoreContainerOverflow:game.settings.get("pf2e","ignoreContainerOverflow")},bulkItems=bulk_1.itemsFromActorData(actorData),indexedBulkItems=bulk_1.indexBulkItemsById(bulkItems),containers=container_1.getContainerMap(actorData.items,indexedBulkItems,bulk_1.stacks,bulkConfig);for(const i of actorData.items)if(i.img=i.img||CONST.DEFAULT_TOKEN,i.containerData=containers.get(i._id),i.isContainer=i.containerData.isContainer,i.isNotInContainer=i.containerData.isNotInContainer,i.canBeEquipped=i.isNotInContainer,i.isEquipped=null!==(_c=null===(_b=null===(_a=i.data)||void 0===_a?void 0:_a.equipped)||void 0===_b?void 0:_b.value)&&void 0!==_c&&_c,i.isSellableTreasure="treasure"===i.type&&"coins"!==(null===(_e=null===(_d=i.data)||void 0===_d?void 0:_d.stackGroup)||void 0===_e?void 0:_e.value),i.hasInvestedTrait=null!==(_j=null===(_h=null===(_g=null===(_f=i.data)||void 0===_f?void 0:_f.traits)||void 0===_g?void 0:_g.value)||void 0===_h?void 0:_h.includes("invested"))&&void 0!==_j&&_j,i.isInvested=null!==(_m=null===(_l=null===(_k=i.data)||void 0===_k?void 0:_k.invested)||void 0===_l?void 0:_l.value)&&void 0!==_m&&_m,Object.keys(inventory).includes(i.type)){i.data.quantity.value=i.data.quantity.value||0,i.data.weight.value=i.data.weight.value||0;const[approximatedBulk]=bulk_1.calculateBulk([indexedBulkItems.get(i._id)],bulk_1.stacks,!1,bulkConfig);i.totalWeight=bulk_1.formatBulk(approximatedBulk),i.hasCharges="consumable"===i.type&&i.data.charges.max>0,i.isTwoHanded="weapon"===i.type&&!!(i.data.traits.value||[]).find(x=>x.startsWith("two-hand")),i.wieldedTwoHanded="weapon"===i.type&&(i.data.hands||{}).value,inventory[i.type].items.push(i)}actorData.inventory=inventory}activateListeners(html){super.activateListeners(html);this.options.editable&&html.find(".isLootEditable").change(ev=>{this.actor.setFlag("pf2e","editLoot",{value:ev.target.checked})})}}exports.default=ActorSheetPF2eLoot},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const actor_1=__webpack_require__(2);class ActorSheetPF2eFamiliar extends ActorSheet{static get defaultOptions(){const options=super.defaultOptions;return mergeObject(options,{classes:options.classes.concat(["actor","familiar"]),width:650,height:680,tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-content",initial:"attributes"}]}),options}get template(){return"systems/pf2e/templates/actors/familiar-sheet.html"}getData(){const sheet=super.getData(),owners=Object.entries(this.actor.data.permission).filter(([id,permission],idx)=>permission===CONST.ENTITY_PERMISSIONS.OWNER).map(([userID,_],idx)=>game.users.get(userID));return sheet.masters=game.actors.entities.filter(actor=>["character","npc"].includes(actor.data.type)).filter(actor=>actor.hasPerm(game.user,"OWNER")).filter(actor=>owners.some(owner=>actor.hasPerm(owner,"OWNER"))),sheet.abilities=CONFIG.PF2E.abilities,sheet}activateListeners(html){super.activateListeners(html),html.find('[data-saving-throw]:not([data-saving-throw=""])').on("click","*",event=>{const save=$(event.currentTarget).closest("[data-saving-throw]").attr("data-saving-throw"),options=this.actor.getRollOptions(["all","saving-throw",save]);this.actor.data.data.saves[save].roll(event,options)}),html.find('[data-skill-check]:not([data-skill-check=""])').on("click","*",event=>{var _a;const skill=$(event.currentTarget).closest("[data-skill-check]").attr("data-skill-check"),options=this.actor.getRollOptions(["all","skill-check",null!==(_a=actor_1.SKILL_DICTIONARY[skill])&&void 0!==_a?_a:skill]);this.actor.data.data.skills[skill].roll(event,options)}),html.find("[data-perception-check]").on("click","*",event=>{const options=this.actor.getRollOptions(["all","perception"]);this.actor.data.data.attributes.perception.roll(event,options)}),html.find("[data-attack-roll]").on("click","*",event=>{const options=this.actor.getRollOptions(["all","attack"]);this.actor.data.data.attack.roll(event,options)}),html.find(".item-list").on("click",".expandable",event=>{$(event.currentTarget).removeClass("expandable").addClass("expanded")}),html.find(".item-list").on("click",".expanded",event=>{$(event.currentTarget).removeClass("expanded").addClass("expandable")}),this.isEditable&&(html.find(".item-list").on("click",'[data-item-id]:not([data-item-id=""]) .item-edit',event=>{const itemID=$(event.currentTarget).closest("[data-item-id]").attr("data-item-id");return new(0,CONFIG.Item.entityClass)(this.actor.getOwnedItem(itemID).data,{actor:this.actor}).sheet.render(!0),!1}),html.find(".item-list").on("click",'[data-item-id]:not([data-item-id=""]) .item-delete',event=>{const itemID=$(event.currentTarget).closest("[data-item-id]").attr("data-item-id"),item=this.actor.getOwnedItem(itemID);return new Dialog({title:`Remove ${item.type}?`,content:`<p>Are you sure you want to remove ${item.name}?</p>`,buttons:{delete:{icon:'<i class="fas fa-trash"></i>',label:"Remove",callback:()=>{this.actor.deleteOwnedItem(itemID)}},cancel:{icon:'<i class="fas fa-times"></i>',label:"Cancel"}},default:"cancel"}).render(!0),!1}))}}exports.default=ActorSheetPF2eFamiliar},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const bulk_1=__webpack_require__(6),container_1=__webpack_require__(9),base_1=__importDefault(__webpack_require__(11)),treasure_1=__webpack_require__(8);class ActorSheetPF2eVehicle extends base_1.default{static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["default","sheet","actor","vehicle"],width:670,height:480,tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-content",initial:"details"}]})}get template(){return"systems/pf2e/templates/actors/vehicle/vehicle-sheet.html"}getData(){const sheetData=super.getData();if(sheetData.actorSizes=CONFIG.PF2E.actorSizes,sheetData.actorSize=sheetData.actorSizes[sheetData.data.traits.size.value],sheetData.actorRarities=CONFIG.PF2E.rarityTraits,sheetData.actorRarity=sheetData.actorRarities[sheetData.data.traits.rarity.value],sheetData.isNotCommon="common"!==sheetData.data.traits.rarity.value,void 0!==sheetData.data.attributes&&(sheetData.data.attributes.hp.brokenThreshold=Math.floor(sheetData.data.attributes.hp.max/2)),void 0!==sheetData.data.saves)for(const[s,save]of Object.entries(sheetData.data.saves))save.label=CONFIG.PF2E.saves[s];if(this._prepareItems(sheetData.actor),void 0!==sheetData.actor.items){const treasure=treasure_1.calculateWealth(sheetData.actor.items);sheetData.totalTreasure={};for(const[denomination,value]of Object.entries(treasure))sheetData.totalTreasure[denomination]={value:value,label:CONFIG.PF2E.currencies[denomination]}}return sheetData}_prepareItems(actorData){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m;const inventory={weapon:{label:game.i18n.localize("PF2E.InventoryWeaponsHeader"),items:[]},armor:{label:game.i18n.localize("PF2E.InventoryArmorHeader"),items:[]},equipment:{label:game.i18n.localize("PF2E.InventoryEquipmentHeader"),items:[]},consumable:{label:game.i18n.localize("PF2E.InventoryConsumablesHeader"),items:[]},treasure:{label:game.i18n.localize("PF2E.InventoryTreasureHeader"),items:[]},backpack:{label:game.i18n.localize("PF2E.InventoryBackpackHeader"),items:[]}},actions={action:{label:game.i18n.localize("PF2E.ActionsActionsHeader"),actions:[]},reaction:{label:game.i18n.localize("PF2E.ActionsReactionsHeader"),actions:[]},free:{label:game.i18n.localize("PF2E.ActionsFreeActionsHeader"),actions:[]}},readonlyActions={interaction:{label:"Interaction Actions",actions:[]},defensive:{label:"Defensive Actions",actions:[]},offensive:{label:"Offensive Actions",actions:[]}},bulkConfig={ignoreCoinBulk:game.settings.get("pf2e","ignoreCoinBulk"),ignoreContainerOverflow:game.settings.get("pf2e","ignoreContainerOverflow")},bulkItems=bulk_1.itemsFromActorData(actorData),indexedBulkItems=bulk_1.indexBulkItemsById(bulkItems),containers=container_1.getContainerMap(actorData.items,indexedBulkItems,bulk_1.stacks,bulkConfig);for(const i of actorData.items){if(i.img=i.img||CONST.DEFAULT_TOKEN,i.containerData=containers.get(i._id),i.isContainer=i.containerData.isContainer,i.isNotInContainer=i.containerData.isNotInContainer,i.canBeEquipped=i.isNotInContainer,i.isEquipped=null!==(_c=null===(_b=null===(_a=i.data)||void 0===_a?void 0:_a.equipped)||void 0===_b?void 0:_b.value)&&void 0!==_c&&_c,i.isSellableTreasure="treasure"===i.type&&"coins"!==(null===(_e=null===(_d=i.data)||void 0===_d?void 0:_d.stackGroup)||void 0===_e?void 0:_e.value),i.hasInvestedTrait=null!==(_j=null===(_h=null===(_g=null===(_f=i.data)||void 0===_f?void 0:_f.traits)||void 0===_g?void 0:_g.value)||void 0===_h?void 0:_h.includes("invested"))&&void 0!==_j&&_j,i.isInvested=null!==(_m=null===(_l=null===(_k=i.data)||void 0===_k?void 0:_k.invested)||void 0===_l?void 0:_l.value)&&void 0!==_m&&_m,Object.keys(inventory).includes(i.type)){i.data.quantity.value=i.data.quantity.value||0,i.data.weight.value=i.data.weight.value||0;const[approximatedBulk]=bulk_1.calculateBulk([indexedBulkItems.get(i._id)],bulk_1.stacks,!1,bulkConfig);i.totalWeight=bulk_1.formatBulk(approximatedBulk),i.hasCharges="consumable"===i.type&&i.data.charges.max>0,i.isTwoHanded="weapon"===i.type&&!!(i.data.traits.value||[]).find(x=>x.startsWith("two-hand")),i.wieldedTwoHanded="weapon"===i.type&&(i.data.hands||{}).value,inventory[i.type].items.push(i)}if("action"===i.type){const actionType=i.data.actionType.value||"action";let actionImg=0;if("action"===actionType?actionImg=parseInt(i.data.actions.value,10)||1:"reaction"===actionType?actionImg="reaction":"free"===actionType?actionImg="free":"passive"===actionType&&(actionImg="passive"),i.img=this._getActionImg(actionImg),"passive"===actionType?actions.free.actions.push(i):actions[actionType].actions.push(i),i.data.actionCategory&&i.data.actionCategory.value)switch(i.data.actionCategory.value){case"interaction":readonlyActions.interaction.actions.push(i),actorData.hasInteractionActions=!0;break;case"defensive":readonlyActions.defensive.actions.push(i),actorData.hasDefensiveActions=!0;break;case"offensive":readonlyActions.offensive.actions.push(i),actorData.hasOffensiveActions=!0;break;default:readonlyActions.offensive.actions.push(i),actorData.hasOffensiveActions=!0}else readonlyActions.offensive.actions.push(i),actorData.hasOffensiveActions=!0}}actorData.inventory=inventory,actorData.actions=actions,actorData.readonlyActions=readonlyActions}activateListeners(html){super.activateListeners(html);{const title=$(".sheet-navigation .active").data("tabTitle");title&&html.find(".navigation-title").text(title)}html.find(".sheet-navigation").on("mouseover",".item",event=>{const title=event.currentTarget.dataset.tabTitle;title&&$(event.currentTarget).parents(".sheet-navigation").find(".navigation-title").text(title)}),html.find(".sheet-navigation").on("mouseout",".item",event=>{const parent=$(event.currentTarget).parents(".sheet-navigation"),title=parent.find(".item.active").data("tabTitle");title&&parent.find(".navigation-title").text(title)}),html.find(".crb-trait-selector").click(ev=>this._onCrbTraitSelector(ev))}}exports.default=ActorSheetPF2eVehicle},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const sheet_1=__webpack_require__(62),sheet_kit_1=__webpack_require__(63);exports.registerSheets=function(){Items.unregisterSheet("core",ItemSheet),Items.registerSheet("pf2e",sheet_1.ItemSheetPF2e,{types:["weapon","melee","armor","equipment","consumable","treasure","lore","martial","spell","spellcastingEntry","feat","action","backpack","condition","effect"],makeDefault:!0}),Items.registerSheet("pf2e",sheet_kit_1.KitItemSheetPF2e,{types:["kit"],makeDefault:!0})}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const runes_1=__webpack_require__(7),trait_selector_1=__webpack_require__(10);class ItemSheetPF2e extends ItemSheet{static get defaultOptions(){const options=super.defaultOptions;return options.width=630,options.height=460,options.classes=options.classes.concat(["pf2e","item"]),options.template="systems/pf2e/templates/items/item-sheet.html",options.tabs=[{navSelector:".tabs",contentSelector:".sheet-body",initial:"description"}],options.resizable=!1,options}getData(){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k;const data=super.getData(),updatedData=null===(_d=null===(_b=null===(_a=null==this?void 0:this.actor)||void 0===_a?void 0:_a.items)||void 0===_b?void 0:_b.get(null===(_c=null==this?void 0:this.entity)||void 0===_c?void 0:_c.id))||void 0===_d?void 0:_d.data;updatedData&&(data.item=updatedData,data.data=updatedData.data),data.abilities=CONFIG.PF2E.abilities,data.saves=CONFIG.PF2E.saves;const{type:type}=this.item;mergeObject(data,{type:type,hasSidebar:!0,sidebarTemplate:()=>`systems/pf2e/templates/items/${type}-sidebar.html`,hasDetails:["consumable","equipment","feat","spell","weapon","armor","action","melee","backpack","condition"].includes(type),detailsTemplate:()=>`systems/pf2e/templates/items/${type}-details.html`});const dt=duplicate(CONFIG.PF2E.damageTypes);["spell","feat"].includes(type)&&mergeObject(dt,CONFIG.PF2E.healingTypes),data.damageTypes=dt;const stackGroup=null===(_g=null===(_f=null===(_e=this.item.data)||void 0===_e?void 0:_e.data)||void 0===_f?void 0:_f.stackGroup)||void 0===_g?void 0:_g.value;if(data.bulkDisabled=null!=stackGroup&&""!==stackGroup.trim(),data.rarity=CONFIG.PF2E.rarityTraits,data.usage=CONFIG.PF2E.usageTraits,"treasure"===type)data.currencies=CONFIG.currencies,data.stackGroups=CONFIG.stackGroups,data.bulkTypes=CONFIG.PF2E.bulkTypes;else if("consumable"===type)data.consumableTypes=CONFIG.PF2E.consumableTypes,data.bulkTypes=CONFIG.PF2E.bulkTypes,data.stackGroups=CONFIG.stackGroups,data.consumableTraits=CONFIG.consumableTraits;else if("spell"===type)mergeObject(data,{spellTypes:CONFIG.PF2E.spellTypes,spellCategories:CONFIG.PF2E.spellCategories,spellSchools:CONFIG.PF2E.spellSchools,spellLevels:CONFIG.PF2E.spellLevels,magicTraditions:CONFIG.PF2E.magicTraditions,spellComponents:this._formatSpellComponents(data.data),areaSizes:CONFIG.PF2E.areaSizes,areaTypes:CONFIG.PF2E.areaTypes,spellScalingModes:CONFIG.PF2E.spellScalingModes}),this._prepareTraits(data.data.traits,mergeObject(CONFIG.PF2E.magicTraditions,CONFIG.PF2E.spellTraits));else if("weapon"===this.item.type){const martialSkills=[];if(this.actor)for(const i of this.actor.data.items)"martial"===i.type&&martialSkills.push(i);data.martialSkills=martialSkills;const weaponPreciousMaterials=Object.assign({},CONFIG.PF2E.preciousMaterials);delete weaponPreciousMaterials.dragonhide;const slots=runes_1.getPropertySlots(this.item.data);this.assignPropertySlots(data,slots),data.preciousMaterials=weaponPreciousMaterials,data.weaponPotencyRunes=CONFIG.PF2E.weaponPotencyRunes,data.weaponStrikingRunes=CONFIG.PF2E.weaponStrikingRunes,data.weaponPropertyRunes=CONFIG.PF2E.weaponPropertyRunes,data.preciousMaterials=CONFIG.PF2E.preciousMaterials,data.preciousMaterialGrades=CONFIG.PF2E.preciousMaterialGrades,data.weaponTraits=CONFIG.PF2E.weaponTraits,data.weaponTypes=CONFIG.PF2E.weaponTypes,data.weaponGroups=CONFIG.PF2E.weaponGroups,data.itemBonuses=CONFIG.PF2E.itemBonuses,data.damageDie=CONFIG.PF2E.damageDie,data.damageDice=CONFIG.PF2E.damageDice,data.conditionTypes=CONFIG.PF2E.conditionTypes,data.weaponDamage=CONFIG.PF2E.damageTypes,data.weaponRange=CONFIG.PF2E.weaponRange,data.weaponReload=CONFIG.PF2E.weaponReload,data.weaponMAP=CONFIG.PF2E.weaponMAP,data.bulkTypes=CONFIG.PF2E.bulkTypes,data.isBomb="weapon"===this.item.data.type&&"bomb"===(null===(_j=null===(_h=this.item.data.data)||void 0===_h?void 0:_h.group)||void 0===_j?void 0:_j.value),this._prepareTraits(data.data.traits,CONFIG.PF2E.weaponTraits)}else if("melee"===this.item.type){const actions={};if(this.actor)for(const i of this.actor.data.items)"action"===i.type&&(actions[i.name]=i.name);data.attackEffects=CONFIG.PF2E.attackEffects,mergeObject(data.attackEffects,actions),data.hasSidebar=!1,data.detailsActive=!0,data.weaponDamage=CONFIG.PF2E.damageTypes,this._prepareTraits(data.data.traits,CONFIG.PF2E.weaponTraits)}else if("feat"===type)data.featTypes=CONFIG.PF2E.featTypes,data.featActionTypes=CONFIG.PF2E.featActionTypes,data.actionsNumber=CONFIG.PF2E.actionsNumber,data.categories=CONFIG.PF2E.actionCategories,data.featTags=[data.data.level.value,data.data.traits.value].filter(t=>!!t),this._prepareTraits(data.data.traits,CONFIG.PF2E.featTraits);else if("condition"===type)data.conditions=[];else if("action"===type){const actorWeapons=[];if(this.actor)for(const i of this.actor.data.items)"weapon"===i.type&&actorWeapons.push(i);const actionType=data.data.actionType.value||"action";let actionImg=0;"action"===actionType?actionImg=parseInt((data.data.actions||{}).value,10)||1:"reaction"===actionType?actionImg="reaction":"free"===actionType?actionImg="free":"passive"===actionType&&(actionImg="passive"),data.item.img=this._getActionImg(actionImg),data.categories=CONFIG.PF2E.actionCategories,data.weapons=actorWeapons,data.actionTypes=CONFIG.PF2E.actionTypes,data.actionsNumber=CONFIG.PF2E.actionsNumber,data.featTraits=CONFIG.PF2E.featTraits,data.skills=CONFIG.PF2E.skillList,data.proficiencies=CONFIG.PF2E.proficiencyLevels,data.actionTags=[data.data.traits.value].filter(t=>!!t),this._prepareTraits(data.data.traits,CONFIG.PF2E.featTraits)}else if("equipment"===type)data.bulkTypes=CONFIG.PF2E.bulkTypes,data.stackGroups=CONFIG.stackGroups,data.equipmentTraits=CONFIG.PF2E.equipmentTraits;else if("backpack"===type)data.bulkTypes=CONFIG.PF2E.bulkTypes,data.equipmentTraits=CONFIG.PF2E.equipmentTraits,this._prepareTraits(data.data.traits,CONFIG.PF2E.backpackTraits);else if("armor"===type){const slots=runes_1.getPropertySlots(this.item.data);this.assignPropertySlots(data,slots),data.armorPotencyRunes=CONFIG.PF2E.armorPotencyRunes,data.armorResiliencyRunes=CONFIG.PF2E.armorResiliencyRunes,data.armorPropertyRunes=CONFIG.PF2E.armorPropertyRunes,data.armorTypes=CONFIG.PF2E.armorTypes,data.armorGroups=CONFIG.PF2E.armorGroups,data.bulkTypes=CONFIG.PF2E.bulkTypes,data.armorTraits=CONFIG.PF2E.armorTraits,data.preciousMaterials=CONFIG.PF2E.preciousMaterials,data.preciousMaterialGrades=CONFIG.PF2E.preciousMaterialGrades}else("tool"===type||"lore"===type)&&(data.proficiencies=CONFIG.PF2E.proficiencyLevels);return data.enabledRulesUI=null!==(_k=game.settings.get(game.system.id,"enabledRulesUI"))&&void 0!==_k&&_k,data}assignPropertySlots(data,number){const slots=[1,2,3,4];for(const slot of slots)number>=slot&&(data["propertyRuneSlots"+slot]=!0)}_prepareTraits(traits,choices){traits.selected?traits.selected=traits.value.reduce((obj,t)=>(obj[t]=choices[t],obj),{}):traits.selected=[],traits.custom&&(traits.selected.custom=traits.custom)}_formatSpellComponents(data){if(!data.components.value)return[];const comps=data.components.value.split(",").map(c=>CONFIG.PF2E.spellComponents[c.trim()]||c.trim());return data.materials.value&&comps.push(data.materials.value),comps}onTraitSelector(event){event.preventDefault();const a=$(event.currentTarget),options={name:a.parents("label").attr("for"),title:a.parent().text().trim(),choices:CONFIG.PF2E[a.attr("data-options")]};new trait_selector_1.TraitSelector5e(this.item,options).render(!0)}_getActionImg(action){return{0:"icons/svg/mystery-man.svg",1:"systems/pf2e/icons/actions/OneAction.png",2:"systems/pf2e/icons/actions/TwoActions.png",3:"systems/pf2e/icons/actions/ThreeActions.png",free:"systems/pf2e/icons/actions/FreeAction.png",reaction:"systems/pf2e/icons/actions/Reaction.png",passive:"icons/svg/mystery-man.svg"}[action]}async _addDamageRoll(event){event.preventDefault();const newKey=Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15);console.log("newKey: ",newKey);return this.item.update({["data.damageRolls."+newKey]:{damage:"",damageType:""}})}async _deleteDamageRoll(event){event.preventDefault(),await this._onSubmit(event);const targetKey=$(event.target).parents(".damage-part").attr("data-damage-part");return this.item.update({["data.damageRolls.-="+targetKey]:null})}activateListeners(html){super.activateListeners(html),html.find('input[type="checkbox"]').change(event=>this._onSubmit(event)),html.find(".trait-selector").click(ev=>this.onTraitSelector(ev)),html.find(".add-damage").click(ev=>{this._addDamageRoll(ev)}),html.find(".delete-damage").click(ev=>{this._deleteDamageRoll(ev)}),html.find(".add-rule-element").on("click",event=>{var _a;const rules=null!==(_a=this.item.data.data.rules)&&void 0!==_a?_a:[];this.item.update({"data.rules":rules.concat([{key:"PF2E.RuleElement.Unrecognized"}])})}),html.find(".rules").on("click",".remove-rule-element",event=>{var _a;const rules=duplicate(null!==(_a=this.item.data.data.rules)&&void 0!==_a?_a:[]),index=event.currentTarget.dataset.ruleIndex;rules&&rules.length>index&&(rules.splice(index,1),this.item.update({"data.rules":rules}))})}_onChangeInput(event){return this._onSubmit(event)}_updateObject(event,formData){const rules=[];return Object.entries(formData).filter(([key,_])=>key.startsWith("data.rules.")).forEach(([_,value])=>{try{rules.push(JSON.parse(value))}catch(error){throw ui.notifications.warn("Syntax error in rule element definition."),error}}),formData["data.rules"]=rules,super._updateObject(event,formData)}}exports.ItemSheetPF2e=ItemSheetPF2e},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const trait_selector_1=__webpack_require__(10);class KitItemSheetPF2e extends ItemSheet{static get defaultOptions(){const options=super.defaultOptions;return options.width=630,options.height=460,options.classes=options.classes.concat(["pf2e","item"]),options.template="systems/pf2e/templates/items/item-sheet.html",options.tabs=[{navSelector:".tabs",contentSelector:".sheet-body",initial:"description"}],options.scrollY=[".item-details"],options.dragDrop=[{dropSelector:".item-details"}],options.resizable=!1,options}getData(){const data=super.getData();return mergeObject(data,{type:"kit",hasSidebar:!0,sidebarTemplate:()=>"systems/pf2e/templates/items/kit-sidebar.html",hasDetails:!0,detailsTemplate:()=>"systems/pf2e/templates/items/kit-details.html"}),data.rarity=CONFIG.PF2E.rarityTraits,this._prepareTraits(data.data.traits,CONFIG.PF2E.classTraits),data}_prepareTraits(traits,choices){traits.selected?traits.selected=traits.value.reduce((obj,t)=>(obj[t]=choices[t],obj),{}):traits.selected=[],traits.custom&&(traits.selected.custom=traits.custom)}onTraitSelector(event){event.preventDefault();const a=$(event.currentTarget),options={name:a.parents("label").attr("for"),title:a.parent().text().trim(),choices:CONFIG.PF2E[a.attr("data-options")]};new trait_selector_1.TraitSelector5e(this.item,options).render(!0)}_canDragDrop(selector){return this.item.owner}async _onDrop(event){var _a;event.preventDefault();const dropTarget=$(event.target),dragData=event.dataTransfer.getData("text/plain"),dragItem=JSON.parse(dragData),containerId=null!==(_a=dropTarget.data("containerId"))&&void 0!==_a?_a:dropTarget.parents("[data-container-id]").data("containerId");if("Item"!==dragItem.type)return;let item;if(item=dragItem.pack?await game.packs.get(dragItem.pack).getEntity(dragItem.id):game.items.get(dragItem.id),["weapon","armor","equipment","consumable","treasure","backpack","kit"].includes(item.data.type)){const entry={pack:dragItem.pack,id:dragItem.id,img:item.data.img,quantity:1,name:item.name,isContainer:"backpack"===item.data.type&&!containerId,items:{}};let id,{items:items}=this.item.data.data,pathPrefix="data.items";void 0!==containerId&&(pathPrefix=`${pathPrefix}.${containerId}.items`,items=items[containerId].items);do{id=randomID(5)}while(items[id]);await this.item.update({[`${pathPrefix}.${id}`]:entry})}}removeItem(event){event.preventDefault();const target=$(event.target).parents("li"),containerId=target.parents("[data-container-id]").data("containerId");let path="-="+target.data("index");containerId&&(path=`${containerId}.items.${path}`),this.item.update({["data.items."+path]:null})}activateListeners(html){super.activateListeners(html),html.on("change",'input[type="checkbox"]',ev=>this._onSubmit(ev)),html.on("click",".trait-selector",ev=>this.onTraitSelector(ev)),html.on("click","[data-action=remove]",ev=>this.removeItem(ev))}}exports.KitItemSheetPF2e=KitItemSheetPF2e},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class default_1 extends CombatTracker{static get defaultOptions(){return mergeObject(super.defaultOptions,{template:"systems/pf2e/templates/system/combat-tracker.html",baseApplication:"CombatTracker"})}}exports.default=default_1},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const bulk_1=__webpack_require__(6),compendium_browser_1=__webpack_require__(12),utils_1=__webpack_require__(3);function addWeaponPotencyRune(item,itemData){var _a,_b,_c,_d;if("weapon"===item.type){const bonusAttack=null!==(_d=utils_1.toNumber(null!==(_c=null===(_b=null===(_a=item.data)||void 0===_a?void 0:_a.bonus)||void 0===_b?void 0:_b.value)&&void 0!==_c?_c:""))&&void 0!==_d?_d:0;bonusAttack>0&&bonusAttack<5&&(itemData["data.potencyRune.value"]=""+bonusAttack)}return itemData}function addItemRarityAndLevel(item,itemData){return itemData["data.rarity.value"]="common",["treasure","backpack"].includes(item.type)&&(itemData["data.level.value"]="0"),itemData}function addSplashDamage(item,itemData){return["weapon","melee"].includes(item.type)&&(itemData["data.splashDamage.value"]="0"),itemData}function addContainerAttributes(item,itemData){var _a;if(["weapon","melee","armor","equipment","consumable","backpack"].includes(item.type)){const itemName=null===(_a=null==item?void 0:item.name)||void 0===_a?void 0:_a.trim();"Backpack"===itemName?(itemData["data.bulkCapacity.value"]="4",itemData["data.negateBulk.value"]="2"):"Bag of Devouring Type I"===itemName?(itemData["data.bulkCapacity.value"]="50",itemData["data.negateBulk.value"]="50"):"Bag of Devouring Type II"===itemName?(itemData["data.bulkCapacity.value"]="100",itemData["data.negateBulk.value"]="100"):"Bag of Devouring Type III"===itemName?(itemData["data.bulkCapacity.value"]="150",itemData["data.negateBulk.value"]="150"):"Bag of Holding (Type I)"===itemName?(itemData["data.bulkCapacity.value"]="25",itemData["data.negateBulk.value"]="25"):"Bag of Holding (Type II)"===itemName?(itemData["data.bulkCapacity.value"]="50",itemData["data.negateBulk.value"]="50"):"Bag of Holding (Type III)"===itemName?(itemData["data.bulkCapacity.value"]="100",itemData["data.negateBulk.value"]="100"):"Bag of Holding (Type IV)"===itemName?(itemData["data.bulkCapacity.value"]="150",itemData["data.negateBulk.value"]="150"):"Bag of Weasels"===itemName?(itemData["data.bulkCapacity.value"]="25",itemData["data.negateBulk.value"]="25"):"Gloves of Carelessness"===itemName||"Gloves of Storing"===itemName?(itemData["data.bulkCapacity.value"]="1",itemData["data.negateBulk.value"]="1"):"Belt Pouch"===itemName||"Pathfinder's Pouch"===itemName?(itemData["data.bulkCapacity.value"]="4L",itemData["data.negateBulk.value"]="0"):"Knapsack of Halflingkind"===itemName||"Knapsack of Halflingkind (Greater)"===itemName?(itemData["data.bulkCapacity.value"]="50",itemData["data.negateBulk.value"]="50"):"Sack (5)"===itemName?(itemData["data.bulkCapacity.value"]="8",itemData["data.negateBulk.value"]="0"):"Satchel"===itemName?(itemData["data.bulkCapacity.value"]="2",itemData["data.negateBulk.value"]="0"):"Bandolier"===itemName?(itemData["data.bulkCapacity.value"]="8L",itemData["data.negateBulk.value"]="0"):"Saddlebags"===itemName?(itemData["data.bulkCapacity.value"]="3",itemData["data.negateBulk.value"]="0"):"Chest"===itemName?(itemData["data.bulkCapacity.value"]="8",itemData["data.negateBulk.value"]="0"):(itemData["data.bulkCapacity.value"]="",itemData["data.negateBulk.value"]="0"),itemData["data.containerId.value"]=""}return itemData}function addHpThresholdHardness(item,updateData){return["weapon","melee","armor","equipment","consumable","backpack"].includes(item.type)&&(updateData["data.brokenThreshold.value"]=0,updateData["data.hp.value"]=0,updateData["data.maxHp.value"]=0,updateData["data.hardness.value"]=0),updateData}async function addCoin(actorEntity,treasureId,denomination,quantity){if(null!==quantity&&"0"!==(""+quantity).trim()){console.log(`Adding ${quantity} of ${denomination} to actors ${actorEntity.data.name}'s inventory`);const pack=game.packs.find(p=>"pf2e.equipment-srd"===p.collection),item=await pack.getEntity(treasureId);item.data.data.quantity.value=quantity,actorEntity.createOwnedItem(item.data)}}function migrateBulk(item,updateData){var _a,_b,_c,_d,_e;const itemName=null===(_a=null==item?void 0:item.name)||void 0===_a?void 0:_a.trim();if(["weapon","melee","armor","equipment","consumable","backpack"].includes(item.type))if((null==itemName?void 0:itemName.includes("rrow"))?updateData["data.stackGroup.value"]="arrows":(null==itemName?void 0:itemName.includes("olt"))?updateData["data.stackGroup.value"]="bolts":updateData["data.stackGroup.value"]="Rations (1 week)"===itemName?"rations":"Blowgun Darts (10)"===itemName?"blowgunDarts":"Sling Bullets (10)"===itemName?"slingBullets":"","armor"===item.type){const weight=null!==(_d=null===(_c=null===(_b=item.data)||void 0===_b?void 0:_b.weight)||void 0===_c?void 0:_c.value)&&void 0!==_d?_d:"";updateData["data.equippedBulk.value"]=null!==(_e=bulk_1.fixWeight(weight))&&void 0!==_e?_e:"",updateData["data.weight.value"]=bulk_1.calculateCarriedArmorBulk(weight)}else"Backpack"===itemName||"Satchel"===itemName||"Bandolier"===itemName?(updateData["data.weight.value"]="L",updateData["data.equippedBulk.value"]="0"):"Saddlebags"===itemName?(updateData["data.weight.value"]="1",updateData["data.equippedBulk.value"]="L"):"Tack"===itemName?(updateData["data.weight.value"]="2",updateData["data.equippedBulk.value"]="1"):updateData["data.equippedBulk.value"]="";return updateData}function migrateItemData(item,worldSchemaVersion){const updateData={};return worldSchemaVersion<.574&&migrateBulk(item,updateData),worldSchemaVersion<.579&&addContainerAttributes(item,updateData),worldSchemaVersion<.58&&addItemRarityAndLevel(item,updateData),worldSchemaVersion<.582&&addWeaponPotencyRune(item,updateData),worldSchemaVersion<.583&&addHpThresholdHardness(item,updateData),worldSchemaVersion<.586&&addSplashDamage(item,updateData),updateData}function migrateActorItems(actor,updateData,itemUpdateFunction){if(!actor.items)return;const updatedItems=[];duplicate(actor.items).forEach(item=>{let updatedItem=item;const updatedData=itemUpdateFunction(item,{});isObjectEmpty(updatedData)||(updatedItem=mergeObject(updatedItem,updatedData)),updatedItems.push(updatedItem)}),updateData.items=updatedItems}async function migrateActorData(actor,worldSchemaVersion){const updateData={};return worldSchemaVersion<.544&&function(updateData){updateData["data.attributes.sp"]={},updateData["data.attributes.sp.min"]=0,updateData["data.attributes.sp.max"]=0,updateData["data.attributes.sp.value"]=0,updateData["data.attributes.resolve"]={},updateData["data.attributes.resolve.value"]=0,updateData["data.details.keyability"]={},updateData["data.details.keyability.value"]="str"}(updateData),worldSchemaVersion<.573&&function(actor,updateData){var _a,_b,_c;(null===(_c=null===(_b=null===(_a=actor.data)||void 0===_a?void 0:_a.traits)||void 0===_b?void 0:_b.languages)||void 0===_c?void 0:_c.value)&&(updateData["data.traits.languages.value"]=actor.data.traits.languages.value.map(language=>{const l=language.toString().toLowerCase();return"dwarvish"===l?"dwarven":l}))}(actor,updateData),worldSchemaVersion<.578&&async function(actor,updateData){if(!actor.items)return;const updatedItems=[];if(("character"===actor.type||"npc"===actor.type)&&(actor.items.forEach(item=>{const updatedItem=function(item,updateData){const itemImage=null==item?void 0:item.img;return(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/alchemical%20items/alchemical%20elixirs/"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/alchemical%20items/alchemical%20elixirs/","systems/pf2e/icons/equipment/alchemical-items/alchemical-elixirs/"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/alchemical%20items/"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/alchemical%20items/","systems/pf2e/icons/equipment/alchemical-items/"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/adventuring%20gear/"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/adventuring%20gear/","systems/pf2e/icons/equipment/adventuring-gear/"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/cursed%20items/"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/cursed%20items/","systems/pf2e/icons/equipment/cursed-items/"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/held%20items/"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/held%20items/","systems/pf2e/icons/equipment/held-items/"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/intelligent%20items/"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/intelligent%20items/","systems/pf2e/icons/equipment/intelligent-items/"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/worn%20items/"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/worn%20items/","systems/pf2e/icons/equipment/worn-items/"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/consumables/"))&&!(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/consumables/potions/"))&&(null==itemImage?void 0:itemImage.includes("potion"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/consumables/","systems/pf2e/icons/equipment/consumables/potions/"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/alchemical-items/"))&&!(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/alchemical-items/alchemical-elixirs/"))&&(null==itemImage?void 0:itemImage.includes("elixir"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/alchemical-items/","systems/pf2e/icons/equipment/alchemical-items/alchemical-elixirs/"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/alchemical-items/acid-flask.jpg"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/alchemical-items/acid-flask.jpg","systems/pf2e/icons/equipment/alchemical-items/alchemical-bombs/acid-flask.jpg"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/alchemical-items/alchemists-fire.jpg"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/alchemical-items/alchemists-fire.jpg","systems/pf2e/icons/equipment/alchemical-items/alchemical-bombs/alchemists-fire.jpg"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/alchemical-items/frost-vial.jpg"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/alchemical-items/frost-vial.jpg","systems/pf2e/icons/equipment/alchemical-items/alchemical-bombs/frost-vial.jpg"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/alchemical-items/bombers-eye-elixir.jpg"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/alchemical-items/bombers-eye-elixir.jpg","systems/pf2e/icons/equipment/alchemical-items/alchemical-elixirs/bombers-eye-elixir.jpg"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/alchemical-items/antidote.jpg"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/alchemical-items/antidote.jpg","systems/pf2e/icons/equipment/alchemical-items/alchemical-elixirs/antidote.jpg"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/alchemical-items/bottled-lightning.jpg"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/alchemical-items/bottled-lightning.jpg","systems/pf2e/icons/equipment/alchemical-items/alchemical-bombs/bottled-lightning.jpg"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/held-items/platinum-pieces.jpg"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/held-items/platinum-pieces.jpg","systems/pf2e/icons/equipment/treasure/currency/platinum-pieces.jpg"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/held-items/gold-pieces.jpg"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/held-items/gold-pieces.jpg","systems/pf2e/icons/equipment/treasure/currency/gold-pieces.jpg"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/held-items/silver-pieces.jpg"))?updateData.img=itemImage.replace("systems/pf2e/icons/equipment/held-items/silver-pieces.jpg","systems/pf2e/icons/equipment/treasure/currency/silver-pieces.jpg"):(null==itemImage?void 0:itemImage.includes("systems/pf2e/icons/equipment/held-items/copper-pieces.jpg"))&&(updateData.img=itemImage.replace("systems/pf2e/icons/equipment/held-items/copper-pieces.jpg","systems/pf2e/icons/equipment/treasure/currency/copper-pieces.jpg")),updateData}(item,{});isObjectEmpty(updatedItem)||(updatedItem._id=item._id,updatedItems.push(updatedItem))}),updatedItems.length)){const _actor=new Actor(actor);_actor&&await _actor.updateEmbeddedEntity("OwnedItem",updatedItems)}}(actor),"npc"===actor.type?(worldSchemaVersion<.559&&function(actor,updateData){if(!actor.items)return;const updatedItems=[];duplicate(actor.items).forEach(item=>{const updatedItem=item;if("melee"===item.type&&item.data.damage.die){const damageRolls={migrated:{damage:item.data.damage.die,damageType:item.data.damage.damageType}};updatedItem.data.damageRolls=damageRolls}updatedItems.push(updatedItem)}),updateData.items=updatedItems}(actor,updateData),worldSchemaVersion<.566&&function(actor,updateData){if(!actor.items)return;const updatedItems=[];duplicate(actor.items).forEach(item=>{const updatedItem=item;if("melee"===item.type&&item.data.attackEffects){const attackEffects={value:item.data.attackEffects};updatedItem.data.attackEffects=attackEffects}updatedItems.push(updatedItem)}),updateData.items=updatedItems}(actor,updateData),worldSchemaVersion<.571&&(updateData["data.traits.rarity.value"]="common")):"character"===actor.type&&(worldSchemaVersion<.412&&function(updateData){updateData["data.attributes.dying"]={},updateData["data.attributes.dying.value"]=0,updateData["data.attributes.dying.max"]=4,updateData["data.attributes.wounded"]={},updateData["data.attributes.wounded.value"]=0,updateData["data.attributes.wounded.max"]=3,updateData["data.attributes.doomed"]={},updateData["data.attributes.doomed.value"]=0,updateData["data.attributes.doomed.max"]=3}(updateData),worldSchemaVersion<.561&&function(actor,updateData){updateData["data.attributes.flatbonushp"]=parseInt((actor.data.attributes.flatbonushp||{}).value,10)||0,updateData["data.attributes.levelbonushp"]=parseInt((actor.data.attributes.levelbonushp||{}).value,10)||0,updateData["data.attributes.flatbonussp"]=parseInt((actor.data.attributes.flatbonussp||{}).value,10)||0,updateData["data.attributes.levelbonussp"]=parseInt((actor.data.attributes.levelbonussp||{}).value,10)||0,updateData["data.attributes.ancestryhp"]=parseInt((actor.data.attributes.ancestryhp||{}).value,10)||0,updateData["data.attributes.classhp"]=parseInt((actor.data.attributes.classhp||{}).value,10)||0}(actor,updateData),worldSchemaVersion<.567&&(!function(updateData){updateData["data.attributes.classDC"]={rank:0,ability:"str",item:0,value:0,breakdown:""}}(updateData),updateData["data.attributes.bonusbulk"]=0),worldSchemaVersion<.574&&function(actor,updateData){migrateActorItems(actor,updateData,migrateBulk)}(actor,updateData),worldSchemaVersion<.579&&function(actor,updateData){migrateActorItems(actor,updateData,addContainerAttributes)}(actor,updateData),worldSchemaVersion<.58&&(migrateActorItems(actor,updateData,addItemRarityAndLevel),function(actor,updateData){var _a,_b,_c;Array.isArray(null===(_c=null===(_b=null===(_a=actor.data)||void 0===_a?void 0:_a.attributes)||void 0===_b?void 0:_b.speed)||void 0===_c?void 0:_c.otherSpeeds)||(updateData["data.attributes.speed.otherSpeeds"]=[])}(actor,updateData)),worldSchemaVersion<.582&&migrateActorItems(actor,updateData,addWeaponPotencyRune),worldSchemaVersion<.583&&(!function(actor,updateData){updateData["data.attributes.bonusLimitBulk"]=actor.data.attributes.bonusbulk||0,updateData["data.attributes.bonusEncumbranceBulk"]=actor.data.attributes.bonusbulk||0}(actor,updateData),migrateActorItems(actor,updateData,addHpThresholdHardness)),worldSchemaVersion<.584&&(updateData["data.details.ethnicity.value"]="",updateData["data.details.nationality.value"]=""),worldSchemaVersion<.586&&migrateActorItems(actor,updateData,addSplashDamage),worldSchemaVersion<.587&&function(actor,updateData){updateData["data.pfs.reputation"]={EA:0,GA:0,HH:0,VS:0,RO:0,VW:0},updateData["data.pfs.currentFaction"]="EA",updateData["data.pfs.fame"]=0}(0,updateData)),updateData}function migrateSceneData(scene,worldSchemaVersion){return{tokens:duplicate(scene.tokens).map(t=>{const token=new Token(t);if(token.actor){if(!t.actorLink){const updateData=migrateActorData(token.data.actorData,worldSchemaVersion);t.actorData=mergeObject(token.data.actorData,updateData)}}else t.actorId=null,t.actorData={};return t})}}exports.migrateItemData=migrateItemData,exports.migrateActorData=migrateActorData,exports.migrateSceneData=migrateSceneData,exports.migrateCompendium=async function(pack,worldSchemaVersion){const entity=pack.metadata.entity;if(!["Actor","Item","Scene"].includes(entity))return;await pack.migrate();const content=await pack.getContent(),promises=[];for(const ent of content)try{let updateData=null;"Item"===entity?updateData=migrateItemData(ent.data,worldSchemaVersion):"Actor"===entity?updateData=migrateActorData(ent.data,worldSchemaVersion):"Scene"===entity&&(updateData=migrateSceneData(ent.data,worldSchemaVersion)),isObjectEmpty(updateData)||(expandObject(updateData),updateData._id=ent._id,promises.push(pack.updateEntity(updateData)),console.log(`Migrating ${entity} entity ${ent.name} in Compendium ${pack.collection}`))}catch(err){console.error(err)}await Promise.all(promises),console.log(`Migrated all ${entity} entities from Compendium ${pack.collection}`)},exports.migrateWorld=async function(){const systemVersion=game.system.data.version,systemSchemaVersion=Number(game.system.data.schema),worldSchemaVersion=Number(game.settings.get("pf2e","worldSchemaVersion"));ui.notifications.info(`Applying PF2E System Migration to version ${systemVersion}. Please be patient and do not close your game or shut down your server.`,{permanent:!0});const actorMigrations=game.actors.entities.map(async a=>{try{const updateData=migrateActorData(a.data,worldSchemaVersion);isObjectEmpty(updateData)||(console.log("Migrating Actor entity "+a.name),await a.update(updateData,{enforceTypes:!1}))}catch(err){console.error(err)}}),itemMigrations=game.items.entities.map(async i=>{try{const updateData=migrateItemData(i.data,worldSchemaVersion);isObjectEmpty(updateData)||(console.log("Migrating Item entity "+i.name),await i.update(updateData,{enforceTypes:!1}))}catch(err){console.error(err)}}),sceneMigrations=game.scenes.entities.map(async s=>{try{const updateData=migrateSceneData(s.data,worldSchemaVersion);isObjectEmpty(updateData)||(console.log("Migrating Scene entity "+s.name),await s.update(updateData,{enforceTypes:!1}))}catch(err){console.error(err)}}),packMigrations=game.packs.filter(p=>"pf2e"===p.metadata.package&&["Actor","Item","Scene"].includes(p.metadata.entity)).map(async p=>{});await Promise.all([...actorMigrations,...itemMigrations,...sceneMigrations,...packMigrations]),worldSchemaVersion<.576&&await Promise.all(game.actors.entities.map(async a=>{try{await async function(actorEntity){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r;console.log("Migrating coins");const coinCompendiumIds_pp="JuNPeK5Qm1w6wpb4",coinCompendiumIds_gp="B6B7tBWJSqOBz5zz",coinCompendiumIds_sp="5Ew82vBF9YfaiY9f",coinCompendiumIds_cp="lzJ8AVhRcbFul5fh",ppQuantity=null!==(_d=null===(_c=null===(_b=null===(_a=actorEntity.data.data)||void 0===_a?void 0:_a.currency)||void 0===_b?void 0:_b.pp)||void 0===_c?void 0:_c.value)&&void 0!==_d?_d:null;await addCoin(actorEntity,coinCompendiumIds_pp,"pp",ppQuantity);const gpQuantity=null!==(_h=null===(_g=null===(_f=null===(_e=actorEntity.data.data)||void 0===_e?void 0:_e.currency)||void 0===_f?void 0:_f.gp)||void 0===_g?void 0:_g.value)&&void 0!==_h?_h:null;await addCoin(actorEntity,coinCompendiumIds_gp,"gp",gpQuantity);const spQuantity=null!==(_m=null===(_l=null===(_k=null===(_j=actorEntity.data.data)||void 0===_j?void 0:_j.currency)||void 0===_k?void 0:_k.sp)||void 0===_l?void 0:_l.value)&&void 0!==_m?_m:null;await addCoin(actorEntity,coinCompendiumIds_sp,"sp",spQuantity);const cpQuantity=null!==(_r=null===(_q=null===(_p=null===(_o=actorEntity.data.data)||void 0===_o?void 0:_o.currency)||void 0===_p?void 0:_p.cp)||void 0===_q?void 0:_q.value)&&void 0!==_r?_r:null;await addCoin(actorEntity,coinCompendiumIds_cp,"cp",cpQuantity)}(a)}catch(err){console.error(err)}})),worldSchemaVersion<.585&&function(){for(const scope of["FeatBrowser","SpellBrowser","InventoryBrowser","BestiaryBrowser","ActionBrowser"])game.settings.register(scope,"settings",{name:"Feat Browser Settings",default:"{}",type:String,scope:"world"});game.settings.set("pf2e","compendiumBrowserPacks",JSON.stringify({action:JSON.parse(game.settings.get("ActionBrowser","settings")),bestiary:JSON.parse(game.settings.get("BestiaryBrowser","settings")),equipment:JSON.parse(game.settings.get("InventoryBrowser","settings")),feat:JSON.parse(game.settings.get("FeatBrowser","settings")),spell:JSON.parse(game.settings.get("SpellBrowser","settings"))})),compendium_browser_1.compendiumBrowser.initCompendiumList()}(),game.settings.set("pf2e","worldSchemaVersion",systemSchemaVersion),ui.notifications.info(`PF2E System Migration to version ${systemVersion} completed!`,{permanent:!0})}},function(module,exports,__webpack_require__){},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const actor_1=__webpack_require__(2);function rollItemMacro(itemId){const speaker=ChatMessage.getSpeaker();let actor;speaker.token&&(actor=game.actors.tokens[speaker.token]),actor||(actor=game.actors.get(speaker.actor));const item=actor?actor.items.find(i=>i._id===itemId):null;return item?item.roll():ui.notifications.warn("Your controlled Actor does not have an item with ID "+itemId)}async function rollActionMacro(actorId,actionIndex,actionName){const actor=game.actors.get(actorId);if(actor){const action=actor.data.data.actions[actionIndex];if(action&&action.name===actionName){if("strike"===action.type){const templateData={actor:actor,strike:action,strikeIndex:actionIndex,strikeDescription:TextEditor.enrichHTML(game.i18n.localize(action.description))},messageContent=await renderTemplate("systems/pf2e/templates/chat/strike-card.html",templateData),chatData={user:game.user._id,speaker:{actor:actor._id,token:actor.token,alias:actor.name},content:messageContent,type:CONST.CHAT_MESSAGE_TYPES.OTHER},rollMode=game.settings.get("core","rollMode");["gmroll","blindroll"].includes(rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM").map(u=>u._id)),"blindroll"===rollMode&&(chatData.blind=!0),ChatMessage.create(chatData,{})}}else ui.notifications.error(game.i18n.localize("PF2E.MacroActionNoActionError"))}else ui.notifications.error(game.i18n.localize("PF2E.MacroActionNoActorError"))}Hooks.once("init",()=>{game.pf2e={rollItemMacro:rollItemMacro,rollActionMacro:rollActionMacro}}),Hooks.on("canvasInit",async()=>{SquareGrid.prototype.measureDistances=function(segments,options){if(!options.gridSpaces)return BaseGrid.prototype.measureDistances.call(this,segments,options);let nDiagonal=0;const d=canvas.dimensions;return segments.map(s=>{const r=s.ray,nx=Math.abs(Math.ceil(r.dx/d.size)),ny=Math.abs(Math.ceil(r.dy/d.size)),nd=Math.min(nx,ny),ns=Math.abs(ny-nx);nDiagonal+=nd;const nd10=Math.floor(nDiagonal/2)-Math.floor((nDiagonal-nd)/2);return(2*nd10+(nd-nd10)+ns)*canvas.dimensions.distance})}}),Hooks.on("hotbarDrop",(bar,data,slot)=>"Item"===data.type?(async function(item,slot){const command=`game.pf2e.rollItemMacro("${item._id}");`;let macro=game.macros.entities.find(m=>m.name===item.name&&m.data.command===command);macro||(macro=await Macro.create({command:command,name:item.name,type:"script",img:item.img,flags:{"pf2e.itemMacro":!0}},{displaySheet:!1}),game.user.assignHotbarMacro(macro,slot))}(data.data,slot),!1):"Action"===data.type?(async function(actionIndex,actorId,slot){const action=game.actors.get(actorId).data.data.actions[actionIndex],macroName=`${game.i18n.localize("PF2E.WeaponStrikeLabel")}: ${action.name}`,command=`game.pf2e.rollActionMacro('${actorId}', ${actionIndex}, '${action.name}')`;let macro=game.macros.entities.find(m=>m.name===macroName&&m.data.command===command);macro||(macro=await Macro.create({command:command,name:macroName,type:"script",img:action.imageUrl,flags:{"pf2e.actionMacro":!0}},{displaySheet:!1}),game.user.assignHotbarMacro(macro,slot))}(data.index,data.actorId,slot),!1):("Skill"===data.type&&async function(skill,skillName,actorId,slot){var _a;const command=`\nconst a = game.actors.get('${actorId}');\nif (a) {\n    const opts = a.getRollOptions(['all', 'skill-check', '${null!==(_a=actor_1.SKILL_DICTIONARY[skill])&&void 0!==_a?_a:skill}']);\n    a.data.data.skills['${skill}']?.roll(event, opts);\n} else {\n    ui.notifications.error(game.i18n.localize('PF2E.MacroActionNoActorError'));\n}`,macroName=game.i18n.format("PF2E.SkillCheckWithName",{skillName:skillName});let macro=game.macros.entities.find(m=>m.name===macroName&&m.data.command===command);macro||(macro=await Macro.create({command:command,name:macroName,type:"script",img:"icons/svg/d20-grey.svg",flags:{"pf2e.skillMacro":!0}},{displaySheet:!1}),game.user.assignHotbarMacro(macro,slot))}(data.skill,data.skillName,data.actorId,slot),!0))},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const actor_1=__importDefault(__webpack_require__(2));class ChatDamageButtonsPF2e extends Application{init(){Hooks.on("renderChatMessage",(message,html,data)=>{var _a,_b;if(!message.isRoll||20===(null===(_b=null===(_a=message.roll)||void 0===_a?void 0:_a.dice[0])||void 0===_b?void 0:_b.faces))return;const btnStyling="width: 22px; height:22px; font-size:10px;line-height:1px",fullDamageButton=$(`<button class="dice-total-fullDamage-btn" style="${btnStyling}"><i class="fas fa-bahai" title="Click to apply full damage to selected token(s)."></i></button>`),halfDamageButton=$(`<button class="dice-total-halfDamage-btn" style="${btnStyling}"><i class="fas fa-chevron-down" title="Click to apply half damage to selected token(s)."></i></button>`),doubleDamageButton=$(`<button class="dice-total-doubleDamage-btn" style="${btnStyling}"><i class="fas fa-angle-double-up" title="Click to apply double damage to selected token(s)."></i></button>`),shieldButton=$(`<button class="dice-total-shield-btn" style="${btnStyling}"><i class="fas fa-shield-alt" title="Click to toggle the shield block status of the selected token(s)."></i></button>`),fullHealingButton=$(`<button class="dice-total-fullHealing-btn" style="${btnStyling}"><i class="fas fa-heart" title="Click to apply full healing to selected token(s)."></i></button>`),btnContainer1=$('<span class="dmgBtn-container" style="position:absolute; right:0; bottom:1px;"></span>'),btnContainer2=$('<span class="dmgBtn-container" style="position:absolute; top:0; right:0; bottom:1px;"></span>');btnContainer1.append(fullDamageButton),btnContainer1.append(halfDamageButton),btnContainer1.append(doubleDamageButton),btnContainer2.append(shieldButton),btnContainer2.append(fullHealingButton),html.find(".dice-total").wrapInner('<span id="value"></span>').append(btnContainer1),html.find(".dice-formula").append(btnContainer2),fullDamageButton.click(ev=>{ev.stopPropagation();let attribute="attributes.hp";CONFIG.PF2E.chatDamageButtonShieldToggle&&(attribute="attributes.shield",html.find(".dice-total-shield-btn").toggleClass("shield-activated"),CONFIG.PF2E.chatDamageButtonShieldToggle=!1),ev.shiftKey?ChatDamageButtonsPF2e.shiftModifyDamage(html,1,attribute):actor_1.default.applyDamage(html,1,attribute)}),halfDamageButton.click(ev=>{ev.stopPropagation();let attribute="attributes.hp";CONFIG.PF2E.chatDamageButtonShieldToggle&&(attribute="attributes.shield",html.find(".dice-total-shield-btn").toggleClass("shield-activated"),CONFIG.PF2E.chatDamageButtonShieldToggle=!1),ev.shiftKey?ChatDamageButtonsPF2e.shiftModifyDamage(html,.5,attribute):actor_1.default.applyDamage(html,.5,attribute)}),doubleDamageButton.click(ev=>{ev.stopPropagation();let attribute="attributes.hp";CONFIG.PF2E.chatDamageButtonShieldToggle&&(attribute="attributes.shield",html.find(".dice-total-shield-btn").toggleClass("shield-activated"),CONFIG.PF2E.chatDamageButtonShieldToggle=!1),ev.shiftKey?ChatDamageButtonsPF2e.shiftModifyDamage(html,2,attribute):actor_1.default.applyDamage(html,2,attribute)}),shieldButton.click(ev=>{ev.stopPropagation(),html.find(".dice-total-shield-btn").toggleClass("shield-activated"),CONFIG.PF2E.chatDamageButtonShieldToggle=!CONFIG.PF2E.chatDamageButtonShieldToggle}),fullHealingButton.click(ev=>{ev.stopPropagation(),ev.shiftKey?ChatDamageButtonsPF2e.shiftModifyDamage(html,-1):actor_1.default.applyDamage(html,-1)})})}static shiftModifyDamage(html,multiplier,attributePassed="attributes.hp"){new Dialog({title:game.i18n.localize("PF2E.UI.shiftModifyDamageTitle"),content:`<form>\n                    <div class="form-group">\n                        <label>${game.i18n.localize("PF2E.UI.shiftModifyDamageLabel")}</label>\n                        <input type="number" name="modifier" value="" placeholder="0">\n                    </div>\n                  </form>\n                  <script type="text/javascript">\n                    $(function () {\n                        $(".form-group input").focus();\n                    });\n                  <\/script>`,buttons:{ok:{label:"Ok",callback:async dialogHtml=>{let modifier=parseFloat(dialogHtml.find('[name="modifier"]').val());Number.isNaN(modifier)&&(modifier=0),void 0!==modifier&&await actor_1.default.applyDamage(html,multiplier,attributePassed,modifier)}}},default:"ok",close:()=>{}}).render(!0)}}(new ChatDamageButtonsPF2e).init()},function(module,exports){Hooks.once("renderChatLog",async()=>{game.settings.register("pf2e","critFumbleButtons",{name:game.i18n.localize("PF2E.SETTINGS.critFumbleCardButtons.name"),hint:game.i18n.localize("PF2E.SETTINGS.critFumbleCardButtons.hint"),scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>{window.location.reload()}}),game.settings.register("pf2e","drawCritFumble",{name:game.i18n.localize("PF2E.SETTINGS.critFumbleCards.name"),hint:game.i18n.localize("PF2E.SETTINGS.critFumbleCards.hint"),scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>{window.location.reload()}}),(game.settings.get("pf2e","drawCritFumble")||game.settings.get("pf2e","critFumbleButtons"))&&await class{static async init(){const rollableTables=game.packs.get("pf2e.rollable-tables");if(this.critTable=new RollTable(await rollableTables.getEntry("FTEpsIWWVrDj0jNG")),this.fumbleTable=new RollTable(await rollableTables.getEntry("WzMGWMIrrPvSp75D")),game.settings.get("pf2e","drawCritFumble")){this.diceSoNice=game.modules.get("dice-so-nice")&&game.modules.get("dice-so-nice").active;const hooksOn=this.diceSoNice?"diceSoNiceRollComplete":"createChatMessage";Hooks.on(hooksOn,this.handleRoll.bind(this))}game.settings.get("pf2e","critFumbleButtons")&&Hooks.on("renderChatMessage",(message,html)=>{var _a;if(message.isAuthor&&message.isRoll&&message.isContentVisible){const context=message.getFlag("pf2e","context");if(20===(null===(_a=message.roll.dice[0])||void 0===_a?void 0:_a.faces)&&"attack-roll"===(null==context?void 0:context.type)){const critButton=$(`<button class="dice-total-fullDamage-btn" style="width: 22px; height:22px; font-size:10px;line-height:1px"><i class="fas fa-thumbs-up" title="${game.i18n.localize("PF2E.CriticalHitCardButtonTitle")}"></i></button>`),fumbleButton=$(`<button class="dice-total-fullDamage-btn" style="width: 22px; height:22px; font-size:10px;line-height:1px"><i class="fas fa-thumbs-down" title="${game.i18n.localize("PF2E.CriticalFumbleCardButtonTitle")}"></i></button>`),btnContainer1=$('<span class="dmgBtn-container" style="position:absolute; right:0; bottom:1px;"></span>');btnContainer1.append(critButton),btnContainer1.append(fumbleButton),critButton.on("click",event=>{event.stopPropagation(),this.critTable.draw(),event.currentTarget.blur()}),fumbleButton.on("click",event=>{event.stopPropagation(),this.fumbleTable.draw(),event.currentTarget.blur()}),html.find(".dice-total").wrapInner('<span id="value"></span>').append(btnContainer1)}}})}static handleRoll(chatMessage){if((chatMessage=this.diceSoNice?game.messages.get(chatMessage):chatMessage).isAuthor&&chatMessage.isRoll&&chatMessage.isContentVisible){const context=chatMessage.getFlag("pf2e","context");if("attack-roll"===(null==context?void 0:context.type)){const die=chatMessage.roll.dice[0];20===die.faces&&(20===die.total?this.drawCard(this.critTable,chatMessage):1===die.total&&this.drawCard(this.fumbleTable,chatMessage))}}}static drawCard(table,chatMessage){this.diceSoNice||mergeObject(chatMessage.data,{"-=sound":null}),table.draw()}}.init()})},function(module,exports){Hooks.on("preCreateOwnedItem",(actor,item)=>{actor.itemBehaviour(item)}),Hooks.on("preUpdateOwnedItem",(actor,item,itemUpdate)=>{itemUpdate.name&&(actor.itemBehaviour(item,!1),actor.itemBehaviour(itemUpdate))}),Hooks.on("preDeleteOwnedItem",(actor,item)=>{actor.itemBehaviour(item,!1)}),Actor.prototype.itemBehaviour=async function(item,create=!0){"Diehard"===item.name?this.itemFeatDiehard(create):"Toughness"===item.name?this.itemFeatToughness(create):"Mountain’s Stoutness"!==item.name&&"Mountain's Stoutness"!==item.name||this.itemFeatMountainsstoutness(create)},Actor.prototype.itemFeatDiehard=async function(create=!0){create?(console.log("PF2e | Applying Feat effect: Diehard"),ui.notifications.info("Applied Diehard: your maximum dying/wounded/doomed level has increased"),await this.update({"data.attributes.dying.max":5})):(console.log("PF2e | Removing Feat effect: Diehard"),ui.notifications.info("Removed Diehard: your maximum dying/wounded/doomed level has decreased"),this.data.data.attributes.dying.value>4&&(this.data.data.attributes.dying.value=4),await this.update({"data.attributes.dying.max":4,"data.attributes.dying.value":this.data.data.attributes.dying.value}),this.data.data.attributes.doomed.value>3&&(this.data.data.attributes.doomed.value=3),await this.update({"data.attributes.doomed.max":3,"data.attributes.doomed.value":this.data.data.attributes.doomed.value}),this.data.data.attributes.wounded.value>3&&(this.data.data.attributes.wounded.value=3),await this.update({"data.attributes.wounded.max":3,"data.attributes.wounded.value":this.data.data.attributes.wounded.value}))},Actor.prototype.itemFeatToughness=async function(create=!0){if(create){let recoveryMod=getProperty(this.data.data.attributes,"dying.recoveryMod")||0;const levelBonusHp=parseInt(getProperty(this.data.data.attributes,"levelbonushp")||0,10);recoveryMod=-1===recoveryMod?-4:-1,console.log("PF2e | Applying Feat effect: Toughness"),ui.notifications.info("Applied Toughness: your maximum HP is increased by your level and your recovery roll DC has decreased"),await this.update({"data.attributes.dying.recoveryMod":recoveryMod,"data.attributes.levelbonushp":levelBonusHp+1})}else{let recoveryMod=getProperty(this.data.data.attributes,"dying.recoveryMod")||0;const levelBonusHp=parseInt(getProperty(this.data.data.attributes,"levelbonushp")||1,10);recoveryMod=-4===recoveryMod?-1:0,console.log("PF2e | Removing Feat effect: Toughness"),ui.notifications.info("Removed Toughness: your maximum HP is decreased by your level and your recovery roll DC has increased"),await this.update({"data.attributes.dying.recoveryMod":recoveryMod,"data.attributes.levelbonushp":levelBonusHp-1})}},Actor.prototype.itemFeatMountainsstoutness=async function(create=!0){if(create){let recoveryMod=getProperty(this.data.data.attributes,"dying.recoveryMod")||0;const levelBonusHp=parseInt(getProperty(this.data.data.attributes,"levelbonushp")||0,10);recoveryMod=-1===recoveryMod?-4:-1,console.log("PF2e | Applying Feat effect: Mountain’s Stoutness"),ui.notifications.info("Applied Mountain’s Stoutness: your maximum HP is increased by your level and your recovery roll DC has decreased"),await this.update({"data.attributes.dying.recoveryMod":recoveryMod,"data.attributes.levelbonushp":levelBonusHp+1})}else{let recoveryMod=getProperty(this.data.data.attributes,"dying.recoveryMod")||0;const levelBonusHp=parseInt(getProperty(this.data.data.attributes,"levelbonushp")||1,10);recoveryMod=-4===recoveryMod?-1:0,console.log("PF2e | Removing Feat effect: Mountain’s Stoutness"),ui.notifications.info("Removed Mountain’s Stoutness: your maximum HP is decreased by your level and your recovery roll DC has increased"),await this.update({"data.attributes.dying.recoveryMod":recoveryMod,"data.attributes.levelbonushp":levelBonusHp-1})}}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const kits_1=__webpack_require__(19),conditions_1=__webpack_require__(5);Hooks.on("dropCanvasData",async(c,data)=>{const target=c.tokens.placeables.find(token=>{const maximumX=token.x+token.hitArea.right,maximumY=token.y+token.hitArea.bottom;return data.x>=token.x&&data.y>=token.y&&data.x<=maximumX&&data.y<=maximumY?token:null});if(null==target?void 0:target.actor){if(!["character","npc"].includes(target.actor.data.type))return!0;if("Item"===data.type){let itemData;if(data.pack){const pack=await game.packs.get(data.pack);pack&&(itemData=await pack.getEntry(data.id))}else if(data.data)itemData=data.data;else{itemData=game.items.get(data.id).data}if(itemData&&["weapon","armor","equipment","consumable","treasure","lore","martial","feat","action","backpack","kit","condition","effect"].includes(itemData.type))switch(itemData.type){case"condition":return await conditions_1.PF2eConditionManager.addConditionToToken(itemData,target),!1;case"kit":return await kits_1.addKit(itemData,async newItems=>{const items=await target.actor.createEmbeddedEntity("OwnedItem",newItems);return Array.isArray(items)?items.map(item=>item._id):[items._id]}),!1;default:return await target.actor.createEmbeddedEntity("OwnedItem",itemData),!1}}}return!0})}]);